<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10200.17.0216.1925                               -->
<workbook source-build='10.2.0 (10200.17.0216.1925)' source-platform='mac' version='10.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='prosperLoanData' inline='true' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='prosperLoanData' name='textscan.1q5b03d1val7gq1g5v2tj03glt7l'>
            <connection class='textscan' directory='/Users/Miyal/Desktop/Udacity/Data Visualization/Project' filename='prosperLoanData.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1q5b03d1val7gq1g5v2tj03glt7l' name='prosperLoanData.csv' table='[prosperLoanData#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_AU' separator=','>
            <column datatype='string' name='ListingKey' ordinal='0' />
            <column datatype='integer' name='ListingNumber' ordinal='1' />
            <column datatype='datetime' name='ListingCreationDate' ordinal='2' />
            <column datatype='string' name='CreditGrade' ordinal='3' />
            <column datatype='integer' name='Term' ordinal='4' />
            <column datatype='string' name='LoanStatus' ordinal='5' />
            <column datatype='datetime' name='ClosedDate' ordinal='6' />
            <column datatype='real' name='BorrowerAPR' ordinal='7' />
            <column datatype='real' name='BorrowerRate' ordinal='8' />
            <column datatype='real' name='LenderYield' ordinal='9' />
            <column datatype='real' name='EstimatedEffectiveYield' ordinal='10' />
            <column datatype='real' name='EstimatedLoss' ordinal='11' />
            <column datatype='real' name='EstimatedReturn' ordinal='12' />
            <column datatype='integer' name='ProsperRating (numeric)' ordinal='13' />
            <column datatype='string' name='ProsperRating (Alpha)' ordinal='14' />
            <column datatype='real' name='ProsperScore' ordinal='15' />
            <column datatype='integer' name='ListingCategory (numeric)' ordinal='16' />
            <column datatype='string' name='BorrowerState' ordinal='17' />
            <column datatype='string' name='Occupation' ordinal='18' />
            <column datatype='string' name='EmploymentStatus' ordinal='19' />
            <column datatype='integer' name='EmploymentStatusDuration' ordinal='20' />
            <column datatype='boolean' name='IsBorrowerHomeowner' ordinal='21' />
            <column datatype='boolean' name='CurrentlyInGroup' ordinal='22' />
            <column datatype='string' name='GroupKey' ordinal='23' />
            <column datatype='datetime' name='DateCreditPulled' ordinal='24' />
            <column datatype='integer' name='CreditScoreRangeLower' ordinal='25' />
            <column datatype='integer' name='CreditScoreRangeUpper' ordinal='26' />
            <column datatype='datetime' name='FirstRecordedCreditLine' ordinal='27' />
            <column datatype='integer' name='CurrentCreditLines' ordinal='28' />
            <column datatype='integer' name='OpenCreditLines' ordinal='29' />
            <column datatype='integer' name='TotalCreditLinespast7years' ordinal='30' />
            <column datatype='integer' name='OpenRevolvingAccounts' ordinal='31' />
            <column datatype='real' name='OpenRevolvingMonthlyPayment' ordinal='32' />
            <column datatype='integer' name='InquiriesLast6Months' ordinal='33' />
            <column datatype='real' name='TotalInquiries' ordinal='34' />
            <column datatype='integer' name='CurrentDelinquencies' ordinal='35' />
            <column datatype='real' name='AmountDelinquent' ordinal='36' />
            <column datatype='integer' name='DelinquenciesLast7Years' ordinal='37' />
            <column datatype='integer' name='PublicRecordsLast10Years' ordinal='38' />
            <column datatype='integer' name='PublicRecordsLast12Months' ordinal='39' />
            <column datatype='real' name='RevolvingCreditBalance' ordinal='40' />
            <column datatype='real' name='BankcardUtilization' ordinal='41' />
            <column datatype='real' name='AvailableBankcardCredit' ordinal='42' />
            <column datatype='real' name='TotalTrades' ordinal='43' />
            <column datatype='real' name='TradesNeverDelinquent (percentage)' ordinal='44' />
            <column datatype='real' name='TradesOpenedLast6Months' ordinal='45' />
            <column datatype='real' name='DebtToIncomeRatio' ordinal='46' />
            <column datatype='string' name='IncomeRange' ordinal='47' />
            <column datatype='boolean' name='IncomeVerifiable' ordinal='48' />
            <column datatype='real' name='StatedMonthlyIncome' ordinal='49' />
            <column datatype='string' name='LoanKey' ordinal='50' />
            <column datatype='integer' name='TotalProsperLoans' ordinal='51' />
            <column datatype='integer' name='TotalProsperPaymentsBilled' ordinal='52' />
            <column datatype='integer' name='OnTimeProsperPayments' ordinal='53' />
            <column datatype='integer' name='ProsperPaymentsLessThanOneMonthLate' ordinal='54' />
            <column datatype='integer' name='ProsperPaymentsOneMonthPlusLate' ordinal='55' />
            <column datatype='real' name='ProsperPrincipalBorrowed' ordinal='56' />
            <column datatype='real' name='ProsperPrincipalOutstanding' ordinal='57' />
            <column datatype='integer' name='ScorexChangeAtTimeOfListing' ordinal='58' />
            <column datatype='integer' name='LoanCurrentDaysDelinquent' ordinal='59' />
            <column datatype='integer' name='LoanFirstDefaultedCycleNumber' ordinal='60' />
            <column datatype='integer' name='LoanMonthsSinceOrigination' ordinal='61' />
            <column datatype='integer' name='LoanNumber' ordinal='62' />
            <column datatype='integer' name='LoanOriginalAmount' ordinal='63' />
            <column datatype='string' name='LoanOriginationDate' ordinal='64' />
            <column datatype='string' name='LoanOriginationQuarter' ordinal='65' />
            <column datatype='string' name='MemberKey' ordinal='66' />
            <column datatype='real' name='MonthlyLoanPayment' ordinal='67' />
            <column datatype='real' name='LP_CustomerPayments' ordinal='68' />
            <column datatype='real' name='LP_CustomerPrincipalPayments' ordinal='69' />
            <column datatype='real' name='LP_InterestandFees' ordinal='70' />
            <column datatype='real' name='LP_ServiceFees' ordinal='71' />
            <column datatype='real' name='LP_CollectionFees' ordinal='72' />
            <column datatype='real' name='LP_GrossPrincipalLoss' ordinal='73' />
            <column datatype='real' name='LP_NetPrincipalLoss' ordinal='74' />
            <column datatype='real' name='LP_NonPrincipalRecoverypayments' ordinal='75' />
            <column datatype='real' name='PercentFunded' ordinal='76' />
            <column datatype='integer' name='Recommendations' ordinal='77' />
            <column datatype='integer' name='InvestmentFromFriendsCount' ordinal='78' />
            <column datatype='real' name='InvestmentFromFriendsAmount' ordinal='79' />
            <column datatype='integer' name='Investors' ordinal='80' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>ListingKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ListingKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingKey</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ListingNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingNumber</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingCreationDate</remote-name>
            <remote-type>135</remote-type>
            <local-name>[ListingCreationDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingCreationDate</remote-alias>
            <ordinal>2</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditGrade</remote-name>
            <remote-type>129</remote-type>
            <local-name>[CreditGrade]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditGrade</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Term</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Term]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Term</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanStatus</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanStatus]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanStatus</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ClosedDate</remote-name>
            <remote-type>135</remote-type>
            <local-name>[ClosedDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ClosedDate</remote-alias>
            <ordinal>6</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerAPR</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BorrowerAPR]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerAPR</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerRate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BorrowerRate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerRate</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LenderYield</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LenderYield]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LenderYield</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedEffectiveYield</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedEffectiveYield]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedEffectiveYield</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedLoss</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedReturn</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedReturn]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedReturn</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperRating (numeric)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperRating (numeric)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperRating (numeric)</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperRating (Alpha)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ProsperRating (Alpha)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperRating (Alpha)</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperScore]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperScore</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingCategory (numeric)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ListingCategory (numeric)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingCategory (numeric)</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerState</remote-name>
            <remote-type>129</remote-type>
            <local-name>[BorrowerState]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerState</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Occupation</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Occupation]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Occupation</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EmploymentStatus</remote-name>
            <remote-type>129</remote-type>
            <local-name>[EmploymentStatus]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EmploymentStatus</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EmploymentStatusDuration</remote-name>
            <remote-type>20</remote-type>
            <local-name>[EmploymentStatusDuration]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EmploymentStatusDuration</remote-alias>
            <ordinal>20</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IsBorrowerHomeowner</remote-name>
            <remote-type>11</remote-type>
            <local-name>[IsBorrowerHomeowner]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IsBorrowerHomeowner</remote-alias>
            <ordinal>21</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentlyInGroup</remote-name>
            <remote-type>11</remote-type>
            <local-name>[CurrentlyInGroup]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentlyInGroup</remote-alias>
            <ordinal>22</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GroupKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[GroupKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>GroupKey</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DateCreditPulled</remote-name>
            <remote-type>135</remote-type>
            <local-name>[DateCreditPulled]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DateCreditPulled</remote-alias>
            <ordinal>24</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditScoreRangeLower</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CreditScoreRangeLower]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditScoreRangeLower</remote-alias>
            <ordinal>25</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditScoreRangeUpper</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CreditScoreRangeUpper]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditScoreRangeUpper</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FirstRecordedCreditLine</remote-name>
            <remote-type>135</remote-type>
            <local-name>[FirstRecordedCreditLine]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>FirstRecordedCreditLine</remote-alias>
            <ordinal>27</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentCreditLines</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CurrentCreditLines]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentCreditLines</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenCreditLines</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OpenCreditLines]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenCreditLines</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalCreditLinespast7years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalCreditLinespast7years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalCreditLinespast7years</remote-alias>
            <ordinal>30</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenRevolvingAccounts</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OpenRevolvingAccounts]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenRevolvingAccounts</remote-alias>
            <ordinal>31</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenRevolvingMonthlyPayment</remote-name>
            <remote-type>5</remote-type>
            <local-name>[OpenRevolvingMonthlyPayment]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenRevolvingMonthlyPayment</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InquiriesLast6Months</remote-name>
            <remote-type>20</remote-type>
            <local-name>[InquiriesLast6Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InquiriesLast6Months</remote-alias>
            <ordinal>33</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalInquiries</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TotalInquiries]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalInquiries</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentDelinquencies</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CurrentDelinquencies]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentDelinquencies</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AmountDelinquent</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AmountDelinquent]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>AmountDelinquent</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DelinquenciesLast7Years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[DelinquenciesLast7Years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DelinquenciesLast7Years</remote-alias>
            <ordinal>37</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PublicRecordsLast10Years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PublicRecordsLast10Years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PublicRecordsLast10Years</remote-alias>
            <ordinal>38</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PublicRecordsLast12Months</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PublicRecordsLast12Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PublicRecordsLast12Months</remote-alias>
            <ordinal>39</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RevolvingCreditBalance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[RevolvingCreditBalance]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>RevolvingCreditBalance</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BankcardUtilization</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BankcardUtilization]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BankcardUtilization</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AvailableBankcardCredit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AvailableBankcardCredit]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>AvailableBankcardCredit</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalTrades</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TotalTrades]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalTrades</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TradesNeverDelinquent (percentage)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TradesNeverDelinquent (percentage)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TradesNeverDelinquent (percentage)</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TradesOpenedLast6Months</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TradesOpenedLast6Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TradesOpenedLast6Months</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DebtToIncomeRatio</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DebtToIncomeRatio]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DebtToIncomeRatio</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IncomeRange</remote-name>
            <remote-type>129</remote-type>
            <local-name>[IncomeRange]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IncomeRange</remote-alias>
            <ordinal>47</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IncomeVerifiable</remote-name>
            <remote-type>11</remote-type>
            <local-name>[IncomeVerifiable]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IncomeVerifiable</remote-alias>
            <ordinal>48</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>StatedMonthlyIncome</remote-name>
            <remote-type>5</remote-type>
            <local-name>[StatedMonthlyIncome]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>StatedMonthlyIncome</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanKey</remote-alias>
            <ordinal>50</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalProsperLoans</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalProsperLoans]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalProsperLoans</remote-alias>
            <ordinal>51</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalProsperPaymentsBilled</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalProsperPaymentsBilled]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalProsperPaymentsBilled</remote-alias>
            <ordinal>52</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OnTimeProsperPayments</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OnTimeProsperPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OnTimeProsperPayments</remote-alias>
            <ordinal>53</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPaymentsLessThanOneMonthLate</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperPaymentsLessThanOneMonthLate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPaymentsLessThanOneMonthLate</remote-alias>
            <ordinal>54</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPaymentsOneMonthPlusLate</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperPaymentsOneMonthPlusLate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPaymentsOneMonthPlusLate</remote-alias>
            <ordinal>55</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPrincipalBorrowed</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperPrincipalBorrowed]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPrincipalBorrowed</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPrincipalOutstanding</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperPrincipalOutstanding]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPrincipalOutstanding</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ScorexChangeAtTimeOfListing</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ScorexChangeAtTimeOfListing]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ScorexChangeAtTimeOfListing</remote-alias>
            <ordinal>58</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanCurrentDaysDelinquent</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanCurrentDaysDelinquent]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanCurrentDaysDelinquent</remote-alias>
            <ordinal>59</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanFirstDefaultedCycleNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanFirstDefaultedCycleNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanFirstDefaultedCycleNumber</remote-alias>
            <ordinal>60</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanMonthsSinceOrigination</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanMonthsSinceOrigination]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanMonthsSinceOrigination</remote-alias>
            <ordinal>61</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanNumber</remote-alias>
            <ordinal>62</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginalAmount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanOriginalAmount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginalAmount</remote-alias>
            <ordinal>63</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginationDate</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanOriginationDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginationDate</remote-alias>
            <ordinal>64</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginationQuarter</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanOriginationQuarter]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginationQuarter</remote-alias>
            <ordinal>65</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MemberKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[MemberKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>MemberKey</remote-alias>
            <ordinal>66</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MonthlyLoanPayment</remote-name>
            <remote-type>5</remote-type>
            <local-name>[MonthlyLoanPayment]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>MonthlyLoanPayment</remote-alias>
            <ordinal>67</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CustomerPayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CustomerPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CustomerPayments</remote-alias>
            <ordinal>68</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CustomerPrincipalPayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CustomerPrincipalPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CustomerPrincipalPayments</remote-alias>
            <ordinal>69</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_InterestandFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_InterestandFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_InterestandFees</remote-alias>
            <ordinal>70</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_ServiceFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_ServiceFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_ServiceFees</remote-alias>
            <ordinal>71</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CollectionFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CollectionFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CollectionFees</remote-alias>
            <ordinal>72</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_GrossPrincipalLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_GrossPrincipalLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_GrossPrincipalLoss</remote-alias>
            <ordinal>73</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_NetPrincipalLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_NetPrincipalLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_NetPrincipalLoss</remote-alias>
            <ordinal>74</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_NonPrincipalRecoverypayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_NonPrincipalRecoverypayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_NonPrincipalRecoverypayments</remote-alias>
            <ordinal>75</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentFunded</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentFunded]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PercentFunded</remote-alias>
            <ordinal>76</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Recommendations</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Recommendations]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Recommendations</remote-alias>
            <ordinal>77</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InvestmentFromFriendsCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[InvestmentFromFriendsCount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InvestmentFromFriendsCount</remote-alias>
            <ordinal>78</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InvestmentFromFriendsAmount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[InvestmentFromFriendsAmount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InvestmentFromFriendsAmount</remote-alias>
            <ordinal>79</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Investors</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Investors]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Investors</remote-alias>
            <ordinal>80</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_AU&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Amount Delinquent' datatype='real' name='[AmountDelinquent]' role='measure' type='quantitative' />
      <column caption='Available Bankcard Credit' datatype='real' name='[AvailableBankcardCredit]' role='measure' type='quantitative' />
      <column caption='Bankcard Utilization' datatype='real' name='[BankcardUtilization]' role='measure' type='quantitative' />
      <column caption='Borrower APR' datatype='real' name='[BorrowerAPR]' role='measure' type='quantitative' />
      <column caption='Borrower Rate' datatype='real' name='[BorrowerRate]' role='measure' type='quantitative' />
      <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Delinquencies' datatype='boolean' name='[Calculation_475129814591930368]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([AmountDelinquent] &gt; 0) AND NOT ISNULL([AmountDelinquent])' />
        <aliases>
          <alias key='false' value='Not Delinquent' />
          <alias key='true' value='Delinquent' />
        </aliases>
      </column>
      <column caption='Liabilities' datatype='boolean' name='[Calculation_475129814592937985]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7) AND NOT ISNULL([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7)' />
        <aliases>
          <alias key='false' value='Low Liability' />
          <alias key='true' value='High Liability' />
        </aliases>
      </column>
      <column caption='Prosper Rating Group' datatype='string' name='[Calculation_559009360486248449]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF NOT ISNULL([ProsperRating (Alpha)]) THEN [ProsperRating (Alpha)] END' />
      </column>
      <column caption='Prosper rating vs. borrower state' datatype='string' name='[Calculation_559009360490381316]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF ([Number of Records])== ({FIXED [ProsperRating (Alpha)] :MAX([Number of Records])}) THEN [BorrowerState] ELSE NULL END' />
      </column>
      <column caption='Estimated Return Amount' datatype='real' name='[Calculation_559009360502009862]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[EstimatedReturn] * [LoanOriginalAmount]' />
      </column>
      <column caption='Closed Date' datatype='datetime' name='[ClosedDate]' role='dimension' type='ordinal' />
      <column caption='Credit Grade' datatype='string' name='[CreditGrade]' role='dimension' type='nominal' />
      <column caption='Credit Score Range Lower' datatype='integer' name='[CreditScoreRangeLower]' role='measure' type='quantitative' />
      <column caption='Credit Score Range Upper' datatype='integer' name='[CreditScoreRangeUpper]' role='measure' type='quantitative' />
      <column caption='Current Credit Lines' datatype='integer' name='[CurrentCreditLines]' role='measure' type='quantitative' />
      <column caption='Current Delinquencies' datatype='integer' name='[CurrentDelinquencies]' role='measure' type='quantitative' />
      <column caption='Currently In Group' datatype='boolean' name='[CurrentlyInGroup]' role='dimension' type='nominal' />
      <column caption='Date Credit Pulled' datatype='datetime' name='[DateCreditPulled]' role='dimension' type='ordinal' />
      <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
      <column caption='Employment Status Duration' datatype='integer' name='[EmploymentStatusDuration]' role='measure' type='quantitative' />
      <column caption='Employment Status' datatype='string' name='[EmploymentStatus]' role='dimension' type='nominal' />
      <column caption='Estimated Effective Yield' datatype='real' name='[EstimatedEffectiveYield]' role='measure' type='quantitative' />
      <column caption='Estimated Loss' datatype='real' name='[EstimatedLoss]' role='measure' type='quantitative' />
      <column caption='Estimated Return' datatype='real' name='[EstimatedReturn]' role='measure' type='quantitative' />
      <column caption='First Recorded Credit Line' datatype='datetime' name='[FirstRecordedCreditLine]' role='dimension' type='ordinal' />
      <column caption='Group Key' datatype='string' name='[GroupKey]' role='dimension' type='nominal' />
      <column datatype='string' name='[Income Range (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[IncomeRange]' new-bin='true'>
          <bin default-name='false' value='&quot;$0&quot;'>
            <value>&quot;$0&quot;</value>
            <value>&quot;Not employed&quot;</value>
          </bin>
        </calculation>
      </column>
      <column caption='Income Range' datatype='string' name='[IncomeRange]' role='dimension' type='nominal' />
      <column caption='Income Verifiable' datatype='boolean' name='[IncomeVerifiable]' role='dimension' type='nominal' />
      <column caption='Investment From Friends Amount' datatype='real' name='[InvestmentFromFriendsAmount]' role='measure' type='quantitative' />
      <column caption='Investment From Friends Count' datatype='integer' name='[InvestmentFromFriendsCount]' role='measure' type='quantitative' />
      <column caption='Is Borrower Homeowner' datatype='boolean' name='[IsBorrowerHomeowner]' role='dimension' type='nominal' />
      <column caption='LP CollectionFees' datatype='real' name='[LP_CollectionFees]' role='measure' type='quantitative' />
      <column caption='LP CustomerPayments' datatype='real' name='[LP_CustomerPayments]' role='measure' type='quantitative' />
      <column caption='LP CustomerPrincipalPayments' datatype='real' name='[LP_CustomerPrincipalPayments]' role='measure' type='quantitative' />
      <column caption='LP GrossPrincipalLoss' datatype='real' name='[LP_GrossPrincipalLoss]' role='measure' type='quantitative' />
      <column caption='LP InterestandFees' datatype='real' name='[LP_InterestandFees]' role='measure' type='quantitative' />
      <column caption='LP NetPrincipalLoss' datatype='real' name='[LP_NetPrincipalLoss]' role='measure' type='quantitative' />
      <column caption='LP NonPrincipalRecoverypayments' datatype='real' name='[LP_NonPrincipalRecoverypayments]' role='measure' type='quantitative' />
      <column caption='LP ServiceFees' datatype='real' name='[LP_ServiceFees]' role='measure' type='quantitative' />
      <column caption='Lender Yield' datatype='real' name='[LenderYield]' role='measure' type='quantitative' />
      <column caption='Listing Creation Date' datatype='datetime' name='[ListingCreationDate]' role='dimension' type='ordinal' />
      <column caption='Listing Key' datatype='string' name='[ListingKey]' role='dimension' type='nominal' />
      <column caption='Listing Number' datatype='integer' name='[ListingNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Current Days Delinquent' datatype='integer' name='[LoanCurrentDaysDelinquent]' role='measure' type='quantitative' />
      <column caption='Loan First Defaulted Cycle Number' datatype='integer' name='[LoanFirstDefaultedCycleNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Key' datatype='string' name='[LoanKey]' role='dimension' type='nominal' />
      <column caption='Loan Months Since Origination' datatype='integer' name='[LoanMonthsSinceOrigination]' role='measure' type='quantitative' />
      <column caption='Loan Number' datatype='integer' name='[LoanNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
      <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
        <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
      </column>
      <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
      <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
      <column caption='Loan Status' datatype='string' name='[LoanStatus]' role='dimension' type='nominal' />
      <column caption='Member Key' datatype='string' name='[MemberKey]' role='dimension' type='nominal' />
      <column caption='Monthly Loan Payment' datatype='real' name='[MonthlyLoanPayment]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='On Time Prosper Payments' datatype='integer' name='[OnTimeProsperPayments]' role='measure' type='quantitative' />
      <column caption='Open Credit Lines' datatype='integer' name='[OpenCreditLines]' role='measure' type='quantitative' />
      <column caption='Open Revolving Accounts' datatype='integer' name='[OpenRevolvingAccounts]' role='measure' type='quantitative' />
      <column caption='Open Revolving Monthly Payment' datatype='real' name='[OpenRevolvingMonthlyPayment]' role='measure' type='quantitative' />
      <column caption='Percent Funded' datatype='real' name='[PercentFunded]' role='measure' type='quantitative' />
      <column caption='Prosper Payments Less Than One Month Late' datatype='integer' name='[ProsperPaymentsLessThanOneMonthLate]' role='measure' type='quantitative' />
      <column caption='Prosper Payments One Month Plus Late' datatype='integer' name='[ProsperPaymentsOneMonthPlusLate]' role='measure' type='quantitative' />
      <column caption='Prosper Principal Borrowed' datatype='real' name='[ProsperPrincipalBorrowed]' role='measure' type='quantitative' />
      <column caption='Prosper Principal Outstanding' datatype='real' name='[ProsperPrincipalOutstanding]' role='measure' type='quantitative' />
      <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
      <column caption='Prosper Score' datatype='real' name='[ProsperScore]' role='measure' type='quantitative' />
      <column caption='Revolving Credit Balance' datatype='real' name='[RevolvingCreditBalance]' role='measure' type='quantitative' />
      <column caption='Scorex Change At Time Of Listing' datatype='integer' name='[ScorexChangeAtTimeOfListing]' role='measure' type='quantitative' />
      <column caption='Stated Monthly Income' datatype='real' name='[StatedMonthlyIncome]' role='measure' type='quantitative' />
      <column caption='Total Inquiries' datatype='real' name='[TotalInquiries]' role='measure' type='quantitative' />
      <column caption='Total Prosper Loans' datatype='integer' name='[TotalProsperLoans]' role='measure' type='quantitative' />
      <column caption='Total Prosper Payments Billed' datatype='integer' name='[TotalProsperPaymentsBilled]' role='measure' type='quantitative' />
      <column caption='Total Trades' datatype='real' name='[TotalTrades]' role='measure' type='quantitative' />
      <column-instance column='[AmountDelinquent]' derivation='Avg' name='[avg:AmountDelinquent:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BankcardUtilization]' derivation='Avg' name='[avg:BankcardUtilization:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:ok]' pivot='key' type='ordinal' />
      <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BorrowerRate]' derivation='Avg' name='[avg:BorrowerRate:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CurrentDelinquencies]' derivation='Avg' name='[avg:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EstimatedLoss]' derivation='Avg' name='[avg:EstimatedLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LP_NetPrincipalLoss]' derivation='Avg' name='[avg:LP_NetPrincipalLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LenderYield]' derivation='Avg' name='[avg:LenderYield:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_559009360486248449]' derivation='None' name='[none:Calculation_559009360486248449:nk]' pivot='key' type='nominal' />
      <column-instance column='[EmploymentStatus]' derivation='None' name='[none:EmploymentStatus:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
      <column-instance column='[AmountDelinquent]' derivation='Sum' name='[sum:AmountDelinquent:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BankcardUtilization]' derivation='Sum' name='[sum:BankcardUtilization:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CurrentDelinquencies]' derivation='Sum' name='[sum:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[DebtToIncomeRatio]' derivation='Sum' name='[sum:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EstimatedLoss]' derivation='Sum' name='[sum:EstimatedLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LP_NetPrincipalLoss]' derivation='Sum' name='[sum:LP_NetPrincipalLoss:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.613518' measure-ordering='alphabetic' measure-percentage='0.386482' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:EmploymentStatus:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Not employed&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Not available&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Self-employed&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Employed&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Retired&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerRate:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:AmountDelinquent:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:LP_NetPrincipalLoss:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:AmountDelinquent:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LP_NetPrincipalLoss:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:CurrentDelinquencies:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:DebtToIncomeRatio:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:EstimatedLoss:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:EstimatedLoss:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BankcardUtilization:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:BankcardUtilization:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:LenderYield:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[avg:BorrowerAPR:ok]' type='shape'>
            <map to='asterisk'>
              <bucket>0.22612440392477753</bucket>
            </map>
            <map to='circle'>
              <bucket>0.090040731571108368</bucket>
            </map>
            <map to='diamond'>
              <bucket>0.28058054574750607</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>0.35606120115358225</bucket>
            </map>
            <map to='plus'>
              <bucket>0.18403002759771778</bucket>
            </map>
            <map to='square'>
              <bucket>0.1389093883581847</bucket>
            </map>
            <map to='times'>
              <bucket>0.19596230943941617</bucket>
            </map>
            <map to='triangle'>
              <bucket>0.33055055436447361</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]&#10;[none:Forecast Indicator:nk]' type='palette'>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerAPR:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:LenderYield:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[none:ProsperRating (Alpha):nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;C&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;B&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;E&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;AA&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;D&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;A&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;HR&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
        <semantic-value key='[State].[Name]' value='%null%' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <sort class='manual' column='[none:Calculation_559009360486248449:nk]' direction='ASC'>
          <dictionary>
            <bucket>%null%</bucket>
            <bucket>&quot;AA&quot;</bucket>
            <bucket>&quot;A&quot;</bucket>
            <bucket>&quot;B&quot;</bucket>
            <bucket>&quot;C&quot;</bucket>
            <bucket>&quot;D&quot;</bucket>
            <bucket>&quot;E&quot;</bucket>
            <bucket>&quot;HR&quot;</bucket>
          </dictionary>
        </sort>
        <sort class='manual' column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </sort>
        <sort class='manual' column='[none:ProsperRating (Alpha):nk]' direction='ASC'>
          <dictionary>
            <bucket>%null%</bucket>
            <bucket>&quot;AA&quot;</bucket>
            <bucket>&quot;A&quot;</bucket>
            <bucket>&quot;B&quot;</bucket>
            <bucket>&quot;C&quot;</bucket>
            <bucket>&quot;D&quot;</bucket>
            <bucket>&quot;E&quot;</bucket>
            <bucket>&quot;HR&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]'>
        <groupfilter function='level-members' level='[none:LoanOriginationQuarter:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' />
      </filter>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]'>
        <groupfilter from='&quot;A&quot;' function='range' level='[none:ProsperRating (Alpha):nk]' to='&quot;HR&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
      </filter>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]'>
        <groupfilter function='level-members' level='[yr:LoanOriginationDate - Split 1:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='Credit Risk 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Current Delinquencies' datatype='integer' name='[CurrentDelinquencies]' role='measure' type='quantitative' />
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[CurrentDelinquencies]' derivation='Avg' name='[avg:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year-Trunc' name='[tyr:LoanOriginationDate - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='Loan Date' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='true' />
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk] + [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk])</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Credit Risk 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Amount Delinquent' datatype='real' name='[AmountDelinquent]' role='measure' type='quantitative' />
            <column caption='Delinquencies' datatype='boolean' name='[Calculation_475129814591930368]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([AmountDelinquent] &gt; 0) AND NOT ISNULL([AmountDelinquent])' />
              <aliases>
                <alias key='false' value='Not Delinquent' />
                <alias key='true' value='Delinquent' />
              </aliases>
            </column>
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column datatype='integer' name='[PublicRecordsLast10Years]' role='measure' type='quantitative' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PublicRecordsLast10Years]' derivation='Avg' name='[avg:PublicRecordsLast10Years:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_475129814591930368]' derivation='None' name='[none:Calculation_475129814591930368:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[pcto:sum:Number of Records:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:PublicRecordsLast10Years:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:Number of Records:qk]</rows>
        <cols>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814591930368:nk] / [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Credit Risk 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Available Bankcard Credit' datatype='real' name='[AvailableBankcardCredit]' role='measure' type='quantitative' />
            <column caption='Bankcard Utilization' datatype='real' name='[BankcardUtilization]' role='measure' type='quantitative' />
            <column caption='Liabilities' datatype='boolean' name='[Calculation_475129814592937985]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7) AND NOT ISNULL([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7)' />
              <aliases>
                <alias key='false' value='Low Liability' />
                <alias key='true' value='High Liability' />
              </aliases>
            </column>
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column caption='Revolving Credit Balance' datatype='real' name='[RevolvingCreditBalance]' role='measure' type='quantitative' />
            <column-instance column='[BankcardUtilization]' derivation='Avg' name='[avg:BankcardUtilization:qk]' pivot='key' type='quantitative' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_475129814592937985]' derivation='None' name='[none:Calculation_475129814592937985:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[pcto:sum:Number of Records:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BankcardUtilization:qk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:Number of Records:qk]</rows>
        <cols>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814592937985:nk] / [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Prosper Rating Group' datatype='string' name='[Calculation_559009360486248449]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF NOT ISNULL([ProsperRating (Alpha)]) THEN [ProsperRating (Alpha)] END' />
            </column>
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_559009360486248449]' derivation='None' name='[none:Calculation_559009360486248449:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360486248449:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Employment Status' datatype='string' name='[EmploymentStatus]' role='dimension' type='nominal' />
            <column datatype='string' name='[Income Range (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[IncomeRange]' new-bin='true'>
                <bin default-name='false' value='&quot;$0&quot;'>
                  <value>&quot;$0&quot;</value>
                  <value>&quot;Not employed&quot;</value>
                </bin>
              </calculation>
            </column>
            <column caption='Income Range' datatype='string' name='[IncomeRange]' role='dimension' type='nominal' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[EmploymentStatus]' derivation='None' name='[none:EmploymentStatus:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='Count' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Income Range (group)]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Prosper rating vs. borrower state' datatype='string' name='[Calculation_559009360490381316]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF ([Number of Records])== ({FIXED [ProsperRating (Alpha)] :MAX([Number of Records])}) THEN [BorrowerState] ELSE NULL END' />
            </column>
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerState]' derivation='None' name='[none:BorrowerState:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_559009360490381316]' derivation='None' name='[none:Calculation_559009360490381316:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]' field-type='quantitative' max='-6982331.2504814174' min='-19222039.715730123' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]' field-type='quantitative' max='9835912.7613419723' min='2028328.9441809277' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' max='1500' min='0' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360490381316:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
              <size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360490381316:nk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:BorrowerState:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Borrower State:&#9;</run>
                <run bold='true'>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:BorrowerState:nk]&gt;</run>
                <run fontcolor='#787878'>&#10;Number of Records:&#9;</run>
                <run bold='true'>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='0.80160218477249146' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerState]' derivation='None' name='[none:BorrowerState:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginalAmount]' derivation='Sum' name='[sum:LoanOriginalAmount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]' field-type='quantitative' max='-6878012.3389321547' min='-21421811.557351697' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]' field-type='quantitative' max='11199899.995422209' min='1914562.9111600635' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' palette='tableau-map-temperatur' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:BorrowerState:nk]' />
              <geometry column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='auto' />
                <format attr='wrap' value='auto' />
              </style-rule>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-mode' value='all' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower APR' datatype='real' name='[BorrowerAPR]' role='measure' type='quantitative' />
            <column caption='Borrower Rate' datatype='real' name='[BorrowerRate]' role='measure' type='quantitative' />
            <column caption='Lender Yield' datatype='real' name='[LenderYield]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[BorrowerRate]' derivation='Avg' name='[avg:BorrowerRate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LenderYield]' derivation='Avg' name='[avg:LenderYield:qk]' pivot='key' type='quantitative' />
            <column-instance column='[BorrowerAPR]' derivation='Avg' forecast-column-base='[avg:BorrowerAPR:qk]' forecast-column-type='forecast-value' name='[fVal:avg:BorrowerAPR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[BorrowerRate]' derivation='Avg' forecast-column-base='[avg:BorrowerRate:qk]' forecast-column-type='forecast-value' name='[fVal:avg:BorrowerRate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LenderYield]' derivation='Avg' forecast-column-base='[avg:LenderYield:qk]' forecast-column-type='forecast-value' name='[fVal:avg:LenderYield:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year-Trunc' name='[tyr:LoanOriginationDate - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerAPR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:LenderYield:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='Loan Date' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='true' />
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]' scope='rows' value='Average Borrower Rate Comparison' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]' scope='rows' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='line-ends' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-labels-mode' value='line-ends' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='line-ends' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk] + [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values])</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</cols>
        <forecast-specification auto-forecast-agg='true' band-confidence-level='95.000000' enabled='true' fill-type='fill-missing' ignore-last='1' model-type='auto-season' range-type='auto' show-prediction-bands='true' />
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='LP InterestandFees' datatype='real' name='[LP_InterestandFees]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LP_InterestandFees]' derivation='Sum' name='[pcto:sum:LP_InterestandFees:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[LP_InterestandFees]' derivation='Sum' name='[sum:LP_InterestandFees:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='496' />
            <format attr='cell-h' value='496' />
            <format attr='cell' value='62' />
            <format attr='cell-q' value='310' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <wedge-size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LP_InterestandFees:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:LP_InterestandFees:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run>&lt;</run>
                <run>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</run>
                <run>&gt;</run>
                <run>Æ&#10;</run>
                <run>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:LP_InterestandFees:qk]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='9' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='1' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Estimated Return Amount' datatype='real' name='[Calculation_559009360502009862]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[EstimatedReturn] * [LoanOriginalAmount]' />
            </column>
            <column caption='Estimated Return' datatype='real' name='[EstimatedReturn]' role='measure' type='quantitative' />
            <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_559009360502009862]' derivation='Sum' name='[sum:Calculation_559009360502009862:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginalAmount]' derivation='Sum' name='[sum:LoanOriginalAmount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Prosper Rating:&#9;</run>
                <run bold='true'>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]&gt;</run>
                <run fontcolor='#787878'>&#10;Estimated Return Amount:&#9;</run>
                <run bold='true'>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Calculation_559009360502009862:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='10' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Calculation_559009360502009862:qk]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='86981' x='0' y='0'>
              <zone h='50000' id='1' name='Customer Quality 1' show-title='false' w='43491' x='0' y='50000' />
              <zone h='50000' id='9' name='Customer Quality 2' show-title='false' w='43490' x='43491' y='50000' />
              <zone h='50000' id='12' name='Customer Quality 3' show-title='false' w='43491' x='0' y='0' />
              <zone h='50000' id='15' name='Customer Quality 4' show-title='false' w='43490' x='43491' y='0' />
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='13019' x='86981' y='0'>
              <zone h='8200' id='6' mode='checkdropdown' name='Customer Quality 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' w='13019' x='86981' y='0' />
              <zone h='7614' id='7' mode='checkdropdown' name='Customer Quality 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' w='13019' x='86981' y='8200' />
              <zone h='7614' id='10' mode='checkdropdown' name='Customer Quality 2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' w='13019' x='86981' y='15814' />
            </zone>
          </zone>
        </zone>
        <zone h='11127' id='16' name='Customer Quality 4' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' type='color' w='11391' x='44264' y='30893' />
        <zone h='11127' id='13' name='Customer Quality 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' type='color' w='11391' x='9520' y='38799' />
        <zone h='11127' id='8' name='Customer Quality 1' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' type='color' w='11391' x='30838' y='54319' />
        <zone h='26061' id='14' name='Customer Quality 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='size' w='11391' x='1546' y='20059' />
        <zone h='33089' id='11' name='Customer Quality 2' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' type='color' w='11391' x='87388' y='49634' />
      </zones>
    </dashboard>
    <dashboard name='Dashboard 2'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='99675' x='0' y='0'>
              <zone h='50000' id='1' name='Loan Provider Profitability 1' show-title='false' w='99675' x='0' y='50000' />
              <zone h='50000' id='9' name='Loan Provider Profitability 3' show-title='false' w='49838' x='0' y='0' />
              <zone h='50000' id='12' name='Loan Provider Profitability 2' show-title='false' w='49837' x='49838' y='0' />
            </zone>
          </zone>
        </zone>
        <zone h='11420' id='8' name='Loan Provider Profitability 1' pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' type='color' w='11391' x='78112' y='75256' />
        <zone h='12884' id='11' leg-item-layout='grid' name='Loan Provider Profitability 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:ok]' type='shape' w='30024' x='21074' y='28697' />
        <zone h='26061' id='10' name='Loan Provider Profitability 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' w='11391' x='82506' y='2343' />
        <zone h='7613' id='7' mode='checkdropdown' name='Loan Provider Profitability 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' w='13019' x='62408' y='73792' />
        <zone h='7613' id='6' mode='checkdropdown' name='Loan Provider Profitability 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' w='13019' x='62408' y='81552' />
      </zones>
    </dashboard>
    <dashboard name='Dashboard 3'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='99722' x='0' y='0'>
              <zone h='50000' id='1' name='Credit Risk 1' show-title='false' w='99722' x='0' y='0' />
              <zone h='50000' id='8' name='Credit Risk 2' show-title='false' w='49862' x='0' y='50000' />
              <zone h='50000' id='10' name='Credit Risk 3' show-title='false' w='49860' x='49862' y='50000' />
            </zone>
          </zone>
        </zone>
        <zone h='6442' id='9' mode='checkdropdown' name='Credit Risk 2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' w='13019' x='65012' y='3075' />
        <zone h='26061' id='7' name='Credit Risk 1' pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' w='11391' x='41660' y='56515' />
        <zone h='5564' id='6' name='Credit Risk 1' pane-specification-id='1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' type='color' w='14158' x='79496' y='3367' />
      </zones>
    </dashboard>
    <dashboard name='Story 1' type='storyboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Propser Loan</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='275' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='7' param='vert' removable='false' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='6533' id='6' type='title' w='100000' x='0' y='0' />
            <zone h='92886' id='1' param='vert' removable='false' type='layout-flow' w='100000' x='0' y='6533'>
              <zone fixed-size='176' h='26706' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='100000' x='0' y='6533' />
              <zone h='66180' id='5' paired-zone-id='4' removable='false' type='flipboard' w='100000' x='0' y='33239'>
                <flipboard active-id='1' nav-type='caption' show-nav-arrows='true'>
                  <story-points>
                    <story-point caption='&lt;Customer Quality 1 &gt; This bar chart shows that HR prosper rating has the highest debt to income ratio, AA prosper rating has the lowest debt to income ratio. Besides, over 18,000 borrowers are rating C (top one). Then prosper rating C is the second large group.' captured-sheet='Customer Quality 1' id='1' />
                    <story-point caption='&lt;Customer Quality 2 &gt; Most of borrowers has the income range between $25,000 and $49,999. In this group, employed borrower has the largest number, full-time employee is the second large. We also can see 593 income range $0 records, and nearly 8K not displayed records.' captured-sheet='Customer Quality 2' id='2'>
                      <capturedDeltas>
                        <worksheet name='Customer Quality 2'>
                          <selection-collection />
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='&lt;Customer Quality 3 &gt; From this map, we see California has the highest loan amount from 2005 to 2014.  Texas, New York, Florida is the second, third and the forth, repesctively.' captured-sheet='Customer Quality 4' id='4' />
                    <story-point caption='&lt; Customer Quality 4 &gt; This time we analyse what is the main prosper rating for each state. The borrowers in Calnifornia most are defined as D prosper rating from 2005 to 2014. ' captured-sheet='Customer Quality 3' id='3' />
                    <story-point caption='&lt;Loan Provider Profitability 1 &gt; We compare borrower APR, borrower rate and lender yield. Borrower APR is higher than rest two from 2005 to 2011, and later lower than borrower rate from 2011 to 2014. We also can see the interest rate trend from this line chart. Interest rate increases very fast from 2005 to 2006. Later affected by subprime mortgage crisis 2007-2009, it grows slower than before. However, as the America  slightly recovered from this crisis, the interest rate intreases to the peak at 2011. After that, it goes down graduately.' captured-sheet='Loan Provider Profitability 1' id='5' />
                    <story-point caption='&lt;Loan Provider Profitability 2 &gt; Major loan provider profitability comes from the interest and fees. Seen from this pie chart, excluded the missing value, C prosper rating yields the most interest and fees. D prosper rating is the second one, AA prosper rating has the least profit generation.' captured-sheet='Loan Provider Profitability 2' id='6'>
                      <capturedDeltas>
                        <worksheet name='Loan Provider Profitability 2'>
                          <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]'>
                            <groupfilter from='&quot;A&quot;' function='range' level='[none:ProsperRating (Alpha):nk]' to='&quot;HR&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
                          </filter>
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='&lt; Loan Provider Profitability 3 &gt; According to this plot,  we can see E prosper rating has the highest estimated return, then it&apos;s D prosper rating and HR prosper rating.  AA prosper rating has the lowest estimated return.' captured-sheet='Loan Provider Profitability 3' id='7' />
                    <story-point caption='&lt;Credit Risk 1 &gt; Year 2007 has the highest average debt to income ratio which is the subprime mortgage crisis early stage. Later the average debt to income ratio cut in half.  In 2009, HR prosper rating has higher chance to default in payment than rest of prosper ratings. However, util 2011, E prosper rating surpass HR prosper rating and become the top one delinquent group.  ' captured-sheet='Credit Risk 1' id='8' />
                    <story-point caption='&lt;Credit Risk 2 &gt; We see in amount delinquencies records, D prosper rating group is easier to default on a debt. But for public records last 10 years, E prosper rating borrowers&apos;s delinquency ratio is the highest. ' captured-sheet='Credit Risk 2' id='9' />
                    <story-point caption='&lt;Credit Risk 3&gt; If we consider borrower&apos;s liability, in high liability group C prosper rating has the largest number. However, the highest bankcard utilization is in D prosper rating group.' captured-sheet='Credit Risk 3' id='10' />
                  </story-points>
                </flipboard>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Customer Quality 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360486248449:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Income Range (group)]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:CreditGrade:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:IncomeRange:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360490381316:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[usr:Calculation_559009360490381316:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Loan Provider Profitability 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]&#10;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Loan Provider Profitability 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Loan Provider Profitability 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814591930368:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814592937985:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Customer Quality 1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Customer Quality 2'>
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Customer Quality 3'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Customer Quality 4'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='15' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Loan Provider Profitability 1'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Loan Provider Profitability 2' />
        <viewpoint name='Loan Provider Profitability 3'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='12' />
    </window>
    <window class='dashboard' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='Credit Risk 1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Credit Risk 2'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Credit Risk 3'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='7' />
    </window>
    <window class='dashboard' name='Story 1'>
      <viewpoints />
      <active id='5' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Credit Risk 1' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Credit Risk 2' width='192'>
      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
      R/v/Azsi5VHQWws0AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Credit Risk 3' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nO3deXCc533Y8e/77rv3ASzu+yKJiyDAmxJFiTopyVJkjS1blqOkbRw3bdy4
      nU6btNOm4x5p446bpJl0knTSaePpOLVjRwoj2RIlHhJJ8QZIgsR931icuwtgr/foHyAhUeIC
      SwBcENznM6MRsXie9/3h3f3tez2/55UMwzAQhBQlb3QAgrCRRAIIKU0kgJDSRAJsAC0aZmY2
      SCy6wMD49K1XDXp7BjAMAzXkZ2J8nMGRMXzDQ4TDYXRDo3todNnlNjZdwTAgFpqj5UYzU7Nz
      q4pvdmKEmy2thKLq0muxSBhV0+keHFnVMh9Upu9973vf2+ggUs2cb5BTjd1sKfDSNzBO141L
      DM9GuHTyffpGRshIdzI4NMq1jkGMBT9H//anhM1pRGb9qAsTfHTxOul2hQ9OnCavuAK7xUQ0
      OERj2yzVW4uY6Gziw6v9XPrgPWKaykIsyulTJzG5vLReOst0yKC34xqN13rxOjV+fvwMXpeV
      S1euYvdmc/n4z5mam+da2yALvl7aeidoPfs+5/uDWPUIWtjP6VMf4cjI4/zpE4xPhSguykPa
      6A27CmIPsIH0WJQZ3wjDPh8fnjyO2eqkvsjGRx9fZmjYD0j0dfWTW5BL5ZZyZkYHOfo3Rxnq
      uM6pjy7RP+4jHFEBg8tnm9j76K7FBRswNNCFbLNxsW2Q4RtNFFfVcfbUhzTfaGVqZoqBgXkk
      fxd/8aO38I91ceLnH9M8NEu604quRvno7AUKS4vw+SY4ffx9nN4Mampr8Y8O09LUxc76Eo79
      +C385nx6mq+yWS8lKhsdQCqSFYXO65+Qm2HHbFKZmPTj9nhw2uH45W727d3NVADMBhhaOm67
      QWNLB263i+qqMibCCqUl2YRuDjM1vUCe18ZoMMIjbsvi8s1Wnn/ldWo8Ua77NEptsxw7e4rc
      wko0m4nBkSGCvmHQbDy2cyv9vjnKcrLZUlKPzazgyS7kzdd3c6Oti/DULN50N8XlJXx09jJb
      i1xIupXcvDwKt6p09zQSDMQ2eIuuniTuA2w8XdeR5cWdsaHrSPKdO2bDMDAMA1mWl/4tSdLS
      a3pkmpOXe3nmsT1x16FpGrLJhKHrYGg0NbWye88OJElCv7XOux3C6LqOJMlIGOgGyPKnraLB
      Cf7u/ZNkFlRw+ODeTXkIdN8TIBwOY7PZ7ucqBGHV7vs5wMLCwv1ehSCsWsqdBPt8vmV/r8XC
      +P0LGHqUsamZpdfHRsYwgMh8kNlAkJGRScbHxgiHwpv2BDCZNDXMrH+BuZlpZqemCUY+vcQ6
      Mjq29O/g7BQLUY352UmCocU2hqEzMjYOwOzMBAsLs4xOBRkfmyQUDq0prpQ7CW5tayMnO5vr
      jeeZjcjkZGXiJIbkzkLXYuSkmxkejuGpSiMyr9Hcf4Gw5CA0NUJrZyd1NdtQZYnxUT/eTDON
      585RVF2L3WzDJqtkllZgN23Go+H7S4sG6ekN4lGnsBfno4TNXL1wBcXmZT4wRHu7h70HHsE3
      1I21YAfpksr8wgJtjdexZ+Qz2N1MhyePreVFZEhhxqcteKRpPjr9IXW19bgyc4nNzVKxdcs9
      nYuk3B7AANBDLOguSrMdjA+P0uWboKvjBhHN+mlDPcrMVIDAfBjf6CB2dy77qosZHh3HPx8G
      YGrWT0FxOTU1lfjGBukbmxIf/mWMDPTQMzCMNh9krL+b7G27scsS6VlFVJUVMh8M3dqbSkQj
      QWZn/YR1g7HRcXJKtlDsURgYm0HVF1sF5sJs2VZDTc02+tpvMDG7cM8n4imXABYjSnPbIIoa
      pG9sju3bK3C787BLEsVFGciKmdHhToangnjSbOgxFafLiyJHuNI+QGFeLh6ng7R0J15PGjle
      Ozc7+qguy0C1pm30n/fAkkxW6nftYteueuxON7klFUx3XWNwbByvx4PN4cBqVXC53HTdvMZC
      VMZulohFDVxuF+rcDENBjeKsNBSznXSnlfT0dOzE6BuZwmvWyCksvve47vdVoOnpaTIyMu7n
      Klbl9p8tSct/Zyy1Y3Hv8fn2i7836GhroWRrLXZzyn2nrIqhhmhsuk5abhFbSwrjtcIwWLrk
      C3G2vx6jtbWbqu3VmFZ4Pz/vvifAyMiIuAwqPLDu+0mwzWZ7IPcAggApeA4gCJ8lEkBIaSIB
      hJQmEkBIaSIBhJQmEkBIaau6DKqpEfoGRqgoL6Pt5jWwpuNWYuhWL06TijsrF4sYEiAkKBwO
      Y7FakYBQJIrDZsUwdOaCQax2B7FImJiq4XR7CM0FUaw2HDbristNxKoSYC4QYHRonPLiLPqG
      Z7HKU0y6nJj0YXSs7E7PxCwvLvp2AYcg3E142sfv//Gf8ev//N9gjF7lT95v5fvffZORlo/4
      2wvjuOwmarfk895P3+X133qTHx+9yUvP7mdnZem6rH9VCZCWkYXbOYShRlEsZpAkCrMy6O4d
      QpFCXGu6zoH9u9B1HV3X0TRtXYIVHj7mtEyeOFhNbGGaUx9fY0dJLtGYimx24+s/jbGtmoaG
      vXS0DlNss1Odo9DT1kHdlqJ1qUBbVQL4hvrxTU4yPJ2FVYqC2UVBYR6q4iAyM4zszESWZWRZ
      xmQyoSgpN+paSNDsxBifnD2PTyuifmcdxy5dY2Kwh8H2UXLKy3EoGp2Np6l5/DlisTlUdOam
      QyiKsi4JsOaxQJ8dLAYsFYfcHrT0oA6GEx4MhqGjaTpIEiaTCcMw6GprpayqBklTMZlMAIt1
      0oaBqqqYTModtclrkbKjQQUBUrAiTHgw/c7Rf8rUwuSK7b71yD/m0bJD67ZekQDCAyEUW2Ah
      Or9iO01XV2xzL8SNMCGliQQQUppIACGliQQQUppIACGliQQQUppIACGliQQQUppIACGliQQQ
      UtqqhkIEZnzc6Bji0f27uH7lHFi9mI0QujUdp6RSuGWbqAgTNoVVJYDd5cUhD6FHJmntmaSy
      Jp3AjJ9QZAJJUrCmZ5OXlYZhGOi6jqqu7/gN4eGT6JBkTVvfz9OqEsBsVhbH+0sm8vJLIBKg
      uq6BzrY2TLLCUG83+dl7kCQJ6dY4b0FYTqLHC7K8vp+nVVeELURDjMxoFGXIBHQv6U4LFVW1
      hGdGMLlylgpibieBIKyH9f48rSoBcorKyCkqW/whL3vp9TwbkJW+DmEJQnKIq0BCShMJIKQ0
      kQBCShMJIKQ0kQBCShMJIKQ0kQBCShMJIKQ0kQBCShMJIKQ0kQBCShMJIKS0dZsb9NNJpm+P
      Al2vJQubg8GVk8dQC3dS5Y7w80vdfPOVpwCDU0ffYhIvj+8u4oPTl9m1/0nGm88zbTj48i89
      h1nZuO/hVSXAzMQIF692cuTZw0wOd3Opa4IcWwzVnIYDleqdu0RFWArK95r42DfNjtx8Av4h
      AAw9St/kAjsO1DPY0YokS7R1dOPr6SYmmYnEntl8CZCelU9+xji6FuZm1zBehwNNjTAzNsSs
      yYS1d4htFYVLj0eKxWLrHbfwAErLTEf3q5gdTmxmiVgshqZqvPDi05w4+i6m/Ewa6hu4crMV
      rAXk2iVC8yGsio1En1Kx3p+nVSVAeGGOWb+fwOwsTqeT/qERXnrhKa41tyHFosxO+5C3Fi89
      IslsNq9bwMIDytD48GIngXmF6/YwIX+QS41X0RZixEI+7AVFHGwo58OzTTTseoIxy0XmY3bS
      052YFTnhQ+aVP08GhkHCRTOrekJMYGaKaX+QtIwsvB4X8wsL2M0mQqpEdGEW2eomzWUHxBNi
      UpmmqeiGCbOy8ofxuz/7NpPzEyu2+81D/4xDFU/Se/0yP7vQx3e//jR/8uf/h6/9xncpTlO4
      cfU8Tc0d7Nx7iKZ3/4rqN/4F+wsU/tt/+B9851/9Jjbrnd/5q9oDeLyZeLyZSz87HY7F/5vB
      ac9ZzSKFh0TfzDTDgdkV23ntDmpz8la9nrIde8jr7MLs8fL4gVLmozoANXU7abnRh83m5qXn
      d3AhqHHu+Ie4imoXn0X2OeIJMcK6avWNc6q3a8V2VVk5a0qAcGiBuWCAUDhCMBhEmlsgaI1y
      4sTblO05SElhGiOXgwTNAWRdIzDWTNdgJQ1VJXcsRySAsCkN9XZTlldCT/8ImpJHaKKP860+
      6iqr6ezvYDzdRk8gk3R7P0eOvML+3QHSvK4vLEckgLApbdtez7bt9QDUVVfc8bsttYv/L8kv
      WHotI8tz1+WIBBA2LS00xMLQXybU1rX1XyNJX7zfIBJA2LR0NUBs5kyCre9+sVOMBRJSmkgA
      IaUtewg0NjZGIBDAZDKxZcuWZMUkCEmzbAJcvnyZcDiMw+EQCSA8lOImgM/nIz09HU3TyMkR
      d3eFh1PccwCz2UxPTw/5+fl0dnYmMyZBSJq4CeD1etm5cyfNzc2UlpYmMyZBSJplzwEmJyep
      ra2lqKjojtcNwyAcDmOz2ZgPBtBlMxbZwJDNKJKByWxBlkVBjPDgWzYBioqKuHbtGpIkUV1d
      vfT6zMQoFxvbef7IIXp7BhibGMVsMaNYHVgMg53792NJ+JkfgrBxlk2A7u5uCgsL6enpuSMB
      MnLyyc8eB0nBIsfIyCnEaswzNDyJZFK4caOdnTuqREVYCtL1Lw45vhvDMO74XKymIkzTtITj
      UmMqSPc4HDorK4vBwcEvHAL5hvrp7ukhPSeNC9c72F5Xx7bKaub1AbTAONFoFFmWRUVYCpLl
      xO6tSpJ0x+diVRVh9/CsMMWsIElfbL9sAsRiMV599VUuXbp0x+s5RWV85WtlAPzqm7dG4hkG
      B3Ztx2B7wkEJwkZbNl2dTidvvfUWVqt15SVJEtx6gJl4KJ6wWSybALePtcQxvPCwWjYBgsEg
      w8PD+P3+ZMUjCEkV9xwgHA4D8NJLLxEIBJIWkCAkU9w9wM2bN/F6vbz99tuUlJTEayYIm1rc
      BEhLS6O1tZXMzEz6+/uTGZMgJE3cQ6CCggK+/OUv47g154+QegzDWPaK3u051TbzVb+4CdDY
      2Mj58+dpaGiguLj4jjvBwsPv5Ifv0tc/zt6nnqe6wMv77xzlyo02njl4iL7pKQ4/+TyfHHuX
      OcPEr7z5+qadDDluAhw8eBCPx8PU1BRerzeZMQkPAC0wydDwCLURMNscvPDyl5gzOZAsOnab
      hbAGhx5t4ExjM6ZNXFgbN3RZlunv76e0tJSLFy8mMybhATCl23j91SMMjo4TmA/RdOEjGg48
      wZatlezfsZXeqxf5Xz/6gENPPrephz0um7tVVVU0NzdTWVmZrHiEB8SLTz7OWEBnX6GF3qEA
      JbWPUFOQjkUx0Ts8y+Ejj/PkU3voHxpOeCDbg2jZsUDZ2dls27ZtU5/kCKvjySrgiUOLM6t9
      thwqI6+YJ/KKAXjiiSc2ILL1tWwCnDt3DrPZTHV1NcXFxcmKSXgA6P4hwid/L6G29pf+AMls
      v88R3R/LJkBdXR0tLS1EIpE7XjcMjaGhUYqKiujvbkW3puMgjGZJx2lScXizNu1VAWGREZ1H
      6z2dWGNdvb/B3EfLngM0NzcD0NV153TXM5M+ursH0CNTjEzJTI/20D44zmBPMzc7ezASLIoQ
      hI1gGMbSPYxl9wC1tbWcOHGCp5566o7XM7Lz8LrHMNQIVo8bW2weh8nC4OAYihSlsfEaB/bt
      FBVhm5iuJv6trqoqyIvv8QNfEWbM80d//EM8Dgtf/7VvLZ8Ara2t5Obm0tPTQ0XFp1NQ+4b6
      GRsfJ6OwgPBYC2Gnm/31pUgWF5HZUWRnmqgI2+Q0RSGaYFtFUZBuvccPekWYoVshMsNY2INN
      UeInQGdnJwMDAxQWFn4h03KKyni+qAyAotzFSbMkoGarCwMxhYrwAFMD2HO2kWnW6ewajJ8A
      FRUV+P1+RkdHKSgoiNfsC5dIxamv8CCTLLn88leeRZOsDHf3xE8Ak8nE+Pg4jz32GDabLZkx
      CsJ9ZVOcROYjlBaWrlwU39nZSW5uLmVlZUkKTxDur86Pb9J7vg1Y4TJodXU1fr+fhYWFpAQm
      CMm2bAKkpaWRl5dHe3t7suIRhKRaNgGmp6cZGBgQJZHCQytuAoyMjNDZ2cnExARDQ0PJjEkQ
      kibuSbDLtfhQ4aKiIg4ePJi0gAQhmeLuAaamppZuV/f29iYzJkFImrh7gPLycsrLy5MZiyAk
      XdwEaG9vp7W1FVhMhoaGhqQFJQjJEvcQqKqqiry8PHw+H9PT08mMSRCSZtk7weFwmKKiomWn
      RjQMnTtHAC3+W1RRCpvBsgmQn59PaWlp3BthhjrPLz44g9Vqw2Y2kGxpONCo3b1HVIQJm0Lc
      BPD7/Rw9epStW7dSWFh490aSTHjOz0JEoyjbxYxvhIBJwdLdT/XWElEQs4k9tAUxn4sxbgKk
      paXxzDPP0NfXF3c0qB4J4souw0qI7Q27uNnSCdEFArPTyHKZKIjZxB7WgpjPx7jsIdDo6Cjb
      t2+nq6uL+vr6LwbjyGZPrY5htuO02Who2IEaDiKbnQkHJggbKW4CjI2NsX//fsbGxjh8+HCc
      VhKZOXlLP9kVwJqxziEKwv0TNwG6urro6OjA7XYTi8XYvXt3MuMShKSImwA5OTnU1dWRnp6e
      zHjusDAXYD4UISMrCyMWYXo2gGKxYFNkwjHwpjmYmprGnZ6B1bzs0Zwg3FXcT01mZubi2f2G
      Mfjg7b/CVbCNQ08+hRb0c+NGMxcar1HuthLGSWFFJtNBHavNyqtfenEDYxU2q7in7D09Pfzp
      n/4pb731FlevXk1mTEu8hZVMtLczHdJxZOZSlmHi8S+9jiPDjRqYwGL3EFOhpVcM1xZWJ24C
      7Nu3j6997WtIkkRWVlYyYwIWp1+MhAJMhvwMtHcyPK9xvnOUR6sLySsuJWDPpqSwAkvEz+6K
      qqTHJzwclj1wbm9v54UXXuDYsWMUFRUlKyYAJEnh2Rdf4dkXX6GrrYMCp4lvfu2bAOw7cJh9
      Bw4jSRKlpb+S8LVnQfi8ZRNg//79HDt2jL179yYrnjvcnnNoW03VXV+HxG+8CMLdLJsAOTk5
      lJeXY7FYkhXPHaLNPyVy6vdXbCdnVOD85Z8kISLhYRM3AXw+HwMDA/T09DA8PMwLL7yQzLgW
      6Rqo4ZXbqZGV2wjCXcQ9fnA6nYyNjeHxeMRNMOGhFTcBent7iUQiZGVlJTzCTxA2m7iHQDU1
      NRQUFJCWlobpHkbdCcJmsuzkuBkZKw9sMwwDg8/WhImKMGHzWNsAGkPj/JmPcHrziS1Mo1vS
      cUgq2+rqRUWYsCmsKQG00AQ9QwFKzG6kSITgZD+SbMLqyaaiNG/NFWG6nljFj4Ehqs7WWcpX
      hCVCNjsoyi/EJsWo3LOftpstSLrB9MQoW8sL1lwRZsiJnXtISKLqbJ2JirAESGYP1VuzmdMs
      uCwmaurqiQQmkR3etSxWEJJmzYPoc4vKyL31b48FcCZ3zJAgrIUYSCOkNJEAQkp76BJAjYY4
      /t47tHQPAzA/Ocw77x5H1XU+Of4LegYmGOi4wS8+OEkomvhVBOHh9NAlgCQr1O/cw+UzxwGD
      D987xWO7ivnLf/9fUPNquXb6FJ7cErKNADdEJVnKS1ICGBhxLvQahnHHf2tlMil0Nl/Db3YA
      ULNzC6cvN+EoLcHXfpmBoT6MWIjm3n5U2brm9QmbW1KmUhjsaOH0pSbyyqp5+rE9fPDWTzhz
      pYkjr3yZlpZeDj3+NIM3P2FgeJKvf/vbeJTV30VemJukb2IWp8XJyZOXKC/zMDU+z8GXXub6
      2Y8o2XmIro5WFLsHs7T2hBM2t6QkQH5ZBQtHf0qsch8g8dyrr+GL6ERGm3Fa3UyNjVJaXMy5
      5g7MaxxB4XBn88Ybr4OhMzMzizcjg7//6zVIkkTla68Bi6OV9j56+AtPuRdST1ISYHJykv3P
      vcTVgUFGxzOZ6W+kav/T6GNN5CsZjI/1kJ5WTc22Asb8KuUZa7urOxMKEdVUsJgZnwvGbeey
      WnFZbh8GGRgGyybF7UM0kTgPj6QkgN1qQzLZeflABh1DIWqqD+B2e5DKnqa1rYPdz3yJiaF+
      du57mrI1fvgBftLcRO/Myg/1OLKtime2VALQ13Kds1eusXXHfg7srCY8O8af/++f8PwT+2hs
      bkTKqkEbG0T3mPnGa29gkUUSPAySkgBpmdnsyMwG4JGcz/xCslBbW7fYpqo6GaHElV9WQfCd
      t4nuehxD1/mbtz+kvnQLlbsfYdQ3wrZdBVzp3kqxo4/RWZXSdUhUYeMlJQH0cBjf7/3nhNpm
      fuc3Meflrdxwnc2Fwrz41df4uK2PusI0rBYrl65epO7ZxxmeM3gyK5/jxz5B9kxSXnso6fEJ
      90dyJtTUdKKdXQk1NSKJjkFcX7GFOXpHZni6Lp/W7iBf/eZrzM08i8Oic+T5V5AUC48/UkrU
      vB2v9aG7fZKy1pwAhmGgahqSYYAkI0mLw00324liXnE5ecWLj4UtLF18zeVdHNWac+v5IBWV
      tXd2MgzOnzrGRNTGS0eeQDI0Trz3d5RUP4KNAGcb+3j15cd5/+fvsufwEYoy05L15wgJWnMC
      DHbdoLFvllybimp2YTM0Gvbv33QVYcFIkD87898Tavvtg98h3b6YHDv2H+LEj3/IRPQJbINn
      MW15lI4LZxkPjbLvwItcvXCZHY8+wyfnTvL1l1+9n3+CsAprqwiLBGjvnybTYcFuNTE27mPe
      pNDS0kX99q1LFWGqmni1lqqpSLHb1UWrqwhL9I6yrulL/UKRBZqGLyfUbz48j1NxAeDr72Fc
      Ar8/hDw3hy0vjTl0VDXCbPNJrlvz+YrZimJSNlXVmqgIS4hCSVEe7d297HvqICF60ecmCYUW
      kGV5qSJMURK/YqKYlKWKn9VWhCV6+CWb5KV+SizxTaEoizEaeoy2nl4Uk4veSxdxHjpE289+
      SHFZA5V5dlr6J3jlQA3vHP1/bN/72KaqWhMVYYkEY3VQVV3FtsptSBIc2F2PoauQ4Ad3s5Nk
      My+89EsAhOaD2F0e/t4/+IcgSUgYHL51Y+3Xy8q581nKwoNiXa4C3c4oSQLkzfMttx706AR6
      eAQzoPrjt5NMDhRXZdLiEhIjniu0RtHp04QG/2LFdiZnJWnbEzvJFpJHXNAWUppIACGliQQQ
      UppIACGliQQQUppIACGlicugGyQSDqNYrJhkCM3PE47GsFosRKJRTGYzJgmi0RgOtwersnhj
      0TAMQuEoDrsVw9AJ+v3oSLhcToLBOTxpHoKBIMgmPG4X8iYbkLgRRAJsgNh8kP/5h9/n4K/9
      LnsKLAx2tnLtyilC6TvJcapcuX6DX3r+ST7+xQfs/cq3eKRycfLJ8c4WfvCTE/zg3/4Wuqpy
      7fIFfnH8FLv31GJRbJicOViIcuZME7/zu7+NQ7y7KxKbaAOYnW6OPLcHv7b4aJFtDXu51NrB
      L3/1OQavn8JR/A3qa4vovNbDnq2fltDlVW6noboZAJPZwoHHHmE4qJLNDBfaOmg40sBj+Qoh
      3YvjMzNr6LqOJElIkrQ4fF1VMSkKuqYiywqgo+sGJpNp0w1jXyuRABsgNDfL8eNnCFd4cewo
      oiJPwpZVgQk42zbMN147zEDLJXJ2HMD8mdrjnpZmLnzyCdVbd+HxuBlu/ZhDz77G1Xf+L+Xl
      paiz43zQM8kzL7+y1CcanOUPf/ADXv7Ov2N7joWPT7zH4GSEgw1lHD11mVxnFjFthOh8mBfe
      /EcUpTk2YItsHJEAG8DmTOM3fvv7GHqU7u4x7BnlfOXZCgDeeO0NZFmiuHYfxZ/rV1a9nT/6
      r3/AwvQQAT2NJ1/8OrIsU/iNX0XTdEwm0+LMFp9JGrMrjeef242mLY43nhi+iV3Joefixxx5
      858w/v47+IwcnGoPjQMBinaIBLgHBgO9XagmJx6LgW52Yzdp2NzpmDdZQUwySZKESVEAhaqa
      ijt+9+nAwi9uv9tDzD05ZXjuWJ6MonxmQOJnhOb8XLhwBUugBNtcFu6cMuaiEmGTiQ/++kfk
      mOzU15Vx6fQYL5R6SDVrSwBdRTa7Ge5qZtDsxCJrgIU9+/YCqTEkerXO/MX7+EdXnrql9rnd
      lD9StfhDIAhHjyW2gq++BHYbVoeL17/1L5FQGRic5bnnXsUfDOLxpLMw58dqc6HFwhRvq8Ht
      Sq1vf1hrAsgKo/3t5JbWoERn6ewZwSRHaGpqZt+e+k1VEabeYwVULLa2Cig1HEMNr7xdYtHY
      Uj8ppqJEE9uWsVgMbl0+dTqdAFRXp6HpBi6nC11TsdmdgIFisaLAHe+TqAhLgB6bY3gyiOyc
      pa6yhHnDTnR2FJPNkRIVYQDqKiugEq2PMX0mRpTEYzQrCtzqN/4f/xPq6NiKfdLf+AbOxxen
      fBEVYQmQzW5e/fLLiz8YBjuq3BhULN9JSDpt1o82vfLhlh4JJyGaB8v6XQW6lcLi1FfYTMRY
      ICGliQQQUppIACGliQQQUppIACGliQQQUppIACGliQQQUppIACGlrfFOsE7TxQvodg8uWUW3
      pOOQVfLLKjbd8wGE1LS25wPMj6PairBp4wz4AkjGOJJkxpaeRa54GoqwCazpEEiSFTQ1iqqq
      NNTvwGZ14LDa6evqXK/4BOG+WttoUHsWbmkAw51NhsdOeVUt4ZkRTM6clTsLwgNgjecAEtt3
      7Vn6qTAHyMkAFgsebs9AEJYiqN70hJYY0VT08OKw3BhmovbcFfvI1kxM4U+H8tokCVcCtQSy
      phO+va5ojHRLRkIxqtHYUr+oaiZK5op9FN2z1AdAtikoLsuK/TTp0xiJRcGSYG1FNAq3aoNV
      tzuh7R+VTUvr0mN6QtseIByJIhmL/Uy6ntC2t8Id28NjTkO1rFzgImnyUj81aiS07QEi4QhI
      iwc8hsLStpeMRMun7tHtBJiYmMDlcsVtE694Jd7vluuj63rcgoz17nd7sz3IMS7nfmyPe30v
      V7uulfrFc7c+921WiNvz0JjN5qWSvETpuo5hLM5Tcy9UVUW5h6qptfS7XVZ3r6dfe8MAAAKm
      SURBVG9CMmNcrdWsS9O0VT0eN5nb424xbsh9gHA4fOsb1CAcCvP5XdDtUsq7iYTD6HF2Wnff
      IAbRSJi5uXk0/V76gRqLEgzO3bXG+HbJ5936rGZdizHOEVPvfhjw+X6qqmKweIgZjYSZn19I
      qBY6Fo0SU3XibfvlYlSX+n5RvEm1FrdH4n/XbbqmEQwEUbW7r+9u/XRdY36Zdd0txg1IAIMT
      R/+a/qkFosEJfvb2e4RiiRY3G5x452f0Tczd0xqbzp+js+0qV272Jh6loXPm9Cl6+wdR7+Eo
      sbXpGp3dnZy9fDXh4nyAsx+fpK+/n/lQYkXvrdduohkGN67f4Mq5c3S2NtLaPbFCL4PGC6e5
      1tqNoWsce/vHDM9GEozQoOniWa7evLcrfL3Xm2jt6uLj81fuoZfB1Svn6O7rI7iQaHzgnxjm
      woXrnPz4k4Tfs6QnQDQwiuHKp725he6OHnK8dvrHZhLrGxxDd+TQebP1rt9c8WhqjCnfFFa7
      7R56qaS5c6mvq8F8L4c5kpW6hp3YYhHi7ATuytBVgsEAhpTYumKROS5cuMD41CyapjIyMozb
      bV+2jx4LMxuIMjI0yMLMMJaMIlqv30xoW+pqlGl/iJHhoXva9oau45+Z4d4+agZgZ2f9Drwr
      /E13kinfWkW5x8Js5AFNgNa2QXbt3YnTFGFiLsbOPQ1MDfYl1Le9fYiG3TtxKVFicXaNdyPJ
      Es50L3po/h4iNTPjH+HcxaZ7Wpehhbh4/hNiVuc9zc4syTIm2YSmJTYdiWJxceCRR8jNSMOT
      kU1tZQ0TE75l+8xMjJBdvI3iNDNnrg6yc3cDFhI7dApMjpBZuI3SdAsTc4lPcyPJYLHZUUh8
      G4KMJIU4c+4Ck/6FhHsZ6LTcaKI3GMNrTeyj/f8BLl3a5lnnQ+sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nOy9d3gd533n+5ly5vRzcICD3nshGjspVpGUKMvqtmXHThx7N4mTvbnZ5OaW
      ZHN399lsnuzm7mZz4+wmezfexCVKbBXL6iQlkRLFXkESIEiAAIney+ll2v0D7IQKJREkhfnw
      4YMHZwbvvDNnvm/9FcE0TRMLi0WKeLcrYGFxN7EEYLGosQRgsaixBGCxqLEEYLGosQRgsaix
      BGCxqLEEYLGosQRgsaixBGCxqLEEYLGosQRgsaixBGCxqLEEYLGosQRgsaixBGCxqLEEYLGo
      sQRgsaixBGCxqLEEYLGosQRgsaixBGCxqLEEYLGosQRgsaixBGCxqLEEYLGosQRwjxOPx/mi
      Rq80TZNIJHJX62AJwGJRI9/tClh8POFk6DOXYdcEFEFHcLgRZPvnUKsvBpYA7iSmydzgRUAQ
      Pn0xv/vyb5LSkp+pKs+cUdisDOP/zr/FVv3QZyrri4Q1BLqDmHqaZCxMJGXcesw00HUdwzD4
      Yo7w7w+sHuBOYBqo6QTTA+fo6r1IKLCcNdXZ+H1ubKKAlooxMznBVCiGoHjIzsvF73YgfYZe
      wuLTYQngc8dES0XpO3OQ3QeOMTARwbD3EZlYw4aNayh0qgx2Hubd/SeYjOgYcahYu5UH17eQ
      7bVhaWBhsQTwuWMSHhvkxL6TZD/wKKuEcYa1YmqCMjKQnu7l+NmLeOu28JUNyzD63+P5t87S
      W5JPoKEQm6WABcUSwJ1AFFEUBYeRwhAlAgVlVJW5AJi6NIrkDlJSVUOGAlQtp8x1kVg8TNIo
      xCbd3aovNiwBfO6IeAJByqpz+GDfPi547GTVZFHoqqAgx49pyrhdLlwu5fL5Cl5FIpTWUDUD
      JGtdYiGxnvYdQPEEWbLxKb68pRWvFqb7+F72fHCYnrEoJmBe/ncVUyWlquhf0B3fexmrB7hD
      2BweSmsaUEWBrJBE9FIvJ9oG2FIEyVSaVFIF7GCkSRgyGV4XDmv8s+BYPcDnjkEiMkPPmQ5G
      Qgk0U8SdEcDrdWGmNZwZXpKxWQYHh0loEB3vZjCqIct2awJ8F7B6gDuAlozS33GcYU0gFZ8h
      JnrJDgSpaSjAky1RlXuJtvP7eWOyB32sByOrluK8bOxWc7TgWAL43BFx+YPUr1gKnZ30JUUc
      gTKaVzRSVZyFKEJ980pM6Sx9Y2Gk7DpalraSH/RYewB3AUsAdwBJcZJX1URWbjZFfRcJBZbS
      UOi4etyZWcTStXk0ahqCLCPLsjUWvUtYAriDSHYfOYWVZNpttxwTZRm7bD3+u41gflG9Lb4g
      xONxjo0cxjD0z1RO6YxIvhRHqVqK6C/8nGr32TBNk2g0itfrvWt1sARwjxOPx3E6nQifxZ76
      HuVeEIA19LRY1FgCsFjUWAKwWNRYc4B7nHg8zu4f/b/oqvqR5+W7MlmVUwvAUNTgwuyNk+bi
      mg6y8gfvWD2voB51oHUpH38igGDirutCvIsGgPftOpyupjAlG5IofuE3kKaG+tDSqY88x+2J
      gZgNQCqkMzt5owCCwX50X88dq+MV0iNOtF7Hx58IcwIIdnKrw+jCcd8OgYYO7+H82CTJeZ6e
      aZpoae1jy9A1lUQiTkr9+HPnx8Q0NSKhELHkzWWYaGqSSDhKMn3rEqaWShENxUh/gnpa3Dnu
      ux4gMdnFjl+8ztGOSyTEd6hc/TjffHQNAY8dAUhNXeDN537AyegG/s9/9WU885Shp8L0nNjL
      m2/tZShhguCjef1WHn5oNbnOaxaZw8d/wYtvn6X1yW+xqrYUx03NRXLoOP/pL58nbBiIDg81
      G57lO9sbENJRLpx4n+d+/h5xExzBCjY89BhblxUjEef8wZ3sfPsAA2FAKeKRZ5/kgeYynPdt
      c3T/cn8JQB3nrV+8i1a6ki9l5hLNKUSYtaOZc5EVBvf+gO+/coHGVeWkJ5MfEm1BZ7ynm1Mn
      Bmn6+m/z3bIsUiPtvL3nAieO5PDQpipkQJ9u54395+m5lKJOA+OWwsb5yV88R9nXfodnGoPE
      xrv4+d++wI7y32a5fJH3dp/lgW//LutL7fQcPcDhA3s4mfdVSmcPsb9jgrKHf4Nfbcpj5Mir
      vH7wKEG/j+byzC/8cO5e4/4SgBEnls6nKaeMgD3CTHEdVatycF+2I86qf5Q/WBPEo57nz9vO
      fkghInl1S3mmpgVECVEAIzeI2z1IOpnCAEwzxv5X9uGtXM4m2yAem3CrmOIjdCcb+dcry3AL
      4Cyo4aHtJfzTm8eofshFytHAxoYCnALUt9QyOnWMCyfOI9uTFORV0LK0Cp8dvOu3Udz1CqOT
      Y1SWZOKxXAIWlPur07VnUe4d5sU3XuClw+eZiSUxroaeAld2AVmKgqQbXNO2iWle/x8EUUSS
      ZUTBJB0e5J233uV8zKSsuRzFNBg/+TZtZg719U1k2gQMY56JhmDDLk4wmtTQDQNTlHCW1OFM
      RdAEA9OcZiqtoxsGgicTV2YusppCFDSmpkOMTccxdAND8FLs9OCSxbs6GVys3F89AF7Wf/O7
      5J18j5+9upeX//ufc2bj1/il7asJepR5zQXmJsRxZqYj6KKE3ekl4HNg6jozAx28s2sHvUYJ
      X370YZrznWjT3bx1ZJqKllVUlPg5ahoIGJimgWkK167hrOHx5VP8zR/9NdueasEY6+Ho0U6k
      gkfIziqkzLaDH/7Fj1m+soCZi52c7orTvOFxKlpq6Bl8g50vPsdAdSnx4TZOdYyzrq4Vq/Ff
      eO4zAQCSk6oVD7K534av2sX+X7zOzqJCnl5efnUodD2mlmTozC7+5oXDIGVQ1bSNbz/byvT5
      w+x6fSfp4g386uMPUuCxgZng1DuHGRhXyUjEuNR5koHZCeg8j9vlp74wgP3qNWRWfvtP8Fe/
      x8neIRxZ5Wxcr7G/E9y5FWz71d8l/+gReqfiZJVUsUSYxFRNbNl1PPKUn5JTbXQPhwnWrKZu
      uh27IFg9wF3gvhKAqSWJxFRku45qimRkVrKhwsHP+idJN5fgtl0Z0V0bsYs2F2UrnuHPVjxz
      9VhstIuTh06glj3CV595gAxprqdAT2ErLqAq0cf0pTNM9moMT05iaKcQfYWU53gRDRBtNkRB
      wDRkqtdup2atiRqb4NTudjJby3CaAqYnyPKtj7PC1AkPnGJvLIJYloPdNDF8uSzd+AjLBZPk
      9Fl+2O7HZnei3F8D0i8E95UA9HAPO9/qxJ2bwczkBFKfSN+gg5WPFOFQRCITw4RTBlpsnLQ+
      y8jgEFHZSVZO5nUvl0FofIbpGY3clmwiI/2EDBNBdODPCNC0divNa6+cm2bv3/8U2/qNtFSW
      4TRmOXnoLHlLl5PnshMZ6WFUd+GWdEKDbbx71uDL3ytHTyeZHhsijAO7HuL86XbGkn4eqsnF
      VKOMT84QTQk4bCrnPziAllFBUX4OdmsJaMG5rwQg+8pY1TTN/gPHOdc7SvdYH02bHuXB2hyc
      ssbBd55nb18CwwR7AF76yXN4M2r5yq89Sf51ravi9eBUUrTveon2Kx86S1i/eSNrW4tveCiB
      ohywOxCA6KUD/GJPB8/WN5PrshO6eIiX9vajyyZ2WwYrH/9lmgISqVCES23v8Hb7JKYIgbxa
      1m95kFKPiB6Z4eyJ9znYNoSJiZJbyyPbWynNdi3cg7S4yn1qCxRn3y8OUrS6haL84AKp2ODU
      8/+Vk9kP8+y6alyKhGma6Kk48ZSB3eXlescv09BJJxOouoTd6cR2fSUNnXQqQUoXsTscKPKH
      j33i8Tgv/OnvfawpRKknh21FywDoDemcuckUoqrlCPlld94UIvmuE+3UJzeFCKw6c2cr9DHc
      Vz3ANUQyC3NxO+wLuI6r4ax+iCfqy3Eoc+s1giAgO9z45vm+BVHC7vIwbyoKUUJxeviEJmMW
      d5D7VAAOGlY2LvA1FWqW1i/wNecoqW9F1z7aGjTbmQFZc66O7rhJfs6NPYCvMIUtkHvH6niV
      GgVdudUHel4EoCwTWbp7r+F9OgRaPFgukXcWa+HNYlFjCcBiUWMJwGJRY80B7nHi8Thdh3Zj
      6PeO40zA7qHcm3fDZ5MJg8mkSWbuMN6M6U9Ujgmk02nsyt1bD/sM028DTTcRBBFJ/OJN0O4l
      Tu1+7WP3ARaSMm8u5YVLb/hsYlqja8agsvkocvmF2yov8XlW7jb59EMgLURP7yBjE7F5Dhqo
      qRRpVeNTdzDGXBnxlIp2s5WYoZNMJEik9XkcVSAZixNPpj/ddS+jp9Mk4il0/aNM1ExMUycZ
      j5NSbz7PRNdUkonkXOaXm8tXVZLxFJr22SK+WXw2PkUPYBAZ76ftxCEOnhnF6c2mefVqWuvK
      8DtFwiMX2H/4FOMzUUxBxJHbwiPbmvDLImNn3uWd06NXS3L6AizduJ2KjBurYabDXGg/xfH2
      C8RMgYKqVpY3N5DjVTAS4xz54DBdoxNopkzVii2sqinAYROBOGd2vsLRwTimpJBdt45H11R8
      xE2qDHef5WTbMAVLWmluyEciSf+Zo5xs72EqbiI78lmzZQ3leRm3xO9Xp3t55Y39hNMqot1D
      SeM6NrcWIWhJRi928P6BM8R1A3tGIY2ty2mqCCKSYrjrFCdPdjIWNZDsOSxbt5La0hzLGO4u
      cNuPPDXTz/GjbfRNpHD7A/hdApFIlHhSBXWCg7tPEjY9VNTUUldXSqpzF7s7JjEMg/H2g4zI
      uVSWl1NaWkpRQT7uW8wAVIa7Ojlx4gJisIy60gDD54/T1tVDTE/SuXcfHUMJckuqqcm3cXjP
      TrqnI2gmjLe9xmsnI1Q2NFBbGaT/vTfYfyn6ofcSG++j/fg+9p3qYWB0Fh2Y6T3J/rZuUp58
      6pbU4ld72L3vDJOhxE1eYSF2/+xlRpUcGhrqKc+1c+6dtzg+HGF24hIHdh8inVFEQ10lXnWS
      UweP0DudIjTQyZET7czI2dQuqSVLGObgoVMMTESshNl3gdvuAZLTg4yEk2TXtpKfNgj6AxQW
      ZeJxKyB6qFmxCndONll+N5KoI7e/zp7xCKbpY6AvxYrvbGRNrg3DNAEBQbhRAEZihksXR0jb
      y9m+eR1BWwp38hXOjgwyFNQ5cT5GyfJVPLCqCqceItH/3znVO0FFQObU7jOUbP4e61YXIWgR
      fLOXeGPPWdZ+d9UtZgdmeobuzi6GEx7qGrKwGwYmaQbPDWIPlLBs/XpKMuzEy5z88LkjDExV
      k+W7zmQ5NcKBDpFf+ZPNVPntqLFx7DMvcOC9DrKW6oyEMnn6WxspdIvMFpzmvQ86ONvRT405
      gilnsWLTZmqCThKVfp5/8TADIxUUZHstx/gF5rYft8OfiUKIs20HuTAyhej0Egz45uxjJDfl
      teXkBDxIosDY2ffY2+ektSoLwZilezRKd3sbp0+d5uLQFLokIt5UAyMVJS1LeItLCbpsiDYP
      ZeUFGKrB9MAQ6aw88vKycdkkREcmzY1FDA7MoibGOD2iUF+bi4SAKLkobl2CMDzKrUYEKmMX
      uunumqJ46UpKg07QdcBES6TRDQlRkhER8OTWUGk3UXWNG0brukoaAZfXAYKA7PRT2tpAanCE
      pKGhyxIOlwKCjC+/kGBukNTUNMmkiqaJiLINEQF3sJxylw3BUNGsLmDBue0eQMkoZ91aHdfR
      QxzrPMDLXb1MbN/GyuYyvFeaRz3CyV0vsPvYCOXbnmVVkQ8BlarWRmZmh7gwEWag5228Zct5
      6pe2kHVDLUxEu4TsvGbo5vJ5sckRDC2G5PIh2eSr0RN8WVmYPSamGiMtFZHvnDsiCCDZ3CjG
      FIahkkikMQQBSVYQYsOcv9BNMqeelTU5nJoYQ0BAwEZJfTFt7x/n3bdTNJYGCQ2dpm1oiAdM
      88aIDfZS1lYM8pO/epEtW2vQp/ppO9GOKrfi92US1N/lpee8LG3KJjzQxfEzU5Q0rqewsoBz
      /fvYs+NNpquKSIyd5XjPBZqWrLAiQtwFblsAguwkt7iODV4HhquHeGiEjoPvY3fZWF5fjEOb
      5O1/eJH9kzJbHv8aLXUV+GwimAE2Pvk0qgmmrjJd38fJ9/ewr7OVJ5syr13A5HIMkmvNYToZ
      J5VOYZqAadxwLBELoRlZINgQtTFm0ib59itF6aS0JEPt7/Dz105gyj7Kq5bRWDLDgd5JGh5Y
      wczoEJOT4yREk4mZOMGKZWwRHJw528O5s7MEcrLwyiNgcuMYXfKy+Zu/gWtfG+faTmF3+wlm
      ORkbEvDmVrL5iSdoa+vm/NkwLruA121DS4OnpIENmyXOdHTR3dmFP8uL1+5BMExrDnAX+FT7
      AIJkw+N14QsUUFJWR+DQ+6jRCKqepvv1l9kfzeLxp9azpDwXuyQiCIBgw5eZdbkEE49iMNQW
      5eRgCK4TgKgoGMkU4dgYSQpxADNDkyiiA19uFqnOASKRKBp+ZGDk/AA5ua1IrlxKbFMMhzUa
      vDZMwyA50kPcl01B5TJ+5duNgIQi6kz2jaOoKkMn3mfMTDE2OkVSv4QS9LNudQtF1S1kFVST
      0kxswjDdJ0dQZBnphiZawJtbzbrtecRTKhgqQycH6VHycCtO3JUtbMqrJKWZ6KGLHOEcqZwA
      dpuL/LIlZOSUk1QNZGGMFy5OI8k2ZKsLWHBuWwChi6c43j2GOy9AJK6jCCEuxeIUCRKiOsqh
      njhrt22lviSIjIGuGkg2idTgfp4/7uSpR5fjlTUik4N0DNioeSATtBTh6Smm03aKC4LkuBz0
      dHRydrCaZv8Ux3pHMfNayCuvp2JvGx3neikpDhJUO9nZlaL5G5nY7X6WrQzwdy/uY92/3Iac
      GmX3y+2UfOm38boz8bnnRGYaOhmZ2/hndZvmWlxjliMHOkkZATasrseraCTTJjaXD48tTdsv
      9hPPKScvw4cNlcHuftzFpWTYZZLhWXR3JplujZm+I7xzdILV365B0DSSiQSSJ0BAn+VM+0UG
      QybrN+Yj6mniqo7k8JLl0zi76wSzjkyysy2XyLvBbQvAlZWNp6uTPS+/z8hMAtGZw/LNW2mt
      LUWaPc1MYoLOf/gb9sjXgnwUbPouv7U2D0ffj/mTf/MCIiDaHJStfJxNlV4S070ce/MV+h2b
      +dY3llG9tInhiV288Jd/wvOiTk79WrY3NpLl8LLu8fX80ws7+Ms/eR1QKdvwLEsLMlEEkcov
      fZuV3/9L/vgPd4Mo4qzcyu8sz7lhbC1cDo1id17+QDNwO5wIgg+3x4Uw3cnrr+3iZOckoEOg
      iqe/2kJhpgtj+ig//ukuvvRb/5Jmu5eRw//I/7d7EMEOsqmwZOuvsLbQQTo8wvGdz/H66SkE
      ycATKGPdQ09Rm6WgRy6yZ+dO9p4YQsAEfwkPP7ae6gIv1ob6wnPbtkCmaaCpadKxAQ6enCQz
      u4SG2lwUm4RgaCSSKfSbtmdFxYnLJpBOJkjFY8RUE7vLg9PpwGHT6Dt7iF27TrP6l79Hc7Yd
      TAM1GSMUCpPQJbx+Pz6XA0kUMA2dZCzMbCiCKrnIDPhx2WVEQQAMUvEwU5Oz6KKbzGAGLoft
      oyeXpoGqapiI2BQZDI1UPEYkEiVpyHi8XrxuB5Ik0vn8f+BVczO/+cQK/A4bejpGZDZENGng
      8Gbg8zqx26Q5d8hElHA4SlqXcPn8eFx2bLKIaWikk/G5oLmagNPjw+dxIMvSvPX8pC6RC0mZ
      N5etN5lCdF5nClFwm6YQd5PbnwQLIjbFgQ0PLl8ct9eJQ7lcjGTD5f5wbyC7043idDPn/iAg
      CGCqSeyuAE0PPkNjUJl7CQQRxeEh6LgW2vaKQ4ggSjg9GTg8GbccAxG7y09+se9y+Z+gSRVE
      bNcbY4kyDrcPu9t3U/lJ4oH1fGtVE16HPLfKpLjIyHGRcd39XKmj4vIRdF0p4/pjMnanF8Xp
      val8i7vBpzeGs+Wxdnnex593PYJwaysnu8krayaPm16E+c79JMc+6Yt/u/XEzvJt668en/vx
      EbX4qDp8ZP1vRZQkROneiRsnSjI3b+AIooQgzQkc4TZeq7n90LuGZQ59j2O5RN5ZrI13i0WN
      JQCLRc19GhZlcRGaGPn0fhWfEUkQ8dlc6CYkTRWHK/65lW2aJmYqji67537XwZxd2Db5MwjA
      xDDn5i9fxPHpvcQr3/93d20Z1Gdz8bXKjYSSBqdTQzSv2/25XyN0+acxJRL/kf9zL/+j+PRy
      M5JMz4SJxj86YNMNmCamYaBqGh/paHX5XF3X0fR5vL5MA03T0PS5hBc3o6nqAnlamZf3RTR0
      /ZZKYhpz9bx5XwS4fEzHmM+lzWLB+BQ9gEk6HmZ8+Bz7jo/hzyqgsbmKnEwfdlkkFRpjcHyW
      lHrtBcwurSbokjFSs/R29zOTSmN3BygsKSU4z76BqaeZnRxjcGScpCkRyC6gICdrLh6nFmd0
      YIiRmVl00UFeURn5AQ+yJAAqE5d66BsLYdgcZOWVUl6QcaPKTY1oeIaRoYkbzaRFF9k52WRl
      uq+en5wdZWQygi+3kAyP6yZbINCTIXp6BwhHE4gOL8G8IopzvGBoxEKT9A+MEk/pKN4A+fn5
      BP1OBHSiM+OMDo0TiuvITh+FJQUEfLeWb3HnuW0B6MlZLpw5yeETp+kdjaDYu5nWDLasaSY/
      w8H46Xd56cgIiqxwJf/xqidLyHIa9Bx8m5cODOILyhipNFmND/HkphbcNyxx60TGLnHovX2c
      HYtgl1OYnmLWbHyQlvIgs91t7NzTRsjUEdNhhPzlPPmlTRT6nCTGT/Pa828QdWcimBoxsYSv
      f/MxyjOu2+gyVabHevng3SPEAARQo1OMRTPY+MjjPLK+cu60dIj2A2/w6u4eNvzqr7O+oRzn
      DfVMcuHA27xwaICAX8HQNQRvHU9/dQuZ+iQn97zD/gvTeF0iaUOhsGYFWze14lFHOXlgN6e7
      xzFtDhJhjeJl69nyQDPZXsUyiV5gblsA8fEuTnUNk1m7nLwahSyvA18wiEMWAZ2ZkVmq1n+Z
      rc2VuC6XLooyRqyLV186z+rf+195sMzFeM9hnn91Jx2NdazKuRZC1lSjXGg/z2g0k8d/5Zeo
      dIXY/cZrdHedIz9QxbHdHbgqVvP4pmb8aj8/+cFznOxfQrA+l84drzBe8gS/+/XlSKkJdv/d
      D3jjQBO/9Wj1tfRDopPiqpV8u3zZ3B6MoNF34l32nguRlZ95+TyNsc5jtA1pKHIASZRuNVXW
      Rnnl56fZ+L//PhtLfSRm+tj1k5/x9tEKthRNcfpcnEf/2a/RnGNj6Mwh3jvcTtuFIioTHfRP
      yyx7/Lusqgwwfe49nn/3LD3F+QTqC2/xO7a4s9z2HEAQRGTFIJaKE9dM3JlF1FUUEvAoYMTp
      G02iJSJMTowxHYphShKiJJAe7mAkZw3rKzMQJIWMvDpWltlp7566oXw9PsNs0sBbXEdF0Ink
      yqOluggzmWS0p5txWx7V5cUEXDZkfyVbmrK5cHGKdHKSE52wcVszdgRkJcCKba1Mn+ri5umj
      IIrINhs2mw0zMcnFoRCerDJqiwMAJKcvcuBYP4X1K1lWkYNDmsdWPx1migIaSzJAEHH4clm+
      sY7hE+eJqyq6I4+yHA+IdvIqyyks8DPZO8DsrIrHnUlBXgYSItk1yyl36MTj4XmTflvcWW7f
      GjSngqriCY6fbudSwkUykkCxN1OSn4ldUJEzvExcusCZmX7ScQN/fhWr1jVjUxO4ymqu+ubK
      io1Afi6x6ZuW1QwdyW3D4fFdrZwvmInQFyUVjaFk+7G7HFeVGyzJJ3EsjZGaZlzPJtd5zUzB
      5s/Fo/WjGzqqps+1+JKE7apZgcrYpQuMR0VKV9YTUAA1zNljJwgFSlhaU0HfuTNzS5A3t8xy
      JhVZQ+zde4pltTmYsUkuDMcR8aA4HLiMSxw93klNgYfkzCBDkwlsAQF/0EN8qJfTpzqgOBM1
      OkI4HCbHWkm7K9y2AER7Fi0rNhLM9PPOBx2MXTzN+4k467aspSrPRev6zZTEEuhakrFLA5zb
      /RpqbjEbAa5PA3d5RWh+bvQIM01jzhNMuPWYYRhzZsWmgE0QbprwGmiGyuxIJ6dPXsIUHQQL
      allxOQuMFh2n59IYgquA2vIM5oY+p9jfEaV8VT1uW4JYOoEcChGJpXC4lWtBwJR8tj/SzM7D
      xzgSCiKpCUYv9ZAy1hDILmPpkm5OnTjG7LAXIzrJwGCEYn8DudV1VIdnOdvTxpERL5Ixw8DU
      NBm6YY3/7wKfah9AVDwUV1ZQNe3GLqW5eLSN4eFxivPqyK+oJv/KiUtXkB06xIvtI2xudZIc
      GSVJMw5AS6tMD4/gLbwxNZAgSRhplWQ4jEohNiA8MY1pCDg8brRLYZLJFDogARP9Qzg9FYj2
      AJkMMhjVKXPJmKZJOjROXHEg6BqqpoGoo18NUqUx2X+J8SmV/BUNZNpFMGIMXBohlU4yPdTD
      0dluusdHME4ew5B9bGwsxu248sgkStc8w1O5XQxMxpAdTvKds+we9OD2ZdO0+XGCfX1MxnQU
      Agj0obucKN48WlY/SE7hIBOhFG5fCaFhFVmUsDqBhee2BZCYHKRvLITigWRaw+N3IsviXLqg
      yBCnhlIUFheS6bVDcobBaQNfvQNbbg1Zg69yrH8N64qchCcv0jGo0bgxCwyVRCxGXJPJ8GTg
      FUUu9V9gYKacMmeU8xfHkJzl5JRVEjj8Nhf7higvzsSnj3Ckc5byLZkoziBNVQqHDp5n9ZPN
      iOos7R+041vyJPkldTxV0nrDfWjxKS5eHCGlFFBflXW555ApaGrlwbxpVMPENDW8dhdiMECG
      x44oGsyMTaBkZuKSJdRkioyyBnLKdWLjXbx1KET1ykpk3UATFPJrmigx4vS1HyAlSJRV5yEb
      GmnJSX55PSWyzvCZ94g4A/j8GZZH2F3gtgVg6gnGLnVwYXSayZkUDqcLX7CIuoIcHMwwfPYw
      p0+K2O0ypGa5aDbycGs+Np/M9k25vPXyS4zkO0hGJxCr1lGfbScdGeH84QMMiwvsbwwAABqj
      SURBVEt4eFs15VXlDAwfZcfPXyTLHmdaddJUX0l2ZgErl5eyo+0kr4ydx6mPM5qxhMeKMlEk
      hYaHtnLsn3byktqFoEcZmM1n+5Ol8ySgNggNDzI+FSW3eT3ZjssDJ9FJQXkNBeVXzkujX7iE
      1LKclqoC7PELvLLjIMue/ApVfhdTZ99jd08cxWaghqcIe1p4si6Ilpil++QHnB5NI5MkEkmR
      UbaUhkIfRmKMM6dO09UfRpZ0piZC5Nevojw/0/IJvgvctgAcmUU0NIPL38Xprhk8gWKWrWqk
      JDeAHRetSxu5ODhJJKUiykHKV9SxJMeFIAg0Pvwo8aNnCCVVAnll1DQtJUNSGZ3op+PcJXI3
      rkNEIrOkklUbBM73DJA0sqkoqaamvACHKFO0dCUbFA8Do1NoUhZL6pdS4p/bRPKVr+HxL5l0
      jkQxxEw2LV3CkmznvPeh+PNpXOnCV5b9EUthElVrVkN2JjYBhk+8T3fcx7rLtvDOrHzypsZJ
      GQaOzGJW17WQ7xLRkgq+zByC8Vk0fBSUFVBRXU3ALmDgICOQRXYE0gZkFS+hvq6cLM8nTCtk
      8bny6f0B0sPsPzlBMLuY2orMG4/pGqphIIg2JPGaN9TcxFcjreoIsoIii5hajKGLHZzuNXjg
      wVVkXIktdNncQTcFJFlGvt5h1tDnAu+KMjZZvOwOefUg6VQaE3muF/rcUDnx2ivEataxuioX
      RZob9pm6iqqZSDY717lBY5oGuqphmAKSzXZ1U/DKvemahmYKyLL8kdG177ZL5BVboOk7aAt0
      hbthC/Tp3xA5QG21C8U+Twsrydjmc2ASBATJhl26rrUT7WTl17A623Ht5QcQRGSbMn8FRQnF
      /mEeUiKK/ROm6bwtRMpWbsYZzMB2+W0WBAFBVphPZ3P7JR8S914QkWzKPEMzi4XG8gi7x4nH
      40xe6ppbCr4LyKJEoSuLtAFhI4Evc/JzLT+RSOB0zjWiZlpAH1hYC31LAPc4lkvkncXyCLNY
      1FgCsFjUWAKwWNRYPsH3AT//L/83uvrZcp41NEYpKk7OeyzxvAcjcnfaQtMwCYsCoqLire9Z
      8Ot/piyRac1AFERkyepI7iTRmcnPvA+QioYxUvPnY9QmfZihu7soa9rTmIVDC37dT//mpkc5
      cqSdCxdnPsfqXIehk4hFCUUTpG9279VVIuEQ4cT8vsXhmRlmIx+XfNMgnUoQDkdJ3nIBUBMJ
      wrMxVPWjfItNTFMlPDNLNHFzHl8TLZ0kHIqQmKd8LZkkMhsjlbp38v8uRm7fFsjUmbxwkldf
      f5Pj3aOg+Gnd8jhPbFpOINbGf/3R61wcmrnufJOcB/8Ff/R0HT07/hvff7Pr6s6wP6eQJ3/9
      91mVf/2GkYmRGOfArjd5bc8xokDl8u088chDVAYd6OEenv/hixztGyCtwvInvsdXNzTgtcvA
      NG/9xb/nzd40SArZK7/OH3xrNfYblhBN9Pg0J/bu5Gev7ScJuAqb+NJjj7OxqQCRKCd3PM8b
      e04wGhNAKefrv/FLrK7NRxGvD2lokug/xB//2XNEMBHtHmo3f4vvPd6EmI5w/sg7/N1Pd5PA
      xJFTxaZHnubRVaWIxOn84DVef+sD+sICKMU89s2vsnFZBS7p9kImWnx2bt8lcuQU7+5rx1e5
      ku31XrJcIHkzQTewF6zmd39/KZppAiI2YZIf/dF/wV2fhwBER8dZ/Wv/jl9p9JE2DEBAlm/c
      LTXNFOcOH6OzT+Jrv/8fafVN8NLP3+BI23ECm5o5+dMdxAoe4P/4zmqCqQ7+81+/xInKXB4o
      y6Hv9e+zU9/On/3Vw9gSQzz/p3/FPx6r5Dsrs6+9WGaKi+dOcbx9lq/9X3/K6kKJU7ve4sjh
      /QSyHyPYv4t9Awpbfu3fsromi749P+Yfdh0kP+MhKvN815l1jPKD/+cfWfq9f82zTUGiY+f4
      p+//lFcq8ljruMiePRd47Pf/PZtK7XQdfI/3D+/mSP6zlM8eYP/5CM1f/0P+t9Z8hg69xPOH
      D5Mb8NNaGbRMoheY2x4CpWMRcLvJKCnD5/OTVdDA2qV15GXO7eZJioLdbsdul4l27uOcazXb
      KnwIxDnfY1JT4kU1TSRJRrEr3Bzz1YiOMzKdwlvUQkuxF9lfwfq6EoiF6T93mgvJfJbWVZHr
      t6PkLOMrzT7auydIpmY4dkjlmW9vwYWIzZ7Lw8+upOfd49ww9TNSxNNgD9TTUuwHyUPDijqC
      TpOhcz0MDOrUV1dTW56NjETlxkcpUwcYDoVIXb9lmBinn1YebcoFQcKVWcpDj9VwdtcxIqkU
      uncJq8oDILmoaKyhvNBJX9t5RkY1ivLKaWkoREaidOUWKpQoEzPjxCyXyAXntgXgL6gkYJvl
      8I6fcai9k+lwmFgyfTnt6TVMLcTbvzhD8xMP4FFk0GcZTiZ4f8dbvP/uuxw6fpaJUIybw+mY
      qorsc+ApzOaKxVCgMBvDtBGbnMVRnI3L77lqR5NfW8bMeAw9PkJXykfwsn+NIIo48irIVBPo
      polhGHP/TRFZ0tG1CUZDMZLJBGmbB8nhRjJ0HIrByNgkI+MhEskksbhEnt1+1f7nKoIDn22U
      3skIiVSKlKpiZBTj1BKYooBgjDM0GyWRTJIS7IiuALKhoigm09PTDAzPkEgmiSdEsmQ7Tmsh
      4a5w+y6R7iK2bv8KhdkfsOO947z8XBe9m7axbVMruT7H5SwnJuFzezlNA79eHcAmCWB4efDL
      jzClGaRjU5x+5RB736ng2d/5FlXe66ohcossZZuCTU4hSqlbfHMVuwObKIJp4FByybo+rIJh
      YmKQik8zOTqLLsg4vQHy8/LI0g7z8o9S1NYFmLp4jo6LAuseqaZ6VSPdb+xiz5vT9BVlExlu
      43TvNNtvdll0VvLYGpWf/ucf8sD2BszJAU61dWIEHyIYLKLSu4eX/vYFGltzCQ90094dZ8na
      RyltquHSyE72vfkSI2VFpCbO0t45yprGldb4/y7wqZZBZVcmjatXMyMVQ3KUjhNHaS/IxL+s
      BpcAphpi7xunqX34l8ly2ue+WFsGy7c+fLkEkwc3D/H+T/8H75+aoGp9/nWlC5iajq6mMJjT
      QnR2hlQqjSDKGOkUuq5dDSs/PTaCKWYjyG7sajf9MYNc+1zEOD0dI27qTFw4xPOvHAfJT0XD
      Jp59upmHvpFJ5+nTDEegpLqalBkCQ8Ce28jjTwfoONPOwFSakpYNRIcO32RyPffoWp/9Q7wV
      BzjTN40jq5L1q1N80C3izi5l8zd+i/y2E1ya0cgtq8YQxsEUULKq2fplH0Ud7VwcjZFXt4rk
      5GkUQbCyRN4FblsAWiJKJJ5ClOLomkgwt5HKwASyrs4tSYom4Z59nDKr+GZtELttrjk3krOM
      RUSys3xIwpwdvSGZJFPqnO2/qqIaInaHG1nVmO3rY3pFMVmyytClcez2bLLLCulqO87o2CSV
      xRk4zBjnO0YobXoQmyufhqDGhYtTLM/MR9ATjLR3QPFKKltW8m9avnz1HkzDQMrIY/nmQlaY
      acbP7WdkViezKAubaSD68li2voAVokFk+Cj7vdl4HXZkwSAZTyE5HMiCgKGLlK94kMoVJunI
      CEffPk7O0nIcJhiuAE0bttNiqsxcOkl4dhZneS6KaaC7gzSu3kKLaBIbO0XHyQzsTjd2axS0
      4Nz+KtBYD0dOdROXbYRmdaYnLjChyzR6vdhEQA1zaM9ZStY9QbbbeXU0o06288rOSVasrscj
      aYRGLtAdKWD9kmz0ZJih7vOM6fksX1pASX4Ol/rPs++QjxrvDMdHYgTrm8ktqKKl6DSHOjtw
      yikC2gUOR7J4uDQTxeakZUsj/+2tHbR7HkBKj/HewQgrvlPLzb5WaiLC2PAAM7oNmzpN55le
      TH81lSUBjNQsfYMTxFImipzm3N6j+KpWU5DpR1KnOXLwDMWrH6DQbSc80MmlhB2npBEZOcvB
      PgePbS1BTyUYH+xlQlWwG2F6z3UyY2SzoiobMx1haHiM2ZiB3abSc+QoYnYNRfnZKNYYaMG5
      bQG480qpmJ7l6MnT9A2FUbyFrN26ieaqQhwiEJ9k1t/MAw2FuK5zWlGCNTRlnufAO2+hmyY2
      l5/6Bx+jNVeZy6S+dzda1dMsQ6aoYQnN8Qj7jr5HjylQ3LiGZQ01eCU7zQ9tYnznHo7v3YUm
      SLQ8+CR1QR82AXJXPc1j/T9i95tvYIp2sjc/wbZK3y33oKciDJ4/yuGeGQxBJLu4kbUrlpPn
      FNHDYXo6j9NxYRLDNHHkN/CltfUEvQqhzv3sPNLHN5auAred+Ph59h4cQJfAbvOz9svPUp8h
      kYokGOs5yfvnJjEEgUBuFavXb6DILaJHowxcOMXR9hEM08SeU82Da5opzprfddPizvIZXCKH
      2HdigmB2CXWVmR9/Psy5RKppkrqBTXEiS3NO9gNdJzhwYpz1Tz9Jketyn2FopFMpUoaI3WFH
      uX6VxFBJxJNokh2X3XaTS6FOPBLDEOx4PHY+DFOfK183ZRTHje6MGDqpVBLVkHA4lMumHjpt
      L/4tnXlbeXJVxVygXtNETyVIpg0Upwfluq7GNHTUVBLVEFEczhs95AyddDpFWhew2+eyR34Y
      n5dLZOuyMOUV8++Ox/7n3TeFEO1p/K3nFvy6n94WSHSTm6Pj8X6I2998CAKCYueGts4U8AWL
      Wbmx8drLDyDKKE6ZeUsXbTg/1IlcwuW9tdW/pSqSjN31IbcvSnNj8hs+1PHVbeVLVaU4FOny
      7QjIDheeeTwwBVFCcbo/pP4SisM1/zGLBcXyCLvHicfjtO18CV2/jTwM81BSmiQYnN+iNLXP
      iZm4CzNwE1RNxWazIcoazuLRBa+CJYB7HMsl8s5iLbxZLGosAVgsaiwBWCxqLJfI+4Ajb/wM
      Q18Yx5mm5iiCaIIqkNp35/cm1LSKqty6oic5Uthzp+b5i8+X+0gABppuIgjiR4YS/CJy7tCe
      BQuNWJUzhiSBmRCI7chYkGvOd2eyP4JYd/GOX/v+GQJp03Sc7WN8MvbJ/8Y0MbQ00Vic5DwN
      qKaqxGJxUurHtK6GRjweI56+NWWraZrEo1FiyVuXGHVNIx6Lk0x/tiVMizvHfdADGMwOdnPw
      0D6Odk7g8ufQum4jqxrK8Dnnqh8aOsuudw4h1DzEU6uKkCUB09SJjXXyysvvMyUYeLx5rHzw
      UZoK3IDGVH8nh977gN6Qji2zjJVrVtNamXNLvE4jNsSeHXvpmphEM2QaNj7Bhrr8ucC+ZoTD
      Lz3H0eE0guIir3ETT62vRkYnPN7Lobff5vy0juwvoGnFWtY2FFjxQO8x7vkeIDnRxYFDpwnp
      TnIKyinL95FOJkmldSDN2Tf+kX94fT/dR09ytHfqsmOOiZaa5r2fvkk0v4XND6yhxBtjz9s7
      GU1DYmqAM8cPMSKWsH7zA5TYwnQcO0nP5M2dcYITO3bTE3fTvHI965uyObTjF3SHEugmDB/8
      KTt6XDzw4GbWLC1jcv9bfNAbIR2e4NzRPXQl81m3eR3VGQbdRw5xduw6UwRtivNdfYyM30aP
      ZvG5c8/3APGpQSbTEmWN9QSmNUoLssnLC+By2QCdjMpmHqrzEHIN8uLl8YlpmsSHz3B0KJd/
      /s9XUeyWmPE7Cb+9i1P9MzSpk0xPi7Q8spmWQieVfpMde3u51DNKRbD06kPRZno50QsN21pY
      0VSMTa9kpvMvONI1SdVKOPFuN03P/AGtSwKYyRls033s2ttB/RY/Q5eStDy2jdZSN4lsO8n3
      T9PVMUB9bs1c+UaCiclZBNlHfo77Lj1di3u+B/AE87CpIxzdv5vukUmwu8jwuVBkEZDJqaqj
      uqKUzAz7dY7vJlp4HLG2iSKvgiBKeAJBiosyGewbIxQLM2N4yc/2ICLhzS0g4PVCNHZ9Gj/0
      yBR6fhG52QEUWUS0+2hsKqb/0jRGaoRTE05qKzKREJAUN/m1NdgmRphNzDCc8lCU50VExJWZ
      QzCYhRiOkNY0UskUyXiaZCJFUk2TTCVRdd1yiLkL3PM9gC1QzUNbZU4c+oADp9/jJ2fPsfnJ
      L7O2uRSPIiLLc7dw8+QU0UByX0unKssybl8G5mwa05RxKNlkXF59E0QZWZDQuckrXTCQnDYk
      SbwqLl9WFnQboMbRbaXkX7aYExAQJTuyoWMaYFPyyFKulC8hiTKiqTJ0Zi8Hdn/ApbBKLKEh
      2xTsikT91q+wbUU9mQ5rlrCQ3PMCECQ7WQVVbHjIhuruw0wMcPq9t/H4HmNZdcGHJ5bTTeBa
      QCpd14hFZ9EFEUyVVHqGsAoeBcBEw7j59Z/L6moaXJ+WNRqeRjUKMEU7YrqfiRRcMeU30UkL
      AmCgpsYIqeBTrhwx0JDIq1vFE0VLSKdGOXZmhqxgAeUlfuwePx7lnu+Qv3DcF09cEGWcThtO
      V5Ca5odp9oho8TjadW/sDe2mALLXT7jjPOHLH6ViSUKD4+SX5OOxu/CaYWYTcwJRQxNEE1E0
      xXnDA5E8XpL9Q8zG4lxZKB1qv0RRaRaSM59KZYqh8NwRQ08TH+kl7gnitfsJCrNMxubK16Kz
      c8JxuHE4PQSyc8kNZuHy+PBnZpGbm0uG23FjGiiLBeGeF8D0uUO88fpbHD47TDgeIzzZSWc4
      QVqUuCFtGCpJNTmX1R0RR24rtdGjvHF8FEONMjpwgsNTHurLA2QG/ThsMY7v7yRNnK62LsZD
      OjnluUhoTAwMMDYVwsiooVYa49jpXqYjadJjh/lFl0ljTRaS7GXFuiBv/mQPCQwSkWH2vH6e
      srUNZPl9ZAd1Dr7TRookfV09XOyLkFdbdK3LFWU8Lgf2eXNJWSwU97w5tBoZ5tje3by9r42R
      UBzRVcTmJ55k28paMqQhfvznP6RteJK0rqKZIoosIdc8yX/8F5sInXuf//TXvyApgjszj63f
      +E221gURzCQD7ft49fmXOR8SELOq2fbo42xfUY4UPc8/Pf8W3oZNbFm9FPtUJz/4ny9yfmgC
      A53Wp/8XvrGhDpdNwtBGefnP/pj3xiQEm4O85c/we7+0BqegMt57gld/9BNOzwiI/hLWbHuC
      ZzbWYr+iWtNEN0wEQUC8h5LkPfH0dTvBf7MwO8HzIfsjeBdgJ/ieF8DV6qX72X1omtLSMipL
      574YgbnR+S23IFyJsWmip2KEomlktx+fQ7psV2/OZZJPxYnHVBSHe25ZVYD+95/n3SEHKzdu
      pbHQM3cFPUk4FENTPPjddiRhzhvMNOeC40ZmQhiim4wM5+Vrz5WvpZPEokkkuxuPW7muXp8c
      SwB3+Dp3/AqfkauOIIINh8uGTRFvcA4Rrj/n1r9GdnjJusVlUUAQBOwODzcmlEyjZzazuSyD
      oiLP5ZdVANmJfx6ndUEQEAQFf1b2vOXb7C4y7K5PfrMWC849L4CrKAWsW1lwpy9CRVP9Hb7G
      7eP0+hesBxAVFUEEdAEx4+N9qz8rpmnO24BJPhuCO3rHr3/PD4EWO5ZL5J3l/ukBFjGGYXwh
      BQBzw0jDuHthsS0B3Aek0+kvrABEUSSd/mz5zz4LlgDuAxwOxxdSAKZpkkgkcDjmCay0QNzz
      G2EWFncSSwAWixpLABaLGksA9zhXzL2/qNzt+7P2ASwWNVYPYLGosQRgsaixBGCxqLEEcB9x
      1cQ6kWBhAiV+zhgaqWQaVZ/L4nkv8MVeYvgCYZoGY2f38s6xixiGhCdYzcaH1xK0pRgfGeLi
      gMHSNVUomMwOnOdc/xSBylZq8+6BkCtGgv6O4xzr7CccVxElmdIVW9lYl4sWH2TP+1NsfLQV
      BybJ8CTnTx4lUfwAayruvD+C1QPcJ6jTZ3npjQMohbVUlReiDR9h194LaKZKeHKErrNDaEBq
      dpD2o0fo7o/icN4b7Vtq/DwfnBnGFiikuqaainw7R15/g4GkgZ6a5OThHlRAT0UZOP0++09M
      4v7QFFifL/fGE7L4WMba3mEsuJZvbXwAn5igL6Dz+q5DTGx4CkwQTAExHeLC2eOcndFZtmk5
      hf4PTxK4kEiefFasySE/PwevQ8ZUhzj+6l8zpZnkABgCkp5mdugMbx+7QOXGX6Z2gYKFWQK4
      T4iOzVLWtJQMBcBORk4l2UIPIRVkTHQ9Tl9nB22nx8lfvpmGsqx75suVPbnUeq78FuPkjtcY
      yVhCoV0AFTBTTE8Mcuz1A9jrt7G2uXDBEgjeK8/I4mMwTQnFeS2ChICAoIYZC6UoJE5f1wdc
      GvKQV7yELY0VuOR7z3pUne3llRfe5PSMh6d+eRtZNgFVFIjPtvHjv7+EHs/km99txmdbuLpb
      c4D7COn64ImCiKy4CXhsgJ3comYeXN2AEBnlfP/MXavjh5EYPs7f/+R5hpyVfP1rj7K8KhsR
      AUwTu6eS7ds3UyCMcaRzbEHrZQngPsFmN+num5z7xTTQ1BBTKROXIjKXGzmHlg2rqa/20HFg
      H523RLq+i0T7eP7nb2NUbOSpRzZQX5qNTbwcIcMEyRaguqmFzY8vp2/3KxwcnD+h953AEsB9
      QtGy5Uzte5muMKiJCL3H3mE6YwmFVwfLAjZPNktXLqXYPsaR/QeZvHuOVjcw03eCPqOKzUuX
      kO9zYBg6WjqNdl2PJshOShpWsbXVyd5XX2ZggTRgzQHuE+zFm/nmynP8jz/9V9j+//buGKVh
      KI7j+O8laZompQjFvYOLi+ikdHLS1cETOAhewkN4AM/gooOzk+jiIniBDhbrkpLG18bBgoiT
      Yinx//2c4EH4Ql54+T8XKE17OjjuK3FeCgK5MFToQrVW17S9+azrmyfd3vW03+8t/VKO/GUk
      P3jU+dm9IufmA50q7Z2caqctqREpdE5R2tX61q6GgwtdXT7o6HBDi/4YymnQmqiqSn6SazR8
      VVFVaq901clSRW4m773evJS0YjlJM19qUnq5MFazGf14GNdfm5ZjjQs/v7zkU5J1FAde+Xiq
      rJ18dDGbqpwU8oqVthoLXzsB1MiXR/WLKXP4jlegGvmPP8YvG5tgmEYAMI0AYBoBwDQCgGkE
      ANMIAKYRAEwjAJhGADCNAGAaAcA0AoBpBADTCACmEQBMIwCYRgAwjQBgGgHANAKAaQQA0wgA
      phEATCMAmEYAMI0AYNo7RNpo42eAxWIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 3' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 4' width='192'>
      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
      vJQgfC/a2QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nOy9d5Bd2X3f+bnp5dwR3WjknGYADCZyhhMpkiIpyktaEiWZ4pLatSittkTR
      1pZXpfXKsnZtl3dd3rJcsrZEitLKkk2KtEhRojicRHKGAww4AGaAQWjEBjqHl8NNZ/94fS7u
      u/1eB2TM4Ft4eP1uPPfcXz6/8zuKEEJwD/fwHoV6uxtwD/dwO6HLP0qlErZto6oqmqah6/pi
      57VACEGj0ei4T1GU62/pPEzTJBQKtWxzHAdN0xa9/3La4TgOqqquqL2hUAjTNNvesx10XUdV
      VVzXxXEcFlPAiqIQDoexLAvHcRbsD4fDLfdxXddri2EYXp80Go229/G3U95rubBtG9u2URQF
      RVG859F1nXQ6DUCtVruh7/5mwKNy27ZxXRfXdQGIx+PLbrwQAsuysG0baL4Iea6/4/2d7d8n
      hEBV1ZYX4idc//nVanUBc1qWteC6/rbLa8h2tSMGeXyj0UDTNI8RlrIQTdNEVVVM01zQX+3O
      l0xmGAaqqnptb9duuc1xHO+9BPsjEol4v13XpdFoeNs1TfPejZ9J/e2S91RV1WvXct57Pp/3
      GEser2ma18527bsT4VFSUJJYloVlWZ6U6SRh5bnRaJRGo4Ft2ziO07YTgy84SKSd9i0Htm17
      L9UwjGXf178tHA4TjUapVCpYltXCCPLFBtts2zbRaNSThLIN7RjZ/7ck1GAbgu2u1WoLJLX8
      Dj6nqqpkMpm27zIUCuG6rtdP8pr+dlYqFSKRCKFQaNH3DU1N5if2uxUtotTfGUII6vU69Xod
      VVVJpVIdO0VKtVgsRqVS8SSBZISgZPffI/jSXddFVVtdE3lMpw73E4KUxJ2IJiiRNU3DMAyP
      iOv1Orque4zguq733LJdwWsH7+l/Rv8z+M+XWMxcaqcx5d/JZLLt+wgyaLVaRQjhaYRGo0Gt
      Vmt7rDzeNE1SqdSiQigSieA4TlvT7G5CC6XJTpAd4Se8Uqm04GGFEJTLZQqFApZloaoq0WjU
      U6fBF92JQILSs53ZJM0k//U6XSO4z/9c8rhIJEIymSSdTntthiaRJxIJIpEIuq6jKIrnG6VS
      qZY2yb4JSv2gtpEaNEiw7drXbn8oFCIej2MYhtfupSQ0NG1wafrIZ4hEIt77iUajC9qpquoC
      36IdTNP0fJh2bb9bsEAD+O1l/zbHcTwih6bdXalUvONrtZrnCPudu3ZE77cZ5b3ktqD097et
      0+/g39VqlVgstuhL1HWdRqPhmTqhUMh7+YD3LJJYGo0GlUoFgGg0Sr1e956nE/wMkUgkPEGy
      lG8R7C/btgmFQoTDYVzX9RhzMUjb3w8Z6JDCRDrK/vcILAgytIOu67eU6KUpp+v6sph/uWih
      tnYqWkoFKX2gKU1KpdICCe9XiX770o8gk7WT7PIjnfJOEYx254RCIU89L3aetPMlcUk7XzKy
      NGvkJxQKUavVvDbF4/G2bWkHqVHL5XJb7RDUIACxWMzzPyKRCOVyGSHEopGaoDSW70tRFGq1
      GpZltQg2PxMAnlZYjv+l63oLE9i23XL9GwnbtikWi1QqFYrF4g01uzzKi0QipNNpksnkAps5
      k8m0qH/DMEin0wuktSTaTpGfoGTzhxzb2aPyJS32QoLOHFyNzASP8f+W95SEVq1WFziJ/vMM
      wyCXy2EYBtVqlXq93pHJ20FGyIJtD/YDNAWDvL40nSRzBkOu/mvV63Xm5uaoVqsUCoUWhksk
      Ei2RLdu2PV9AakspPJbzTKqqerQitaiMbN1oSPMtFAq1mKvXCunwj165vNAEknFq+XLajQcI
      IbwIiZ8b5cvUNG1JLvWcRiGon7uIPTNHZPtmtGSiLVN0Or9dZ8j2+7+D7ZeQYdVQKESlUsFx
      HMLh8AL7XGoL+dy2bXuMJsONyyUcv8nnb4//uWUAwTAM73jXdSmXyziOs4AQJINIRvC3PRwO
      exq8Uql495Htl8JvpdJb9m8nk0kKw5VG9IIIh8PL8kuWAyEEV0bOUjz/VeLhGguoW1VVstks
      pmlSLBbbSjn5OxaLtdjKrusSjUapVqsdGSBoAkz9xTeY+OM/B9smvG6I9f/mn6N35xY0Onhu
      kIj8+0OhEPV63VPvMrIkIzp+Z1kO6PgH8qSd3i5CJSMqoVCIcrkMNP0hv+khNZeUuJLIDMOg
      0Wh40t1/zU4RIhle9j9fvV7HcRxPKwefX5o0hmF4WiMYTpXXl1rgWiWrtMllH/ivsVxTxa8J
      2+FGED5AqVTk3IkXyXCMoW4HUBYygIRhGGSz2SUdyXYaQjqYwc5eEBJtmEx/9Zswbx40LoxQ
      ePlVuv67j3jndJIg7UKD/n2RSMQb1PI72H4i9bcp6Kx3up+UxLZto+s6sVgM13U9pvf7N9Jp
      A7yomtwfjUbRdR3HcbxQpYRk2nA43NJ+qXmhSVz1et1z3qVJEtTaMiggCT3YX9KEWa7pE4QU
      eO0QZGq/uSr9IqnlyuWyl4Egz5O+2Y1gANd1OXvsW6xPn0b1Xa4jA0j7E66OErcL5fkRDEm2
      29/yAlQFxc9ACijzMf3FQovBa3ZiEMMwqNfrXrgvKGUWiyRJQpe/5X10XSccDnuOsj8q42+L
      f5s0CYOmV/AZ5CcSiXgOrGmanqkizZlwOEy5XKZSqXi2sUTQn4hEIl6KhNSEksGk9pEa8FpG
      bf1jMEEBIoMlUkO4ruv5CTJoIp16vzaWv2u1mme6rSQ1px1KxSIR6x1UpZV+l6XzZHSnXC57
      9qUfUiLats3c3JxnGsgH6cQYimHQ/9lPoaWSKIZOfO99ZJ56rOVceZ7/OsHr+fe1PFwgncF/
      bNDGlw48NE07fzDA3x7LsiiXy56Gk5I4mNIgr59Op9vayJ3aIRlMQgYcDMPwnFQp7TOZjEeA
      fob0Qzr6fqZ2HId4PO4JM2mmXQukoOn0DiRzyXZZltXS1nZ+p7yu4zg0Gg2KxWLHfKalIERz
      1P38yVfo71r4jIqYv2q9Xl9SAnRKFisWiy2c611caQ15tutkBbBn5nCKJYzBVajhVmIJPnSp
      VFpAnEFt4dc00gxpFxVqpz3ktWTMvV0oVkolSfzB/Bf/tdLptBeClNLdb48HTZ9QKEQsFlvQ
      T/48pkaj0TJm4X/mToRsmmZLvF9RFOLxuJcnFEyhWAlc16VQKHhJidlsFsDb5m9jsN8lA/l9
      sKB5K7/lgOBy21koFDj+2pdJReusSlcJGQvPW5FeaWf++GP/wZfq72x5btAMEoDWlUXryrYl
      4HYIOoptGUu5Gr5sNBotqjZIeO3uJ1+I7HApuTRNI5lM4jiOx/SdmNF1XS+yJCH9JmkS+B3X
      RCLR0cSUz1ir1ajVap4D7G97rVbzmCjI/IZheIwlUzyq1SrJZBLDMLxMzmuBqqrLHhgLHiOE
      WJCoF/zbH7USQpBIJJbFBFdGzrEmN0M6rtIUtW3avuRVFoEQYoFUCe5fTFL7/27nyAYZKXjO
      Ug6y/7c/ddffHnkNqdn8x0gHUuY5RaNREomEp5bb3c9vzwMtL1cI4Y3GBvtAmiRLvVjDMEil
      Uh6x1ut1zwGXo9X5fN4bB5ADR4rSTPYLhUKkUimPGfzRsutBPB5vMSPboV3ft2OIIPzXNE3T
      0yxLMdzmrTsphx6n2uh83HUxgLT926FTdCYogYOp00ETyv+9EviJUNrgwbb6fYhOA3jSaZNM
      ICWnVMl+M6RTGngQQZ/En3e0FAzDaElZlk6wP+wq2yK//Xlc0uaORqOk02nC4bBnkl0PZKh3
      uUES/2+5rVPwpN1AYbFYXJDqEYRhhNh637MUIx+i2n66yvUxgFR9sDDUJRE0NfwvTn77IwlB
      B7ddx3T6W54fdKYAb0Cpnekjj/Pb+5IwpWSWUQnp4AshKBQKXnqEv81BdCIuqXmuZ5AnFAot
      yOEPOtfBEW7//eUg4LXe349oNLpk2rz/73Zh0k6awQ/5TPV63YtQLtbHG7c9yEhpA/mywHFb
      j1uUAZZqiFTd0saXBN7O4Q1KR0k00Wi0hYCi0eiCRLbFiLZT+4LnQNP+9g8MBV9IkIBlZEua
      GTJdot092t1b9oGf0ORvietNH5Bt9mdmtnv+UqnkpUkEcaOSy4LCLAi/1g8Kuk7vOAj/O5IT
      gAqFAsVicVHz6/7HPsWZyuO8ebbVz1my5zuN5smb+1WtbHwwpCUbLr8lo0Sj0QU55TJOLYfv
      gy+0Xq9TLpdbCLid090u3i/NGGkLd4pQSMgkrFKp5IV//cTr9xv815GQ+TfQZPR2Eu5GSd/g
      NNZgmop8J3JMwh/Olv7DzcBi5mU7dDKF2jG2f3zDtm3K5XILEziOw/Dpoxx56d/zzvEf89BD
      j1Cutw74Ler2S8nVDpZlUa1WSSQSpFIpCoWCR7BSGrUbefUnd4XDYQqFgjeYJCMWMpIhIwRS
      e1iWRVdXFwCzs7MtbZOznoKdFXSY/UQuR3P9HSo1mexAOVgTnJIYNJ380l7C7/DWajXq9XqL
      4y2EWJDOsFL422EYRsvUTL9kD2pnv+8iNduNyrcJohMx+/ct5TspiuJNuPL3n//55WxEVVUp
      FPJceOsbRNwLbOqFy7OvcOrgQTYPmi33uObhNSlFJWTst16ve9I5+DByUkej0fDsVvnikslk
      i03YTkKGw2FisZjnzJbLZdLpNLOzs55TGmRYf5QnmJwVVNemaXrn27bNmTNnWLt2LfV6nUql
      Qm9vL2NjY/T39zMxMUF3dzdCCM6cOcO6desoFovkcjlP2kuGkslzkvH9hHm9BCcJWoirhQmC
      BBYkmKDGkpNbgm27kfDTQ9Aa8B8j29TJt5M0J+en+N+lruueED574hW69PNkEwqKAkNdZaBM
      ENflBC/mqLZL7qrVahQKBS+9VQhBPB4nlUotMFk6Ob9SO2SzWVKpFOPj48TjcTKZjBeabGdf
      trMPg/fw/y4UCgwMDJBOp7Esi5GREWq1GtFolOnpaWzb5tSpU5w/f56uri6EaA7lnzt3ztN+
      QUKT7ffjevPn/ROUgnOxg9JValF/NEw6x6ZpenMObiQ69W8nxu+0X/oXiUSCRCLRkrwnzWn/
      DLcN25/gSmMfwccRgpZt15dg0QYyQUzm4cgHkeq/2Yir38utQuCH1BqZTMaTsK7rkkqlmJub
      a0niC0qTTva6f5uiKHR1dfHWW295foBMXovFYly5coVqteqZEXNzc0CTmGRSWTwe91KX/df2
      m2KAl7OfTqevSRtIBvcPRgafJ3hcsVgkmUwCTTNNMmutVvPe3a1COwdYfktzWQYQ/MLDMAzi
      8bgXkg4KllQqxaZtB7h44iQxo4ojDDRVZdLaRr9xlJ7MPFOK+TsuJxVipZAPU6vVWkZO4/G4
      ZxtfaxaihOM4nl0o8+WlE+1vR7s5AUG707Ksjgzpt6ulbxC0+2UqgMzVkU6ZP1DQzuZVlOaU
      yeVMRewEIYTnZ7Tbt1gfCyG8pMGVphsE4aejYCpEp3tLtDN7luobSVedgglNk7yKrhvYlkmp
      lEeb+BNS8fkw/IqeboWQDZIDFtFolGQyiWmaC3LcrxVyJpJU/+l02gv1Sacv6DDJfZJpgmra
      D3metJFlaNRP2I7jePlB8nqmaXpaQ15H2qntokFLDep0gl+r+O8n9wWd9yBByv26rnvvpdOs
      s+tFu+fuJP39TLtYe6Swm56a5MSxV5meGmvZH4lEyGZzJJNJXAGGEaFc95nqK238SiGlv4wy
      yNCVzG68EQiHw170SNM0b+bTYp0s0a56RTv4JXYwy1Tap5IJ/bWR5MtTVdUbVGsXHZNZk5VK
      paXG0XLRyccImnzB5/VrMflcnUb3rwWdfC//352EoKQ52Z+LQdM1bLPK2cN/ypHDr7ZcY2py
      lHfePsyFY1+jev7/ZVVumWHQYKPbRRE6QapVWWdHqlU5DH+9pk+wbXJ2WqPRIJFIMDEx4TlK
      QU0QjEIsFn3wH+f/HYSsGCHhz7mXalw6m8FrSKKT9rg0Y9Lp9LIS1PxhWH/SYfAZF3s+GYqW
      11vue14K7QIjwVyoxc6VfSijaJ2Qy3WTyz3LzMxez7+RuHzyb1mbvoTe04wI+XHDnWDZ8TJn
      PhwOk0gkWo65kcQPV51iSWyqqtLd3U0+n/ecpcWiD0HH1L/N/0zyXu0czXamk6ycoSjKgtIj
      7ZxzeW2pIYvFIul0etEX7ziO57z6ByBlGRZpDra7t78NktD817jRDJBIJLwJMp2uL9upaRrR
      aBTDMBaM1ywGOU4kcfnSMF3hEQy9/bOsyAdYTF3B1ezQYrGIEIJkMtniUMkOvpHE72+bnEIo
      4/mZTKZFnV+LCSeTzOQ9/NGWxczCYI5Q8Lh2fSmEaHHEhRBeVmcnE0CWMpFEJSNvsuyLH35/
      IGiahMNh7x62bS9g2GuB/10HR6Y7RePk86RSKc+0lcl+K4Vt24yffYlsovMxN0QDSEKQ9r6c
      teTPcFyKeW4EpA0spYufcBeTvsACZ1FCEqMM47ZLf5Dny5z+Wq3Wwnh+E6WTZgFaqk74IWec
      yfCkDAv6M0DljD1/pMlft1SmdcPVAgaNRsMbfQ8SqBzpl8l21wL/NM5YLLZg7nM7LZhIJG5Y
      GFZVVVQtTK0hiIZvgAbohGq1SrFYJBwOe5x7qyuHSciJHzLFWI7KQmsSloTfNPKbQvI4GRnp
      ZELJbfJlS+Jv54DL4/37/MTazgzzR29khKZarbYwmL9gVDtzTWoFOVIqry0nmJim6TGYX7PJ
      7NfFNNBikCnSsVjMm9vsb5tfmMiJRtdC/J2cdlVV2bL341ye6kyH16wB/OFByeHBzr/ZEr8d
      5D1lbpGM2beLkHSKCPkJ2n/NTgzt3y7Lg3TSfH7il1pSEmK7lG3/+cFz/VEoqcHkxBSZQ+Wf
      eRYKhQiFQt5ovJxamsvlPIElB/XkfaUDutgaDJ2gKM1xHplNK59Dai85cit9nWull4mJcVKp
      dIvzazYa/Pi1vyYcS6FFBxFijHzZJR1XUH1lIa6JAeTgg23bLanLt4Pgg5CSS1Z8hoWhTnlc
      EDIa45eEfuIL/g6mbwQJX+YAyazXWCzmDdxJgoxGo57TGzy/Xfv8GkESrayDJDNdAe+6suwK
      XA1JC3E1K1TOBvOnevuFiBQg0qdZacKcZVnUajVUVfWmMvqlP7BkJeqlMDi4esE2IxSiZ2AL
      rl1jcNfPc+6dH2KkV1Gf+jqrunwCRsz36HJGgqXzJEvhLXcW062GnKgui9jKtO1g9MNvL0vI
      EiR+gmxnVkhikcwVtPHlt23bdHd3t9xHFhGQMW6/WdIpEuW/v+u63uwrSfD5fL7FTOuUGuG/
      tnznkUikZWJJOzNMXnepqJSfjsrlsqfdpCnkf45bjWq1yvnX/y1dSZtYZD7budPB7SSmfNE3
      K232RiEcDntST74MyRTt4tJ+yCWPgirfT+RBx03ul7/9poo0R6STKSvEyWKy/iF8/7mL9a+8
      VnBqpH/aY7t2B6EoiuffyJH5dmUhr3XCjtQ2iqIsKMV+O2AYBlONNSTXP8KF84dxnXorA/jV
      o98pulmhy5sF2eHSTPAzQdA5bfdcsmoDXB1Y6vT87WLqQSZoNBpEo1FqtZpnh3cqrhtkrk6m
      m3/ZpHYLkfjbFry+nxmlQy2Fg9RM/vPkffwTlFaCO4V+DMPgyQ9+GoDBoY1AIArkl5BSMl3P
      dD249hSK64V/vrKMgEh0ctD9DnAkEmlxIIO+QHBq5GIvWEYpEolESznATm1oFzlq124ZcZK1
      QoPXazffWibqye2yzLuMmMkQqwwiyN+GYbRoh5XAcRxKpVLLs9wMyKDMcqBpGuVSsVUDyE7J
      5/N86UtfYuvWrezZs8dzhuSJ+XyewcFBb1JIuVymv7+fP/iDP6Cvr4/3ve99KIrCwYMHWbt2
      Lel0GtM0Wb9+PefOnWP9+vW3dPE0SaCapi1YI8uPoAMqSyD6Tb7gdzsToZ2WKZfLpFIpr6r0
      csJ9fl9F3iOY0lEqlTpmsUqzw1+/SDq1/mhVuzXV/FGqRCLhEfFKVpL041ZEBYUQVKsVksml
      Z9mVSkVOvfGn7X0AmQN/5coVjhw5Qn9/v1dctb+/n8nJSRqNBlNTU2QyGVzX5Qtf+AJjY2OE
      w2Fee+01zpw5QzKZJBKJcPjwYS8GLEdrt2zZcgMffWnIyFUnqSsR3B8OhxfUF/UfF5zFFjRh
      /L9l/U0hREtF6eA95T10Xffa3M5kC9rq7cyfYA1SwKts0c408TOXJH55neUsnheEvJ7fH7hZ
      aD6PumTIduzKBWbP/iWqUNszgGEY/ORP/iTr169nZGSES5cuUa1W6e7uZmJigunpaR5++GEu
      X77MwMAAq1atwjAMnnrqKU8irVu3zisjvmbNGtLpNOVymVdfffWW24My5Ah4Q/zhcNhjSn+U
      Q/72Q66w2MmW9UvMoMnkh3Q4/fH7UCjUNhVaTkwpFAoL7hXUBvIZJeT24Mhr8PnkqpiqqnqR
      Mmnm+CNK/nWK/eUxl/MehWjWOw0mqN0sBPPO/KhUKrx18BtMT1wmnU6xdvszywuD+jvRNE3G
      x8dZs2aNt62TBAvuHx0d5e233+bJJ5+8YanQK4GUvJIwwuEwpVKpJf4djIXD1UQxvx8hbW6/
      +dPOIfanMMhryXOq1SoDAwOYprlA0st0cX+WqdwflKT+ZDE/kXd6L1Ig+JeSko65zKb1h2b9
      4UwZ+pZjGEG0mxATnGQjSzbeKkFoWSZXLo9w6NVvkc72Uyy77N1/gI0bN13/jLDFzIc7FXJa
      oOu6zMzMNOvqT44jZqZQVq+FRFNaSdu50yo5qqIQdAmXiu3D1dXu/VJaEomEnP8qR2L9K7sE
      tUyQyTq9E7ldVriTRA1NLSdTtv3nWZblObB+jSPn4AafLcgAsv/8A6bLCfXeKLiuy2svfZ1a
      tcS6bY+xfv0GL+oVjUYXHwkWQjAzM+OV5wY4fPA1bD2KU5nl/v0P49hVjr79Dna9ypNP/8RN
      f6AbATmINzs7SzabRRw5iPibP0JVTGw9h/FLv4XSP+BJalmiRcIaHWfqz76KXSyS+8mfIPnI
      flBa84f88f3gwJs/OiM1YalUYmpqymtbPB73wqeyirMMffpHtqVGCBKVNJX8Wgnw5mpLc0za
      9f4F9STkGEY7gjVNc8m0dv/orx+3gvCFELx19A0cobL7gee8AERwjYtFGcC2bY4dO8aWLVtY
      vbo53Fyp13jnwknS1KiZLpY5ixZKY1Uri13qjoOcQKMKQePVb6OqJuODIfqvzGK//iKhj/8C
      0JpAJ4RAsR1Gfv/fUT91GgRUjx1n/f/1L4lsXt82XCmEwC2Vqf74KIn3P9baiHoN69RJlFiM
      1MbNXtFaP/PUajWmpqbIZrNeWoEf7cKS8v5yn5/xqtUqlUqlpeSjHPuR8DuRitKc4O+f7SbP
      kekXnbDS+P+N0Ayu6zI1Ncmxo28SMhQee/wZdP1qFm0QizKAYRg89thjLfZ6Mpnmmccf47Uf
      /ojJiTEisRAD3Wmc8K236a8HMsTnWhaoOgqQmraaRbS1q/a0jALJUKg1l8e8eAkAPaRg12rU
      Tg8T2by+bSQGQI1Fie7Y2nJ/US5T+Y//Gn3mHAIFc99P0P3pX/b62jRNb1JINBr1Uh3kdf0E
      vtTgnt+3qVQq3goz2WzWG9OQfoRklEajsWCtAukIy2VblxojupYaQyst0+73qWZnZygUiui6
      ytNPP4e2jOsseUQw7rt3734ANq3fsmjE406HDPPVLAv92U8gfvANYpVZnFVD8OCTnskhJ7tL
      O9vIpont2Un54GFsS6D3dBPbsbVFEvuL0SqKgqYoqLlcS+Fd8/gxjNlziDC4NRfl2MtUxj9C
      LZNtMuV8sposJiarOJdKJdLpNIBXCU7OR/abPPIZ4ao5JMuhyAxUCZnsJscSdF335g/4fQtZ
      WhK4KVEdee9OaPps00yMjxGLRentW8Vbx46yddt2DCNEMpkil+vqeH47XNeEmOsdJb7d8GLU
      6zZhbPinKPU6ejKJ6zMdhOtiXrqMU69jbNwAhsHQ73yR4is/wimWSL3vIfTengXXlX3TOHOe
      K1/5S9xana6f+hDx9z3YJMxsDgcNUbPRVLAjKRRdp/zf/gr7xJsofauJfvyTuPOlSuRAXjQa
      pVwueynMtVrNW+pVpl1484NRsC5dbp47NND0KaanMW0bp7u7pTiBP20c2hftDY5x3GqYpunN
      k45EmprxkUffd13XXDIKJB0HvzTJF/Jk0te+pM6dApmVaY+OUvjjP0TMTKBt2U3m059BicUw
      Gw0Kf/5V5r7+DXBdEk88Tv8Xf33BQtz+0Vo56BONRnErVc5+/p/QuDwKAtRohA3/z/9JeP0a
      bNPE/uErOK8/jwjHiXz0Z7EuXcT51pcQrkDVFJxtj9L3P/0m0fnZVJK4paSWg2pyCqqE4zjU
      K1Xm/uBL5L/3StO8e99D9H7mZwl15RCuizu//Gp/f39LKRTJENdatNdPRzej1tSNxqIaoFQq
      cfToUfr6+ti8eTMAtUqR3/v93+Vf/t6/InIbYvk3EkIIEILif/5TlJHTqCEQR35AefUQiY98
      FHdmjvzffBth2SiqQvXwj3EKRUSkWbkaAbUTpyj+8BDhoQHSzzyOGg55xGTPzGFNTiFcQIBb
      r9O4MEJkw1pQVaJPPwdPPAWqilAUaq+8AEIQiqqYVRcxehF1PqxavzCM+/ZruIks4cc+QM29
      uqqiP4dJKY7D5dcIz1QovPAywnZBgerrr3LpxFsM/fPfJr5ru5eVKsvFh8PhJRe4eDdiWSaQ
      X7ocO3KQ7lw3r7/5Fu9/aP9Na9jNhpfQ5jiIuWmEECQHDMrnLZzJiab08zmVqnY19UE6i9Xj
      Jzn3m/8bomGCAvXh86z69c959zB6uwmvXUPtzFkAtFSS2LZNC8OLMvVh+y7st76PWXNRNAVt
      0070SITaxbOoX/8/0CijqgqVyyfRPvFr3jiFzN5V6wXOvvnv+UG9jKrC9m0R9EqLDkgAACAA
      SURBVLeqKCqoqoKolMn//Qv0PXzAi9DIOQXBNRlkH93tWn4pLGrEJ5NJHnroIU/6A3T3r+V/
      +a1/xqrc9ZX1vt2QgyHoOsb9Tbu8fN5CaAaRAw8BoHXnyHzog6CpOC7E9t6Plrrq/BV/eLBJ
      /DR5pfjqIUTj6lREW1NZ/dtfIP3+xwiv6qX/s7+A2tt91aEOfGIPPYL+8c8iNh9AeeIfkPmZ
      n0dVVcxTR1CVMseTIYoFF33mOEq9meOjqqq3OJ4yc5bDVpkB3aHPtbnyeIZYRiWzSkcLKegh
      BT3VTBWQhN2J+P3HvJuxpAYIZgpu2tRMYtviY4q7Ef58msRPfZxa/yrsyyOE99xHeNv2ZiTH
      den6pU+Reupx3EaD8Mb1OL5xgfDQAFxVFBh9Paghg+rcHN3d3czMzJDQVJyLw6ilaWa//Meo
      hkr8mSdbQpmiWEBNpXFVFf3R96E/2symtebNEbWrHwWNjeMNQlFw9AyhaBwXrjq95SJuoUIP
      MF1XaCgq2xp1+jeG0QxQNTBrAnqzt92ZvZNwwwtj3S2QDqvruqAohB9+GN1pmga2czUFwnFd
      1KFBXNtGnfd5ZPJa5tknqJ05T/HVg4T6ehn49c+BqjI5OUl3dzdTU1O4rx/GmZ5qMo1pkv/r
      b6I+uJ/x6Wl6e3spFgr0njlB+PGnUeYdT8Wx0e0GSixJvVaD3iHqQ88QGj2MW3dg9W4a02NE
      BtY223/2ODz/R2hKmcc1OLe+m5DQSB6dw6q5NCpQmrVxLUH05LmW2Pl7HUuOBF+8eJGuri4y
      mQwAruvwvRdf5Jmnn+F73/07nnnug6h3qRTxz3OAps3raTwBbqPeJPp5ZtF1HdV1seczJF0h
      6Pn8L9Hz2U+BoYOqepNopGRWWuLaCoqmMzExSTQRb5YKsSzyu/bSN59uoc5NoB78MjV9iogz
      wMx0CnHyMMKIYOzaS5Ifo7ov4774OuaBf4y7aiPaa99AtfLU8y6RHo2176hoSgE7Lag2FHAE
      dl1gWy6ZtWvvEb8PizLA6Ogo+Xye6elpHnqoaRdPjV3i5ZdfYNOWzRw9eojMqrUc2L3jljT2
      RsKT/m3gVioUvvJlrNMn0PpXk/nsL6Ok0xQPHWbyP/4RimHQ/Y8+RWjf/c2BG10Hx8E+ewan
      kKe3p8+b+CNSacoHD2FfuoASjZH95CcIrV/H5cuXvRRxmYrs2DahY99iPDPGTNmhN3WJ9NEi
      9ZqNalbQzryEuzNKviJIh+pw5O8g/o/AMREOTaY1BWFtFOGCmlTQQjqly4JwT4L4fQ+y6hM/
      9Z43e/xYdBygWq1y8uRJuru7vfTnb3/za1hC48dvHmbL1l2oGvzcJ3/m1rf8OtGcPdSMrUub
      XmZxFr/2Verf+ipWw8UIq+j7HiH9uf+Bkd/4LezRywCo6SyD//e/JtSVQwGqf/WXiB99C1Vx
      sRIDRD//W6jZXHM02RUUv/cilZdeQEvEiP/Eh4g8sN8roe6Oj2K/+TpKPIlROMhI4grfnKjw
      iVUJcodKWNM2jimIdOlE749RKdrEExqX/6ZIYTpEdksfPV3jWNVm9EgNAQ1QDQU9pVLf+zkS
      Bx4lnMmg3eQ05HfVOEAsFmPfvn0t2z7woZ9C13U+9MEPe4Wc7kbIYXeZFQnMF0xyccZGcR2B
      WXdQFFCnJhDVKvbsLOGEiqIq1CtlnEIBunKIWg3njRcwjGZqiFEZxTpyGPOBhzl16hQPbN9O
      5W//GjE7jSUEhfPnEL/zv2Nl0oSKeaw/+n2UWh5UaERT9Dyg8nOrE8RLGlY1gUIeTVeYu+hA
      3CS5PszoKwVmzzeABvm3KzjdGo4t0KMKhStNH6Z7c4hYdBNdjz9FOJG8J/nbYMVOsMzVkElb
      d/PAiSyBYlkWtcYEf3P864wX53j/+hi9RzRiSVA0hdDeA5BMErtvN9UfvQ4KhLduRu/va15I
      0xB6CGGBY7uomoo1X+NzYGAAMZdHFPNXb2zWYXyCggLxS8Oo9TyF3hChCZOIZREZ+h+JmXmc
      9RvQD6SY+r1/jpKfxrYFU0egknuCqePfaibuKdCz2SC1ymDkjRrlKRtn3hyaONFg4Ln3E4ov
      TEm+hyaWXChbLtjwboSiKPMxcJcvv/7H/PnBl3ht+Ci/P3kE65d+mvCzP0niM79K6mMfQygK
      fb/6j8n+w0+S+4VfYOB//S0UORIeChH+yKewtTToEewNB6ht2OJlXao9Pai9q5r3RIFECjE4
      QC6XQ8l1g6oSylsYCohIGnf9Tuw9T1PL9uOGw7iVCo2qg1lzUFwbwnFie/aA0sxI7doQIppQ
      Wf9QlMwaA0UBRQFjcDVd73/sthK/EIKTJ08ueszRo0d5/vnnvfkOZ86cAZom6eXLl1uOrdVq
      3kKE3/3ud9umgwdRqVSYmZlpu29RDXD+/HnGx8fRNI39+/ej6zqvvfoKY5OTDKzZyMP79i55
      8zsdzcrIDsfHLpMKK0xXHXStTnF9D30PPdZc6IL5mkmxKKmf/UQz3wewfZUV1H0HiG3bgajX
      IZMlRPPlb9y4ERvo+p9/g8JX/yuVNw5j9A4SMS3UWBxn41bEQx8lfOQVSMQxPvKLqNEolUqF
      SCiE9dr3CWkWWlzDarig6oS2bGHoox+h+Nd/jXLsZRRRwQH0hEr3vs0kfumncCs1co8+SGJw
      1W1ngMOHD1MsFjl06BA7duzgzTffZMuWLbzzzjv85m/+JocPH2bz5s382Z/9Gbquk81mef75
      50kkEqxevZqvfOUrbNy4kXq9Ti6XI5PJkEqlePnll8lms7z44os4jsPQ0BDT09P09/czNDTE
      lStXuHTpEj09PUxOTvLFL35xQfsW1QCyaKl/iZp6vU4+X8S0Vl4t+E6EoihEo2me3LSLfEMh
      EdIYyOZYk9vk1fb0ZlPpOmqhgDo+TkhRW0ZxdcfBmpoDI4Lmy970Jpf39uBUGyhmHfvkccb+
      xe/ijo7iANoDT2DueBrngQ8j1mzwFvpzzw3j/N2foxsu0bRKJBUi/smfR9+5Hac0R3r8+2Ry
      ZYQpsEsK9cT9aB//FbqffoK1//DjJFcP3BEhz3PnznHixAlyuRwvvfQSU1NTmKbJzp07gSZN
      nT17llAoxIc//GEKhQKWZZHP56nVaqxdu5ZCocA777zDlStXgKbWWLduHd///vfZtWsXGzdu
      5MqVK2QyGSYnJzl48CAzMzM8+eSTJBIJenp62rZtUQ2wadMmzp07x5o1azybv7e3j7pp05VN
      38g+uq0wjDA/89DnWJcbYroyx4G1DxOPDHr75RRH69RJyn/4b1EdE7F+F/HP/Qokk9jTs1z6
      nd/HvHgRNZFg4Dd+jfD+PV7OkBACc3aWxjvHUVXQDBWrVqb21ttEH9jP1O/9Lu7sNIqqED7+
      fpKf/QyhSITGxBgIG6chcFSIZMJEHnkIV1FQzp9Ec4sQV7ErLpqho3zwFyF3tQ7pnWD3K4rC
      5z//eaLRKKVSiY985COYptmyas+nP/1parWaV7Drox/9KN/5znfI5XI8+uij3jyKSqXiVctw
      XZenn36aSqXSUrEun8+Ty+XI5/Pe5P5du3Z585qDWJQBEokEe/bsadm2c9d97Nx13w3qnjsD
      iqKQSvZyYMNHF8yu8grlui71F/4OxaqihEA5dxTr6BFCjz/B3N/8PebZsyiagpPPM/Wnf8Hq
      +3c2xwfmr084gpbrwhm7jNtwQdUIDQ7QOHoUMTtNrWSj6gr8+HXSn/o5bF1H27QF00gQSpRR
      VBADm1ASSdypafL/5eskIy56zMWIqDihDFoiQWg+q/NOIH6YX/QiHiU/cxFFuNQKgIBilWYO
      iTThBRTK4yBAQfD43mbKTeFyc+qpPKw8H0sQvvOCv6fnJkFAfrp1++XxUe/4SCZD99Ca924q
      RBCKopBKpZq59PV6i+mjqiqObSNklYiIgm1B8z8QpgVKM9/GdUC0WeXRiEXp/tXPM/snX8Et
      Fok/+RTa9m24pgWqgqYraLqKaznMfulP0NNpkk89gbtqK9bxH6Nv3Er6Ax9GffnPMc9cgPw0
      0zUHI6KS6A0T/+X/nkRXzy1d5Hq5KBUmCE1/Gc0uoVgOWDaqJZp/my6K5YIlUCyBYoFiCVxL
      IOY/rg2ODcIGxxK49vw2q7ndtZnfJrDnj3FsgSOPdwT2/DVtS+BYEPvEs3T/9hcWZ4Dx8XEu
      XbpELBZj+/bt86UFLY68+Sabt+0gnVxk8aW7EHJ5IrnOmKyq5rouqqYRed9TVE8fwyo6uL3r
      iO65HyEEmQ8+Q+Gl72NPT6EYIbr+wcdQfCvkyFz9yNYtDPze7yJsG2U+9UG7bw/hJz8AP/oB
      AgUrX8R57QcoQP37zxONuChCIC6dQXn1j9CyJqlBsK/omBcchANlK0vvzvvvSOKXUBWBprig
      uCiKi6IIFFwU5rch5j9NDaAIgSurXQjABded18yuaI50uzTnWsz/VlyB6jQJXnGY/wgU221+
      O6DYAsX2paAv1ugzZ87Q09NDpVJhfHycwcFBXv3+8wxt2oV2BzhXNwOSWMPhMJOTk940w0gk
      Qvz+fSS++C9wS0VCm7dgyzGRoQE2/Id/Q+3UMKFV/YSGBjB91d7UWgF3+O+xzDki/Q9hD+z2
      7oWhk/vMp3F+4gNUDr5B4S//P2yz+dJjaRvHVkj0adSmbYxEg+9N1OhTVXbuilCbBDcUI/Oz
      P09okeoMS+FW1um507AoA8i1bmUdewBXuBhGCE17dzIAXC0r0tPTQ61WI5VKNQtElcuQyxFb
      vbpp38/PyKpUKs2ygru2oYRCHvErioIC1I7+Cd8uDmNbgm2FE9wf+jWcnk0AqIpC8dt/S/kb
      X0PM1+hXteZ6trbZnB1WGncwwgpOFZ7qiqLqCm4jTfc/+xXCA4PE+vruiGhPJwigahlodrhp
      7tg2qiNQ3HkRLtx5yd+cvaaoAqExPzdb4Co0Pxq4mmh+bHD1eRPIAdeRplLT/HFtgeNIE8md
      /xbz5hGIyHyplMUaft9993Hx4kWGhobo7u4G4H2PP8fBg4dI7NpN9A7P87heyOrQiqLQ29tL
      tVqlXq9TqVRaFtxIpZqTg2TpElkxTQiBYtU4X71IuQ6zIQPdsrl/9gzMM4A7O0f561/FLVdw
      XYFmqKhd3eh9faSefQbryOuoczOE9j+CM9SFNvwijmLgPPIxUrvuuyElJm+25O/qXkM19k9v
      6j1WCt1o9tuiDBCPx9mxozXTUzdCPPrYYx3OeHdB0zRCoZCXMCfrZ8oQXtDRzWQy5PN5rwK2
      EAJXC7E63MsR8wp9lsVAXIX01bqqwjLBsXGlHatA12c/Q/qRR0BV4emnUAHTtrEdB3Y9jCsE
      rlnDLudRk9mbnuB2vVBVlcsXLxDO9BHBJN07yOXhE4hImq3rhzh14i30VA+5sIsS6WJ2bBg9
      3c+a/u5rup/r2IxcukJfb5bDbx5j5549nDxxnK1btlI3BYmwS8nRiUSWYIBKpcLY2BiJRIK+
      vr47upNvFuT6WbKgVHD1SH8xXUVprnNbKBS8ZZqEEOS2fopPXPhbalaBTO+DOH3bvRHk2OrV
      RA48Qv3VVwCBtmELsT17CM8vVuFNXZxPExBCUDv1CiMXvk5ZmGzPPUBy/y8Sil67D3Dz4ZLN
      5Hjr9HESTpGc0c3whXPs2fswIMhmujh68gROfwZbcZidqaJMnmWov5trobhGtcSpM1cYGOhF
      taqcOjdKOh7m2MFjzNk2g1kVQuvpObC+MwOYpsnRo0dJJpPMzs5iWRZDQ0OcOH6M08Pn2Lv/
      AGtXD3Y6/a6GfzK4XFFFln33awS5368JdF0nnU5TqVQ8s3Fubo7s/s+RBBylaavr8/U4Q6EQ
      Q1/4DQpPPIHbaJDav49oLge0miaypmW9MMPZC3/F28UCIdthSrzKc5d2YWx59I4VUEK4fP+1
      gzz93AeYPn+YWr3G7h33cezNt8g+foBXXn2dp557DlGdZmTcxG5UQL+2hTgAjEicqK5SrlTp
      7u/j7eNvM9c9yO51fZy6PErF0ZEzu1sYwP/ii8WiVyNG13VmZmaauRYzM7z/uZ/gu9/8K9b+
      zM9fcyPvZAQJSU4htCyLdDrtTUSXk2r8tTjl39IvAOa1QrG5TbheJWbpuEYSCcLvf6LtvYMQ
      Vp28aGBYNjUEtitw6/lFz7n9UNi9ewfFUgEivSSVOpZlsv/Abi5dGmP37u0US0WoN0iko/T3
      rkOPd12T9Acwa2WyvQnqdYuqqfD+p55kdGyccHcvj6xdg+0KVNo4wf7Ol5GPRqNBrVZjYGCg
      eYKm8r3v/C1rNm2/xubdXZBhUVnwqlareavP1+v1BccH63bKCsxyTEE6yYtVXVsMeqqbnckd
      TLlH0V3BXiONMXBfy73vNCiqztZt7emlr6fvht8vlsqxa1dTi64a6Acg19Xen1hyRpj0AXp7
      e+/Izp2YmGB2dpZcLsf4+Di7d+9eNCQoq6jJ+prLhazlUy6XvZyVWq3mrTwZJHr/eYrSXJtr
      ZmaGWCzGwMDAigrALmhHtUTj3Gu4jRLawD7i/esWDLrdLtxtM8IWZQDXdanX695KgXcChoeH
      yefzhEIh3njjDUqlEo888ggjIyPe4n1jY2Ns27aNy5cve4szjI+PMzAwwJEjRxgaGiISifDx
      j398RfeWCVmu65JMJjFN01tyKcgAwW0S9XqdRCKxYgYMtkMI4WWN+is4+82w24G7jQE6igrL
      snjjjTc4evQohw4dYmJiArg6mXw5ExFuBsLhMPv27ePEiRP09PSQTqfZtWsXQgjOnDnD1NQU
      pVKJF154gYceeoharcbIyAiNRoNCocDevXtxHIexsbG2a3MF4X9OKV1l5ehQKOT5BPJYf/8E
      +0jW87zeysqSuGOxmDfmYFkWlmV5kanb9X7uNnTUAMPDw1SrVW/RtNnZWR599FFefOHvKTdc
      Hn34YbqymVveYFlVLZ/Pc/r0aTZs2EA2m2V2dpZYLMbk5CQTExNs2rSJCxcukEgkvBTaZDLJ
      sWPH6Ovro1gssnfvyif0yNQIKcllaZVSqdR2rV5ggXbIZrPX3Q/BNglxdWkm/71utSa42zRA
      R0NUVoWW8E9+1zQd43aZRMKhmC+gAtu2bAAFKuU5QiEF26qRzSbJZpMIYOOmdVdPE2Badfbv
      30c4fO0vRUpxuLrYm6ZpJBIJSqUSw8PDxONxVFUlGo1i2zaRSITGfJqDfx2wa4Fce8C27fnZ
      bKpXyty/VvA9DbA8dGSAoaEh3nzzTW+tqlWrmnNa16xZy8iVcWzr9swTFsMHcV/5DyhJDSVt
      YOeiTKgKY6bFtA0zlsaMqTFrqhQaUKlbVKt1qrU6tVqD3/3Qr/HMgWfbXttxXDRNxXUdFFVb
      NAwXlGzS18jlctTrdWq1GoqiUK/XUZSrSwutxOwKSm/HcSiXy4RCoZZQrGEYnp8mhZZcsrXd
      ghn3cBUdGSAej7N//35mZmaIRqPk5gdnNm7aysZNWzuddtOhCYeYW0NBQ1FtLF0lpCporgUC
      HEfDVDTqaFQFlF2TilOnYteoWHVs4YKw+dZ/+SbPfvKnMcw8X/v2K+zZtoHh8+fp6e5lfHKa
      wYENPLB/+aFe13UxDIOurq62hNfOQe4Eac5IDeNfrCKZTHoDcnL94kaj4X2kuee/l/zczRU8
      bhY6OsGu6zIyMsLY2BiXLl1qWa/2roeis3XTGlwANcSG1T289eMT3P/AI1THRtn6wCOIenFF
      l/Q7wtCaJhFcPqnd+IF/f6FQ8CrGlctl73w5X0GuVyZLtUtnWFVVSqUSxWLRC8/KpZPuEX97
      dGSA4eFhKpUKyWSScDjMsWPHsG2b8fExGrbDqVMneenFFzhz9tytbO8CWNbKIx5Oo8rF8QnO
      vX2IE+fHqdYabL1/B+8cOcTavQ8wcuwgmYGhFbfFP53SL+WD7atWqx1LzTi+nB8hhOdPLHVP
      ufC1TMST6w/IwTv/YtfvdTiOw9zsLLCICTQ3N0c6nfaqG+i6TqlU4p0Tb1G14eyZUxiaxqkL
      F9i8ccMta3yjez35+34BDAXFUDl88iyDGwbpSsdIuLDaVWi4CqarYDpgOy6O42A7DrbtsGVg
      I1o4xrM/+WFsy0LVddSt8+3ftQuADWsXJ/5ONrp0hmu1WoutHyxHLssy+tMhJMEHl0FdbEX1
      oCklzSI/XNdlenqaarVKNpudX18r0uIwt7vWuxn1eg2BYOTSxc4MIBddk50iV0zUdIMHHzjA
      5fPDFOZmWbt5B64Qt6xCdKxvHbG+dd7vD9937StV6sucQriSGVPSIa1Wq5im2bK6uh+maXqp
      0zKyA3iFchuNBpZleVW528F/Xdd1KZVKniYAWlZ6jMVihMNhL2xrGIZn1spJ9HJ94Hc7I8Tj
      CeLxBNlsrvM4QKFQ4O233yYcDmOaJt3d3WzZsoVarUooHKFcKqLrBrZlkkxn7toS6TcTcsxA
      Rmvktk7HOo5DPp/3sk8HBwe9uQf+4zoRqByHaCcQ/Itf+6/Vrh1w7SuAvmvGAdLpNA8++KCX
      2y5HL6PzeefptJRM1xfXfjdDjhlIISKTC/37VVX1io7JcKkMacp8oeUObC3m6Lbb1+lawSjW
      uxlLrhQvc9rv4dqhKM0V56V5YlkWtm0TjUbRNI1qtUqtVqNQKJBMJr3c/2Kx6Jkn0pSKxWI3
      zUzplL/0bsa9ukC3EIrSLMkezASNxWLeWgEy1bpSqRCPxz1n2nVd5ubmAFizZs1NMS0kU8np
      nO95DXAPtwaKopDJZIhGo5imydTUFJqmMTk5SVdXF4VCAcdx6O7uRlXVlkjPzSLU94oWuMcA
      dwikvxCJREgkEl5259zcHPF43FsVXub/wM0lUplKcTtTq28F7jHAHQg52hsKhbw1BppV+ewF
      k/KXgsw/Mk2TWCzWQtTB8/0Dd7d7Ys2tgscAnab43WwEVfqdBv8E+NsFf5KboigtkaSlIP0J
      TdO8WkbXOhttuffz/307aGol8MYB7uEe3ot49+u4e7iHRXCPAe7hPY17DLAELMukXm+wEkPR
      MhvUG6Z3TnNk1aVuLj0Z5h5uLe5FgZbAN7/6XylVa2zevY+oLpiemGDbrt2cPH2WTRuGOHXq
      Aju2reP0yASruzLEsr289t1vki83ePaDz3Lu3DiF6XOs37kP13QozU0yuHYzo5fOsGbTbjau
      7b/dj/iexj0NsASEcIl19XLm+DGsWoFE3yAvffd7XBgZ4dib5+nP6vzRl/8zI2fO8sMf/Ij+
      7gyOYzNWqFOcGufooR+iJbOsXtWPlb+CZac49tJ3mWsonDl1/nY/3nse96JAS2D4zDCbNm9i
      eHiYtQO9PP/CD1i7ZSOjFy9h1S1cPcyOzQOcHZliVX8fO7dvZfjMMIrdYLpQYWpqmh07NlJo
      QE9Mw1FT2OUp/tu3v8Hmvc/y0Wceut2P+J7GDWOA9+IqI/VajfA1LEgnXIfZ2TnS2Rz6u3ih
      kVuNa0kLWREDeIcKgUBBVVsnZLzbh83v4c5GOT+LPTZFVLcIb961rHNW4AQLLgyf5tS5K3Sl
      Q9TdEN3pFNVKnl17D6BytU7+Pdx4+HOA7jS4rtuyTsLNn4AvOPX2jzGya9AaeQglWbu6n7Fz
      J5n8T3/JpvQMff/qz5Z1peUzgIBsJo2ij2JEs8QVKBVnsZUoIV1DiPb5Jffw7setZ07ByIXz
      rMusoVqt4xSqrF19bdG0FYVBp2dn6e/uJxWDqhtiXV8vrl2jYTuEtCbhzxSrvHjk4ooa8aEH
      NxKP3Ln5QHcCXNflhRde4KmnnmorYd98800mJyd56qmnCIVCnDx5ks2bNzMzM0Mmk2F0dJTD
      hw/z4IMPMjTUnPT/zjvvsG3btmULreHhYU6cOMGTTz7Zsv7BrYfCqsHVnB0+SzYmUJRrX0xj
      +QygKGzauqPjbqkCJ+aq/PHfHV1RIx7fveYeAyyB6elpXnrpJarVKvF4nJmZGS5cuMAnP/lJ
      1q9fz4ULF9i8eTNf/vKXKZVKdHd3893vfhfXddm0aRMf+MAHeOGFF5iamuJrX/saP/3TP83h
      w4c5c+YMp06dYs+ePdTrdS5fvsyqVasYGxujUCiwdu1arly5wtNPP83o6CiFQoHXX3+dt956
      i4997GNs2rTpNvSGwqrBNaze2o0hTNCaxQ1UVUOLRFDC0WVf6d5A2F2CQ4cOsW3bNgqFAi+8
      8AIf+9jHOHfuHKdPn6anp4dqtcqhQ4dQFIV8Pk8qlSKZTBKJRMhmsxiG4VWCSKfTFIvNwl+K
      orB9+3by+TyrVq1idHSUYrHI5s2bKZfLTE5OMjY2hmmaQHN9hVAoxOTkJEePHvUKJvT29t7S
      /sj1Dsz/dVVwrtv9ABv/3crCyjcsDCqjQO9cmuGLf/j8is790j/5KH3Ze5PrF0Oj0SAcDlOv
      17Ftm5mZGb7zne/wiU98gkwmQ6PRwHEcYrEYhUKBaDTqVbCuVqukUikajQa6rpPP58nlcpim
      2VK+UaZLRyKRlnkHclUcwEurbjQaXjU6WTfqeuA4Nqqq01xVeGE5SYlO5KooCmPnTnHqRy/S
      H8sxGFvNqXyz2MDQ5hPEU81lpJwrOtbRqybTPQ1wlyAcDjM7N0OpWgUBQlN57kMfpFApky+X
      m2QjBGJmprm/UAABk3N5QDA2PQMILz+puZ3530L+8x0jt3k7vL+vbhOsGxognbq+MvmuXeP5
      b3+XPY88zsWTb7H7wCPEIzonjh2h4YZY0xfn8myD+3du5OBrhwgnEtSLJWKZHI3yNFosx749
      OyjnZzh75Eeo6UG6MjZXRpu1lrKxH2FY4wBY50M0fnhV2N5jgLsIl6bzjIkcluNi2S6m42Lb
      7vxvB8sWWHazAp5lu9i2g+M4WPPftn310+m3/HYdB8e2cYLfroNjW/PH2fzhFz7MQ/uujwEU
      1UA3DEqVCoMDQzRqZcZGy0TDGno4ydHjp4knmmsqqCpMTUyRikeYnJgiK5nbYwAAFNdJREFU
      HdfIz0xd873vMcBdBQUUFRS8j1BAKAKhqKAIQEGgImgOVi78gEDBFZ2/F/24AleAM/99IyAc
      E4GGsC0mp8bIaCE2bRjk+y+cZvWmHHv33c/4xBTnLo6Qy6WId/UScqqk9QSGWyfiLq/CXzvc
      Y4B7uO1QjRjve/IJwtEIyqb13vbHn37G+zubzWHaDiFDp8n9wvfdRKq7nx2PPUtPJEM01s/6
      tc3IZHqdRjjZdPoNoWOIq47zPQa4m+DaCKsEjoviCFTHRXNchOPOb3NRXAdVuGjCxcbBwcVQ
      HBzFwVFdbM3BES4ODo4yf4zm4mgOjuPi6C6OI3AdgeuA44DrKDiOguuoOK6G6wgcBxxHQdNu
      zMBnJLp4nSNFVQmH/INtSuAbugaG6B74We/3TnmEsg8FpakThwQcuHqVZTOAcB1OnThOLN1N
      uThLtqefkKbTqFcYGHx3rhh/p2HH+rVsNpc/If5WIByJLbpfCMHFCxfoH1xNfmaSRLqLcmGG
      eCpLMh5jamKMRKab0twUqVwvpbkp4ukuYpEQjm1Rb9g0qkX0aIpUIsrM1ARGLIVZKRBOZLCq
      BfRwklQyxvljh3jlL/7Tgjbsyq5jKL6F8fRR1m0/1rJvRQNhXV1ZLo5OUi3lyXR18for32fr
      o4/huq5X31J+rwSOY3esl38PTaiqiq7Cm8ePs2fvAcK6wsWLl8nEDU6cOcfg6tWMXbnC9p27
      OXPibdZv20N3NnFN95qdGOHidJX7d2xh9OIZJgoW2ZjG5Yk8G1b3MZavsXlNN2cuTLJ/785F
      c4HM0hg/+PFJPtrdjVlvcOzcGzQslwcOHMBt5LlweQ5x4TRaqA/n8iV0PYYyOsP99+/k9PGj
      VEUSqzqLZoQ5sH8np8+MoKkmjhtC16/gWA20UJgDB/ZfW78u90DXtjh48McMDKxiYHCQyxdH
      GFq3gemxcRRfLPhaEqE0TfdKBt77tP+oqsrwydMMDK7hrZPDOFaDi6fPk+lZRS6uoUTSKI0y
      Zy+M0N2T4cy5Kyt+DxLvnLqEWyzScFxi8RQXh0/Qv24zwqlw4u23eef42xw7eZpoo8ic6Xor
      1bR7/3okx6aBNOfOXeTiyBj37d3Llo3rOX78HWyrQTiWRHFsIokkODaRSBy7Uebs8DCjM3nm
      5vL09mTIl4rYrkZfd5x82aQnFyVfqtDXlyNfWtlqPi3tW+6Bqh7iqWefRdMN0qk4a9dvQFVA
      3KhQwD0sCUNXmZ2ZxrUEpquia1Bv1BgrWjy6RafR38+FSyNcasAHnnvq2m/kNCjZDtVKBdsV
      xJMx8tPjhBMD2LUR+tIRLMsmb7msURf3ARRVwXYEW9cOcumSy9xcgUJ+jrVDfYzPCWJKidW7
      HmL6ykW27NzH7OgF+rbtoiuTYNOmDRSLNaYmL7N7927OX7yIrsD9+/ZSmr7C3n33U5wZZc99
      K1/u1mvfvZHguwfCdRgePsvqgQEsx2F0bIzevj6McJSQ4nDuwgiDgwOMj43S1TdIV+baFuSu
      luaYLNTpSieolouUTMFQTwY1EqdWmGVqrspgf4bRyQLr167mTkkArpaLVAtzC7ZHtRAhNYyl
      1QhFAivw3KrG3cP1Q1E1Nm/ZAkAUSKXTLfu3b98GcN2ZmrFklnXzvJNMJunz7TOyXaSyXQBs
      WLc8BrtVlaYb1QrTI61r1vVGM2irxnAA1YH6oRDCvtqWewxwDzcVjlXjxZd/xN79+7l8/jS9
      g0OMXbrAqg1bWdWV4sgbb5AbXMPMlYv0rF7P3PhFUj1rWTvQxYnj72AKjS1re7kyXWHzhtW8
      deQo0XQX1bkp4rl+6sUJjHgXWzauZfryeX74V3/Scv+H+7ax6vGXvd/lP0lD7arre2dOMbqH
      dw2EVadYa+A4DQrFKnMTl+ke2sn02BWc8gThrk1Mnj9GvHcrYxdPEfr/2zuT4LiStAB/b6l9
      X1RSaZctyfIi73YjupmGCJqOCeACB25cOHMm4EIEFyK4TASHOUMEBFy4zBygiQBiJujGPdNu
      d7ftdnvTripVlWrfl/eSg6SybJdsVUmyJCu/CFuqp/zr5cvIP/Nl5r94ouSTMVLpAuOj/Vht
      dh48fEKtVAazRalUY2X+GcVyg5WFBQqFMuux5Z7rJxVAcrgoGg6LynosgdfnIVMos/j4HkJR
      yRQN1ufvo9gDxJ59h2b3klp7Sl2oWC06iwtrnJ0YwuP1kM5lSWZyBAMO7L4AQb8Vh89LMOhD
      tfW23QvyFUhyyOgOL3NzH+D3+bY2SlRM06DVqFI3NT7+7SjKVi4CVVURpomiqiiKgu/KVQDO
      X7zEOaNFNl9kamYWRdUQptH+Ob3ljmm1OwlGX05xaw9F0BwvzCusIx5E/S1rANM0mZ+f5/nz
      53zyySfH1hlbcjLwby3Wt/uRpmloDjc7HRnb4d93OUdSNZ1QMND+rHQoPzh5noGJvwRA1wVK
      Y/svf9Iu4/mLl7+3owIIIbh37x5jY2NHHhtfcrIRQvDs6VMGh4ZIJBJ4fAHq5TzuQBi/x018
      bQVvqJ/8xjqBvij5jXXcwQhuh4342gouX5haMYPV5cfvdZGIr2Fz+6kVszi8QRqlLLrDR8Dn
      ZvHB3bYpxO/8bhr9H91gvHn3qaMCPHr0iFarRSwW4+bNm+0HKZeKWGwOmrUqNqcLBTBN41gn
      uJAcLc1inF/dn+cPB0fw2lQWF5cplYrcCA1g1rLEUlVWVr7A6hpmNf4VNruX9WSOK5fPsriU
      RFXXEcJA1eLcvjnLwmIchQVMYUfV1hFGE1W3cPv2zZ7q1/Hd5sKFC4TD4ZeTsZkGyXiML/73
      c75//JgH9+/z4KtvePDDs95aRnIq0OwBJof9LCyuEE9kuXB+kpmpMzx8+JBWq4lutYFpYLHa
      wTSx6Faa9TLzy2kG+pyUqnWi/SEK5TItUyMa8VKomAz0uSlVqgxGwxS2Mt73wq6vQLlcjlu3
      br3kM7qRSnH+/BSFikmtuMH6eoyxazelMZykzavGcIqmY5oweXaMZr2GzaqTyaQ5MzbIek7g
      sVQZuzzHxtoSI5dukIkvEr1wmYDXybPHD7l+4xrZxAqXL19mcXkZTZhcv3GNXHKFa9evkUut
      ceXqAZtCCCH47LPPAPj00083EzW3mjy4f59AZJByLkGgfxSLqlKvlRkYHNxcvUtTCMkRUi2X
      qJeLADhdBkpe3ekv05GOM0Cr1UIIgRACwzA2rRF1C5evXd8sMLQzCtfmCl8ulSW9clCmEtVi
      ntjTB+3PFotgWGthpHa3UO6oAKqqEo1GAd5BnMf3D9MUGF1ayVr007nVbBoNfvGLLzh3aZaN
      pecMn7/CyuP7eCJRqpk4Vu8Ak+ODPPz2W+yBEM1CGsURxCxvoHsiTIxEUBQLuq6Sji3x5c//
      pf3dTqeB11GmeW93b7OOCqAoCslkEnh3hkzvE3eeJvmnXz7dc3ldVfj7P/vwEGt0jDFNyvUq
      pmEy0Ocil0li8Y9Szi0jVD+NUgHR8KC6IlQLCQRu9EqapupFlAvcv7uE4unn2sWpnm6/6yK4
      XC7jdrvlOYDkkFGwW6ykUklEIU7Do9LILuIJBahll9HdEZKZPNn4Cnafm1YxDnYfZnUVzRXm
      0uwVFG3voRBfZdcZwOVyUavV5Cmw5FBRLTZu3b6Fz+tl241927dEiAsoCmSzeeY+mmtHi9v5
      c+fbic3ppm/0bPuzw2FisdZQSruHTemoAPfu3aNYLOJyyZ0ZyeHje8V/YXvQ3e7cwZ0mEDu2
      5V9laOoiozOXu7p3RwUol8uUSiUCgUCnP0skh4IQgpZhYHklzqhhGCiqirrLWrTVaqHrOk82
      knz27ElX9+yoADdv3uTWrVvY7W+O1SKRdMt//ee/MzM1SdMZopSMoWkthDXE+TODPHn0gFS2
      wOjZ85TSKcKRIKl0Dp/bglCdVCoVwkE/VotGsZDDUO1oRpXnSyl+66NbVJtN4l06yHdUgLt3
      7/LDDz9w8eJF5ubm2tdPSyK8Xhb+73ubHBTR/mGWnj9BuMOcnZrgm6++5foH58jEV7G4g9iL
      OTKZLLlkkkq9xbAfVopgM9IkEnHqpRD5JjRKKewuHy67laCvN99n2EUBPvzwQ5rNJs1m88Wi
      wzS5++UdZi5f5Zuvv2Ji+hy1fAWhCiYnz/RcgePItyt5fv5tfM/lNVXhr35/5hBr9P4Q6u/H
      47aguv2sPpvn0uwlMql1Jkf6WHz4GF/fIE6HF1HOUW1UWcnrnJ0YJJPO4PP7GRmJUl1IEB0Z
      oaXYEdUcrX1s1OzqEGOxbK6c24sOVSU6MIhhwlC0n8TaGon5JabmPnrvbIG2gzx1w876m2b3
      bXCcnn8/vC1JXv9ABNhMpjHU/3Jerxs3XgS3Ghrsp1qpYnc6UIDgliN+uZjn2tVLWC2v32PY
      5+ePLh7AIhhgYmKC4eHh9mfTbJHJblA1oVKuEgxHGBkep1otoqh9aPSeIXA7MNY2P7ufoNXF
      SerVIS9nwm8O0dcNvWz97qy/qnbfBjvlDdMklql0Jd/nc2Dv0ClOMg7n6/v7Lo+vQ8lN7Jog
      4twcSIZ8w1j1t+cO21UB7ty5w+DgIHNzm/uvqqoze72TzXUQOFhboHihTtPY+zdO93U/4h5n
      SrUWf/ez795ecAd//uOLTEd37xzHA8Haahyf34PD6UZTFZqNOqpuRXtDgK1CLo3dE2wnYnyV
      9EaaUDjEd/Fv+OnnPwHgb//gJ4wFJzqW38muJ8G6rlOpVDBNU9oDSQ4Ik+9+/StCZ84SdtqJ
      ryfR1Sbe6BQRp+Dpwiper4eN5AaGamGw3082kyUQCmEmUqQzOXxePz6XnWwug9DsiEaJQhk+
      /lGopxrtehKs6zrlclmeBEsOlPHJKR49f4Z1YoyI30ZJ8REI+NhY+p5SpYJusTMYidBQLVQr
      FUIeK8WGSb1SJux2oOmCR4sJ1OYGrsAADlXB7TzgNKnb0X51XZfGcJIDROXM1CQjE+NYLSqp
      TJ7xkJ9socrkpau415MEQmE0BVBUlubncQajjAe8mKZBOlvERgPd4Sfsm6baAotoYqi9u+R2
      VIAnT55gmiY2m012fskBomCz27BtxYMYim4uciPhzQPXoR2bLgBTM+dAUdopMAajToQQBFFQ
      FHh19//26By3Rn8DAE3R9rQj2fH9Zmpqimazic933BdVkvcZZUfnf+naLmOypmrYLDZsFls7
      VPvb/nVUAEVRqNfr0hRacqLoZb3aUUJVVfr6+no61JJIjgpFUWg06rQM46XD2Tex6zlAMBhk
      YWFBboNKTgxmq8HXd++i6zasqDR0jZvX3nwy3HEGME2TWq2Gz+drL4KFafL1l3coVyrc++pL
      5pdWia0lePZMxgWSHA+EaeILRbDqsL62gifY91aZjjPA2toa2WyWWCz24qKi0NfXTzGfwRMe
      pZpP8vD+I2Z/78dHbgtkmOaB2tIctS2Q0cOzmFuZ24+aXs1hDgLNYkMzazjDAwwOn6FWK7Wz
      Ce9GRwWIxWKsrq5y+/btFzOAMIitLuPpi5JPr+Pyh5m5cZONlQXG+q4eqC1Q1/JbSdoOiqO2
      BdL07hVQ3UpSuM3f/OuXrG6U9iz/6fUx/vg3J7u+77FCUZieubTjwtsdujr2mhs3bjA7O/tS
      R1BVnQ9+9DEApjn5mj+m3C86XtSbBrXm3meiltG90r0PdFQAq9X6xoC30jxC8r4ge7LkVCMV
      QHKqkQogOdVIBZCcamSSPElHfvpvv+Sf/+PXey4/NdzHP/z1nx5ijQ4HqQCSjlRrTXLF6p7L
      Fyq1Q6zN4SFfgSSnmu5nAGGyuDCPwxvE7XDQajWk34DkxNK1AhjNGstr61wOh/n68/8jODGB
      1+vdEdG3+xPFbRfMXjGFeEn+fqpGorx3u5g+p8aVyIsQHL34Qey8f69t0On3vSL22YbilTYU
      3Z7tixf1PkkHpT14EFiYmZ7i8cPv0XSd1jH0GTidfjzSdbUXup4BVFWlkM9x7tIVLKpKq9kA
      RUHdSm+vKD3olKrua9RQt+6/TfduzK/Kd9+ZXpbvrQ06/b5XFFXZVxsqr7ZhtwqlnKyRf5uu
      FUBRNSanz+24svnqcCoHXcmJ5+SprERygEgFkJxqpAJITjVSASSnGqkAklNN17tAwjR48sND
      /P0jWBSNRr3MwFZWeYnkpNH1DFAt5VDtQZIri3z5P/9N2ZCTiOTk0nXv1XUL2Y0YTaEwNDpG
      OpWUZwCSE0vXr0BWp4fz56axudyooje7FYnkuKCIA4iAux0YS1EUqo0WS+v518qIrf87HbFP
      DgWw6BqmaaKqKolCnU5qtVuuAp9dx2l9IV9umh1TLO0mb1EVXFb1hXy9Rabc2MOTb6IoCsOB
      F8Z0xWqTVOF1W3ohOptpKIrCRMTTNsIzTMFyutz5Zrt8SdTvwGHV28+wnCpS7xAWZbc2CLht
      hL2OtnwslSeZLe5Z3m6zMDPWjxACTdNOTFj9A1EAoG0Nup8HNwxjX1HFjlp+vwghEELsy6bm
      XbTBm/JFG4bRtgs7CRyYAryJarVKMpkEoL+/v6cM9Llcjng8TiQSIRTqPh9UrVZjdXUVXdcZ
      Hx/vWr5QKJBIJBBCMD4+/sa4SZ1IJpOEw2FqtRqtVguv19uVvBCCpaUlTNNkYGAAp7P7rJgb
      GxtbJuuCcDjctXw2myWTyaDrOiMjIyfS+O1VTswTxONxKpUKDsfrqTP3QiKRoFKpYLP1lk8q
      l8tRr9cxTZNSae8hB7ex2+3Mz8+zurra0wDQarVoNBr4/X5SqVTX8gCpVIqlpSXS6XRP8tls
      lkqlQr1ePzEj/Nt4JzMAQD6fZ2Njg2AwSCDw9piNnTAMg3q93tPoJ4Qgl8uRSCSYmek+q7th
      GDSbTYAjSR0lhCCbzQLgcrl6VuT9kMlkiMfjWK1Wzp49+17MAO/UKV7TNBqNvS8uO8n30vlh
      M+9ZLpdjenq653sf5fpAURSCweCR3R8gEAhQLBYZHR090nocJO9EhZvNJtlslmKxeCQjF8D0
      9DSzs7P7UsDTTqFQoFarsby8fNRVOTDeyStQo9Hg6dOnOJ1ORkdHZcYZybHhnbwCKYpCX18f
      iqIc+VajRLKTd7YIlkiOIyd/GS+R7AOpAJJTjVQAyalGKoDkVPP/RgGdz2EqTBYAAAAASUVO
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      uHm4WcEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
      HOsLAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAexklEQVR4nO2dd3Rc1b3vP+ecaZJm1GUVy7ZsyTY2GEyxTbETIHQT8ig3kAIhQMoihcW9
      JJCb3PtIiJOX3MW976705PISUlgJJJCYapqNbdwrxpJtWVbvZZqmzzn7/SEMxraqp2jm7M9a
      LBg02nvPaH/P/v1++7d/WxFCCCQSk6KmewASSTqRApCYGikAiamRApCYGikAiamRApCYGikA
      iamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikA
      iamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikA
      iamRApCYGikAiamRApCYGikAiamRApCYGikAiamRAsgwjKifgw3HEIARC3Lw4FHkNZ9TRwpg
      kkQiYYQQRCJhYpEQHo+HaExPWf973nie737vB/QFdQ7vfIt/e+QR2vzxlPWfbSjynuDJ8fOf
      rOHer3yD3/z8P6lVNV7viWEnh8e++yCakuTOheCH3/53ymZoVF58Ox1vPYuWA7b5V3HX9SuS
      3Hl2IleASTLQ38KvfvkbGpv6MFQLReXlxNRwSvqOBYYYCgRxlVSya8t2Wjq6yS+r5sjePRjy
      OTYlLOkeQKZRUjaTe754H//z8x+jYCHo92Fx1KIm++kPYMvj6498i1kVRTR1dqIZ11EzawbL
      urpS0Hl2Ik2gSVJ/cB8LF5/LoUMHKVCtOGbP5+jeHSw450KK823pHp5kkkgBTHPCoQCBYBhX
      QRE2i4oei+DxBcgvKMCIhQmEYxQWFuD3eMlz5ROPRbE57KhKKpakzEeaQBNACAGKwlhTSgiB
      koRJt2HdWrr6uxlwnsU3P3U9T//0v+jRNayFtUQaX8ZwlbDk3EW88VYrS6++luCR/dz1lS9g
      1xI+lKxEOsHjsPHVP/GdR7/Hj554DoCezqN8/jOf5FjQ4Nlf/YSHv3wnP/zZL/jho2v43dPr
      eeZXTzAUMRLW//JLlnFo7x4qSqoACMfi5BQWcaB5D+GgoKWtEyV/BiElTtPOV+kKuVn/xt6E
      9Z/tSAGMgz0YYMjrIeiNAlBYXMXKS1YQFXDLl75KTUUtN12zil5d5+jB9TR4+ti5cV/CNqcG
      3BG+8a/fYuvmzezdV89Nd99NdZGFQmcF7qiDL955M0eH4N8f+BTz5y9htquYY0d2Jaj37EcK
      YBx2NRzigYcfpq2jnfb2Tqw2OxZVEIlE8fUeZdA5g8V1Z/P9h+5n8dx5VOQU0np4J4lyrfz9
      Haxdt41HvnongbDA5xukd9jOQ/ffx+fuuZm9LSE+ff01xCKCq1evZv5Z1az8+C0J6dvb00lj
      R39C2pquSCd4HDobd/HMK9tYcOFHEF4P587N4S9r36Ss7mwuqy0jmj+PxXPL8LQdpEUvx33o
      bYZds7nxsqVJ8QlSh+A3/+d71Ied/Mf//mcsGf1ZRkcKINUYBoQjEI2BHodYHOI6UZ8XQxgo
      DgeKzYpis2EpKUGxpCdOIeJ+7v/WDykJh/jKYz+gsjAnLeNINjIKlCyOT3S3FwaGwOsDfwD8
      wxCLgSFAfPCPd98OQgN9oKojESdVQbHb0UpKsVaUY6mqwja3BtucOWhFRUkXRlv9HoqLi5kl
      Btmwr5lPXb44qf2lC7kCJIrjk7m3H7r6oKcPfH4ITSxNon/vdkL9veO+T7HbyT3HSd5FlWjV
      y7DMuRSsuQk3t/zefgxLHi6rTt9QlIqKkoS2P12QAjhTdAP6BqC9E5rbIBCaUjMTFQBAXl0r
      thLvyAuLHUvdVVgX3YRWdT6KLXdK/ZuVrDOBQsFhfP4AuXlOXM685HQixIgN39wGh5tGzBwj
      cbH/MVEMLM7gB6/jEeKHXiR+ZB2KqxLr4k9gPecWlLyyCa0KQugMByI4c+0MDg6i2nIoKnCh
      CIHP6yZqKJQUFTLsdRM1VAqcdnyBCEUFLkLhGDm5jjE3CKc72qOPPvpougeRSJ785RrebRlA
      0xzMqipPfAfBEDQeg007oKl1xMRJwCIa7OkkHgyM+z41J4KjcoBT5rYwIOJD79hBvOF5RKAP
      xVWBmls8RmuCt555gh89tYXrLpnN7596kb+9+AwXfeQa7KEefv/kH3nt5b9SWFXBr3/xSzQl
      lwO71vPiGxtxKkH2dYVYOKcyowWQhfsAMULhMDF9aqbIaMRDEYx99fD3V2D7Xhgef7ImA4sr
      AMrYghOhIWJ7/0jwqTsIrfsOhn9002rlzXcz26Fhd1VRW21lsC9Mrgaas4Lrr1mF11+I7mvl
      UHsfG97eihGzIxTButff4d31/6Ddn7rDQMkg60wgsHDjTZ+gPD8/Ia0JIehr7KLh1T0sMPxU
      5ilpjO8LLK7AqU//0YiHidf/Hb1tG7bl92I95zYUzXpic0QjQQK+Ydwdx6i9aDXn7zvEwaYW
      nPEwv3ji99z/4DfIibWyauW15HiaOO+qW3HuXMtwxIfFb+WtQz7uXFaUlE+bCrLOBHLmu9i2
      eRtY7FSfoQkUGPKz/+/baHhtL5HhMN6owZx8LSmZlhMygVSDnOpeVOskn7rRYfTmTcRbt6AW
      1aDmV733A8GmDetxuCwYaj71u96m+pxLWbWwgKEhBZfdoLmlmfkrriRnuAv77KVcct5shOJg
      xfJLONLm5bZrlmZ05qmMAp0GYQh6DnfwztrthH3BD/3snBKN2sLEp1pOJAqk5oTJX3Jk4ivA
      6bDmYlt2L7aLPo+iyfMLWeADiJPybj78+vh/CyEmlKAWj8ZoeG0vu/+y8ZTJD9Do0QnF0/PM
      mJT5MxqxINEtPyH84kNj+gZmISN9AF/7Eb793R9z72M/5fDzv+adxqMsu+ke/teqpbz8xA/Y
      3hlm7qLlCH8Hzc0dLFh5JQ2vPsP5V96Jp/8gn/nMfTisp2o/5Auy55nNDBzrGbXviA6Nbp1z
      y1L/1VkL/AlrK970Jnr/YRzXrkGbeWGG5y1NnYxcARwl1Vy5dCkxHXp6u3n44W/zztZ6ACJ+
      gdfjxmfY+Oydn6fKEiffAVG/wrvbt9LSNMiWfftPadPbNcTW374+5uQ/TpvfwB9N8SqgGmi5
      iT18L3ydhNZ+Db317YRlr2YaGSkAi92O0A2i4Qi6An29ndhzLXR0dLHncBcPf+NBOlv28Nhj
      a5h9+e1cc+lH+c6ab1E6r5DqeTW8s+3t99sSQuDuGGDrk2/g7/NMqH9dQMNQPKWVGLTcEKot
      mviGI35Czz9A7J2nE992BpCRUaCutia2HWygt9vDDR+7mFc3bOHWT/8TnQ31XHLJWTz/2hau
      vHo1atxHT0cbwjkTR9zLgsXL0YZaqVqwnDnVMxBC0Hu4k91/2URkeHL7BoEYFNpVnLbEmA7j
      RYFsxV5sRcMJ6esUDB29dSuK3YVacY6pzCFTR4HcHQNs+/0bRAORKf1+sUPh0koLWgJqoowd
      BRLkLWjBVpQ4H+C0qBbslz+C7bw7ktvPNCIjTaBE4Ov1sP0P66c8+QGGwoJ2v5F8+1kRWPOT
      9PQ/ESNOZNPjxI9tMI1PYEoBhHxBdv1546TNntNxxKMTS3IenJYXQtFSNCFjIUIvP4zeviM1
      /aUZ0wkgHo2x86kNE3Z4xyMUh2Pe5ObDJDL8OSGiAcLr/hXD3ZraftOAqQQgDIMj6w/gbh9I
      aLvHvAa+aLKWgZH8n1QjhnsJv/5dRDwJkadphKkE0NfYRdPb9QlvN2bAkaHkrAKKJY6WM3U/
      5UzQO3YQ3fYzhEjRWYc0YBoBDA/42PfcVgw9OX/M7oBgKJz4trXcCIo1ffX/o7ufRG95e/w3
      ZiimEIAQgoZX9xL2J/aMwIkYwKEhPeGbYxbX8Jnn/5wJRpzI5v9CRFLsh6QIUwigr7GLroPJ
      d+j6Q4LuQGJXAYvr1IS8VGMMHCG667dZGRrNegFEQxHq1+1JWX+H3TpxIzETRdHiaHnpFwBA
      dO8fEd72dA8j4WS9AFp3NuLrcaesP38Umr2J2Rwbif9PEwc0FiSy8XGEkV33kWW1ACKBcFKi
      PuPR6NEJJyAoZHEG02v/v4eORnNuLb8zFtDi8aZ7OAklI88DTAQhBK27GokMp+b+rhOJGSNn
      BpaUameQWCaw5Kfn4P0HI4AuRzWbS6+gybkAQ7GwufUYNUXFWZMwl7UCiIdjtO5sTFv/bX6D
      2S6VQsfUJopi0dFykxe1Go9BWynbilfxTsEF6OoH06Shr49On5fqgsK0jS2RZK0A2vcdI+hO
      QQLZKOgCDrl1VlRMrYqElhea/OH3M0QAHmsxu4ouZm/hMqKa45T36MJgU8sxbj/3/Iw+DH+c
      rBSAMOL0NjSkexj0BQV9IUF57uQnisWZWvNnWHOyrWQl+wsuImQZu6Legd5ubogsosCR+RWj
      s1IA8cAh5i/+HaWlpfS01OEbKiUes6d8HAJoGNQpcShYJnVmQGAtTM3GU1i1s7/wIjaXXEFI
      y2UiXrduGBzo6WZlzbwUjDC5ZJ0AhBBEh95GVaOUVHRRXN5FOOikr72G/o45hAIuSGExP290
      5MzA3IKJl1JRbTFUR/KS0AQQU6w05C9he/FK+uwVE5r4J3Kgt5tLZtegqZkdSMw6ASB0ou7N
      779UFMjJG2bOWe8ya349noEZ9LTW4e6rxNBT8/EbPTpVThW7NrFJpuWGUbTk2P9Rxcph19ls
      Lr2CQfuMKbfT7fMxEAxQ7nQlcHSpJ+sEEB8+iIiePt1Z1QyKy3soKuslGnHQ2zaX/o4aQgEX
      QiTvSRaKQ5NHZ1HxRMKiAkuBP+Hxfx2V5rw63iq7ih7HTIRyZp83osdpHOiXAphuxHynljw5
      GUUV2HNCzF5YT/X8Q7j7KujrqGGoeyaGkZyvpMlrUFOgkTuB5hOZ/y+AHkcVm0o/xlHnQgwl
      cVXtDvR2c9mcuRm9J5BVAhBCJ+47MKnfUVXjfV8hEsploGs2vW3zCPrzSaSvYIgRh/j8GWPX
      FlWs8YTU/zFQ6HJUs61kFYddZ5/xE/90dPt9xA0Dq5a5t3JnlwBiXvRw55R+V1HAkRukuu4Q
      FXOaGPYW0nl0Ed7BGehx6/gNTIDOYYM5+SqlOaML4EzTnwUwZC3h7dIraMhfQkxNXv3PSDxO
      h8/D3KLMvT4pqwSgh1oQ8TNPfLNYYxSW9lNY2k80bKentY6B7moC3rEumxgfATQM6VxWpYy6
      CpxJ+vOw5mR78Ur2Fi0nrKUmRn9koF8KYLoQDxxJeJs2R4TZCw9SXdeAZ2AGfR01uHurpryv
      MBQWdA0bVLtOYzYoxqTtfwEMay72FS5jd9EKhq2JuRdhovT6M/ugTFYJwIiMX9dzqhyPIBWX
      9xAO5DHYM5Ou5vmEA5OfcIfdOhV56imbY6othjaJ+H9EtbOncDk7iy/BZ03PJRVDoSBxXceS
      oX5AVglAD7WlpB9HXoCZtUeomteIb6iEntZahnpnEo9ObFUYjo3sDSwq/vDXP9H8/5hi4bBr
      MW/MuB6/pWDSm1iJJBCNEI7HcUoBpBdhxNEjqa13ryiCgpIB8osHiIZzGHpvVQgFXAhj7AnR
      6jOY4xLkWj+YvONVf4srGsfy5rOl5HI6c2YlJbIzWfyRCMPRCE576lNNEkH2CCDuRST4YryJ
      oihgzwlROfcoFTVH8bs/WBVikVMzKmHknoEjbp3zyj7YHBvN/tdRaXIuYGvJR2nPrUnWx5gS
      ghERVGToflj2CEAPgEj/jYWKAvnFg7iKBolF7Qx2V9PbNo9hb9Epq0Kb32BugUqBXUG1R1Ht
      H7b/jx9I2Vj2MZrz5id0EyuRBKKZWzwriwQQYqQ4yfRAUcBmj1BZ00T5rGYCvkJ6Wmvp75iD
      ro/sKwhGSqksq1BGLr9WPzhH7LYWsan0SurzzyOuJmYfIllE9cw9J5w9AjCiI5dFT0NUzcBV
      NISzcIh5S3bT1z6XvvYa/J4SeoIaPQFBgSuArkC/rYztxSs5cNJJrOlMKC4FkHaEiMKErsFL
      H4oCmmaMrAqzj+F3l9DfOYem/jnU5dvZUriadwovIKzlpnuokyIcj6V7CFMmawQwXZ/+o6Gq
      IxGkgpIB+obr+b99dRj5K1CnublzOpQUnq9INOmPoyUIRbWTyoMuiUIIeNUfoz16hH7PS8Ti
      iSnbnkpsGboHAFklAAdMg7j4ZGkJK+zxjYw7Gh+g3/My4WhXRpUhlAKYDqg2Mu3jGAL+1msh
      Kj5YuXQjSL9nHb7gvowpS+6wZK4lnVkzZgwULTejVgAhYJdPpSV8OrPNwBfYw5BvI4aRnrsB
      JoPDmnl+y3EyZ8aMg2otes8PyAz8Orw8oDGW3xKMNNHneYlofCh1A5skClCUM3rUyogGePOV
      tbz06kYisfRvVJ5M1ghAUa2o9vJ0D2PCbHBr9MfG//pj8SH63C8QirROS5Mox2ol1zr6oRt9
      uJttWw/Re+RtXnqnOYUjmxhZIwAAzVGV7iFMiK6Iwib3xB1HIWIMeN/EG9g97UTgtNnH8QFU
      utub2N/YTmHe9NvfyFzv5TRojlnpHsK46AJe6NcIGZMN2Rr4g+8Qi7spdq1EmyabZQWOHOxj
      CkCQm+NiZqmLnoH0Fvs9HVklANVRne4hjMuhgMqB4akvvOFoO32elyjO/wh269Tr+iSKmfkF
      Y/7cUjCbr37zK+hYqa6efit0VgnAkjcfVDtM08hJSIe1/RriDDfs4rqXfs86ilyXkmufi5LG
      6FdtydjngRXNyqw5c1M0msmTVT6AaitBm8arwFavRmckMbvVQkQZ8r2FZ3g7hkhPMppFVZlT
      OFIoQBhxOrv7EULQ0XKUoy0d72dmCWHQeuwYumHQeqyR1q4+4iEfjU3N6HqMwQF32rK4smoF
      UFQblrw69GBTuodyCv44rBscO+w5eQTDoXriupci10osmjOBbY9PpSv/vV1gwebn/sBvNvXy
      ux99lh/+7ElmalFufOj7nFtq5dC2l1jzq7U89tiDPPHbf2CNDVBWU4ehh1laV0ufo4qbP3JB
      Wo52ZtUKAGAtXJ7uIZyCIeCFAQsBPTl/4HC0kz7384Sj3UlpfzTml5S9d5pNYdWtd1PrykHR
      8vF3HGZ/xxAVeRrRgJs//30bnzh/Cf3H9nPBpdewuKIWxVKIPxjk9S31vLvuGQ72psdBzj4B
      FCxD0caub59qmkMKO73J/ap1I8iA9zX8wQZECk7GaYpCbUnpyAsh6Olsp7e7m45DOyheuIqL
      6yppaGpiy65miooLeHPHNrqNMur37aClv5kbb7+N82vncPH5xZQXlfBuqy/pYz4dWWUCAaBY
      sBZdRnTg1XSPBBh5+v+j/8P5PslCiBie4S3E4oMUOpObWj3D6aKm6INCYb29vdx02+V4tbO4
      61oNH4VcNq+Q7sIyLv/o+fR3dFJQVcnsXAdKwdVUOzXEBZdSWVXBtk07WHFhejYxFZFJaYcT
      JOrZwfCRR0n3ARkhYKdP5Q/dljOO/EwWm2UGxfmrsFqSc5fXdQvO4op585PSdirJKBPo8Ye/
      wDf/5SF2NjSNObUtzsWoZ1D7PlGEDHh5IPWTHyAa76Pf80pSUqtVRWHxjIqEtpkuMkoANls1
      a77/Hdb9+WnG+puqFie2kitSN7DTYAh4Y0ijP5a+Qzq6EXgvtXp/Qv2C2uJSSnOnl581VTJK
      ACIexzs0CJy+1s6J2MtuQElxWPBEeqIKmz3T4aCIgS+wmyHfJnTjzMuuq4rCZXPmZvzVSMfJ
      qE/hKhb86v89w+1f+jTj3Tmn2kqwlXw0NQM7DS8PaEkLe06FYKSJfvdLxM6wenalK58FpWUJ
      GlX6yUon+Dh6qB3vwQfASG3FuMMBhZ+2W9Ni+4+Hqtgpcl1GrmNq6QmfXXohSyqmX07PVJmW
      K4AQAiGO/1uc8rMP3iM+9P9ORsuZha14VXIHexIRA9b2p8fxnQiGiDDo24B3ePek/YJZBYUs
      LE1/cCGRTLt9gN1bX2fDlr3Mu/g6hhu30jEQ5I67v8Dc0jy2rn+ZLfuPsXr1x3n9hWfx6Qaf
      uu06Xnn+BW64/csc2LWZ1Tfc8KGpl1t9J3HfHoxRLs5LNDu8Kq3haflcOQEDX3AfsbibovzL
      0NTxL9NQULh+4SJsGXz+93RMu7/U3EUXcvMVK9i1ZSdXr76FWsVHfZcHELz4hycoKS6jpLSQ
      Gz5+HYPNjeyqP0pJUQF/+u8/4I3b8QU/7OiptlIclbenZOzuGLwymDkTJBRtpc/9AtHYwLih
      0qWVVczL4JtgRmPaCaDl3d38+tnt/MtX7+S5P/2RcPVFXHvOiM2p605mltv400sbiEcDlBc6
      KJ+3HEeui8LyLur37ubpVzaf0qa97Dq0vIVJHbcQ8NqQBW98epo+oxHXffR7XiYYPjrqe5w2
      O1fVLczo2yBHY9oJYMf+LWh2ndfWv8mupqP0th1gX8MRnnt2PUuvW8WWbbs4q8LK0/9Yz5DI
      pWpGCaU2K9fd+kVcgWFqqk510BTVQu7se0cqRySJtrDCVs+0+zonhCGiDPk34fZvwTBOLXN4
      dd0CSvOyI+5/MhkWBRpxjhVFeX/JPvGpJIQY8ykV6vozoY4nEz4qXcAvO6w0BDJTACfisFVT
      5FqJpuaiKApLKiq549wLsGRJ3P9kMuxTKe9PcEVRTpns4y3RjopbsRZekvBR7fGpHA5kh3kQ
      jnbQ515LJNbDjDwnt5x9btZOfsg4AZwZimolr+Z+VHvi8ljCOrw4oGFM07DnVNCNIIHAZj5+
      Vu2YJU+yAVMJAEaiQnnzHgL1zP0BIWC9W2Mgjfk+yUBVVD5z0Z3ML53+VTbOFNMJAEayRV3z
      v/NePdGp0xNVWD+U6GOO6UVVVG4+95NcXndVVkZ9TsaUAlAUBUv+UnJnfRGUqcXthYBXBzWC
      k67vM7259qzVfOKc20wx+cGkAoARETjKV5M76z6YwuVzDQGFPf7s+vounfsR7rjgLixa5mzm
      nSnm+aSjYC//OCgawfYnYILpwlEDnu+3oKfgmGMqUBWVa89azR0X3IVVy9xKz1Mhux5hU0BR
      VBzlN+KchGO806fSHsmOr05VVG4651Y+dcHnTDf5IeM2wpKHEIK4/12Gj65BxL2jvs8dg/9o
      seGbRrn+U8VhcXDnsnv5aN3HUDPoboVEIgVwAkIIjHAngdafE/ftPc3P4W99GhvcmW85VhfO
      5u7lX2RR+dmmcXhPhxTAaRB6mFD3Xwh3/xVOKDvYFlb4z1Yr8Qy2/RUULq5ZyeeW30e+Y+zC
      tmZACmAUhBDEvLsItv0PRriNmAG/7szsfJ/CnCJuOfd2Lp9/FZYMuYQ72UgBjIMRDxDueY63
      j/yNJzuMjEx5UBWVi2at4LPL7qE0L3vO8yYCKYAJIISgf7iXp3Y/ya727RjT7JaWsZhdVMN9
      F99Pbel8U9v6oyEFMAl0Q6dpoJFXDr3A7vbtxPRTc+enA5qiMbeklqvPuoGLZq0gxzr+kUez
      IgUwBYQQdHjaeLH+H2xr2UxUj6Z7SMDIxF9StZTrFt3I4vIlptrRnSpSAGeAIQz8YR872ray
      pXkjzYNNKReDqqjMLqph2eyLWT77EsrzK6WDOwmkABKEbsRp97Szr2MXB3sO0Nh/mKienKua
      LKqFqoJqzqu6gHNnns/80oXYLNmdt58spAASzPGvM6pHaBlq5t3u/TQPNjEUHMQb8uAJuRET
      rFqtoOC0u3DaXZTmlTKrqIZF5WezuOIcHJYc6dQmACmAFBHX4wRiAXxhL0OBAQLRAFE9wnBk
      mFA0iKIo2C12cqy52C0O8mx5lDpn4LK7cFhzpCObJKQAsgUxsq7IVWFyZO62puR9RDzIYw9+
      jTXf/2/C8nE2KWS4IAsIt26m8Oxb+NoXrkz3UDIOuQJkAZqzjL6Oetz9vYR0uQRMBimALMBW
      vpSPXVTOU395lpic/5NCOsESUyNXgAzi5DsRxn10neZ+BcmHkU5wpiBiPP744wx6w9z4ydtY
      99xzkFfGI1//EpHWQ/zmr3+nft9u/u2xf+PnTzzDecuWU6EN8k5HnNuuWkxHuJKVS+el+1NM
      O+QKkDFY+OpXvsYcAhi5lTxwz53ovR1EdEFR3SIe+PLnqai7jEBHB2HVSd3cebQd8xJwe3jt
      pV0M9hwjasjV4GSkADIEQZw1j/2YuVfdzqIcL99e82vu+ecHcalRIlGdjS+v5fIbVzPv/BV8
      /a6b+P2Tz3Hj7f/Egnl59BPHe2wX25uD6f4Y0w4pgEwhPkzEotOwZyPbDzeRV2LnpRdfpbl+
      B/VHPXh0B1csn89A11FeePElll58HmXlReQXLuCOyy/GG3SxqEqmU5yMjAJlIWLkEoUPHd4c
      7+4EsyIFIDE10gSSmBopAImpkQKQmBopAImpkQKQmBopAImpkQKQmBopAImpkQKQmBopAImp
      kQKQmBopAImpkQKQmBopAImpkQKQmBopAImpkQKQmBopAImpkQKQmBopAImpkQKQmBopAImp
      kQKQmBopAImpkQKQmBopAImpkQKQmBopAImpkQKQmBopAImpkQKQmBopAImpkQKQmJr/D2+P
      afn+0voqAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 3' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nO2dd3Rc133nP+9NH2Aw6L0RBAGwQ6wiqS5ZxZElS7aVyHJObGflk92cs8lm
      y0k2yUa7m2yaN7bjKBs77ootW5LVGymJEjsIgiAAgui9DcrMAANMn3nv7R8QKFEEhiIGBIac
      +zkHh+Bg3vf95s77vnfb715J0zQNgSBJkdc6AIFgLbnmBliJB4yqqnHHEG8ciaIRb1kkisZK
      lWe8cVxzAyiKsuYaK1FQK6UR72dJhPJMJI2EN4BAkMgIAwiSGmEAQVIjDCBIaoQBBEmNMIAg
      qREGENywhKJBzo81M+juR9UW7y7VPfXUU09dyyBUVUWW4/OZqqrodLplH78w4BJPHCuloWla
      XBrxlkUiaGiqwvuv/5LpiBW/e4BvfedpzDmllORlARpvPP9jPJZSuure4Cf/9jqV5WX887f/
      BkdQz+YN5fg9Y/zV//o/uIMm0rRZ/ubb3yKjoJwzh1/l+Zfe5aY9u1C0ED+q+x6yLNE52cao
      Z4TK7CokSbokFvEEEKw60WAQ18QQAyNjnHnzNR587Iu89eJ7aMDUQCsnjzbTNzzCL14/wQOf
      e4CJzkPsfPC36K07TESD1jcPcfPnnuTcsQ945v/9lFvu/g2q15fT3XqGr/27r2IzGzk1cJw9
      Zfv47KaHeWLn1xieHsQTmLksFmEAwapjsKZw70P3IaEiRyW629tJky0A/MvT30en02isO45i
      NnKh/m0GzTW0Hn6bCw3taMCW++6i+civONo+iiuokapT+btv/5w773uMH/3j33O0y4mEdMlU
      Cw0NpMtj0a/SZxYILhIKzPGzZ15n3K/j3v1bqW/pp+Cmvfzt3/4Vf/K332Gms5V2NRdn/a/o
      cPjZn5fNuE7i/t/7Bj//53/gwMOPotMb+f2vPsLWYnjh3ZPsv+dh3n3/NSSrlS0laVgNt/Lj
      0//CmGeE6YCbiqz12M3pl8UiLWc6tKZGmZhyk5ebTU9HG7acIvSRIGk5eSjBOXxRPdnpKQBE
      o1H0+vh8FolEMBgMyz5eVVU0TYur3rtSGqqqxlUe8ZZFomgszIvS63RogBb2MDqrpyQn9ZL3
      AEjSwt1cwzE0SWFZHgtXraIol30nC/X8iBKhz9WDzWSjIK3osvo/LPMJ4JqaoL19CLs0y6A7
      iuZoIk0LYCrejm6mF6+cT/buquVIC5INSUICJFM6JTmf/JP0id8lCsvyFw67xCCLYdAZqM7d
      GPP0yzJAdl4hmSOTRDU9kYAHnSxhzcgnMD0Ckh6zTr54t1MUJe5prysxGzTe2ZwrqRFPeSTK
      LMyVmsm5EtdGPBrLMoBjqJ/RMQepNiM6GSwpKVhSUjHo3Biz1xHxRpFl+WJ3X7xVIEBUgT5G
      vNWXRNC4WAWKoyw0TUOSpLg0lnVkQWkFBaUVAKyrVJEkacnHkECQyMR9a453kEsgWEvE1StI
      aoQBBEmNMIAgqREGECQ1wgCCpEYYQJDUCAMIkhphAEFSIwwgSGqEAQRJjTCAIKmJ2wCaqqKK
      LQYE1ynLS4iZGObchSHuumU7h4+eoaisgtmBC+TX3orq7GIqlMGe2oqVjlUgWHGWZYCMnCJy
      7C684/14IiopbjepGdmMD/QhR33oTXaREBNDQyTEzHPdJsSEAl5mZ2dRCgvJzi0g4neiWm3I
      ASc6ez5SFJEQs4SGSIiZ57pOiAkFgxSXl0BKDhvynOit27CZjGhE0RnNRMPx70AiEMRC0zR8
      4TANI0PodTp2FBZjMRiuOjFrWQZIz8olPWv+94y01Mv+bor/5iIQxEQDjvT3si4jAySJI/29
      3F9Vc9U6ohtUcF0y/wQIUZaeQUVmFrOhIMtpCYiFsQTXJbIkUZOTx1tdHUiSxJa8gsUWfrsi
      wgCC6xJJktiaX0BJmh29Xk+q0bishRmEAQTXNTaTKa5eILE8+ipriOXRP2LxstD42Tf/nMYB
      H/nGMH/x199iKiixraaC8cEm/sf//r+EFCPd9Qf50S9eZF3FTfzyO3/MkC+VTVVlKN5x/vjP
      /oyDx5vJsIT47j//EPRpNBx6hqe/9wvWbd1NzofLdoJoBAsSkM888jCqFsDh6kexplFdWQKA
      s6MZU0o6JcV5PH+8geKiUixWiUe/8kVmvfNLn2tqGCWgR51yMdpylrSMXIoKc2hx2vmT//Yk
      B+vaLzmXMIAg4UhNs+EP+Cgq2sS///Ln+ek3f87Y2CDGygP89uMP8YPnn6OkIIvb9pbx0rHT
      WG0p+Px+Zl1TDHb1klm0gSy7Bfvmz/DIAwf4/vMvofhmGRudIMVivORcwgCCxEJTOPReIyZN
      Ycrv48zpOr7yh4/x4q9fw6JXqT/VwO8+/gRPfuGLnG2d4Ev37ueNgy2YVC/P/fpFdOU72Fpp
      o3r/rRRnyNTVt/CNLz/Gk4/fTueghyfu333J6Za1PPrVIJZHv1RDLI8+z9VMhdBUhWBYwWK+
      9O79SY2gP4jJYuZqOoNEL5Ag4ZFkHRbzlW88Zqv5qrVFFUiQ1AgDCJKaZRkgHPTR3dMPgN8z
      xdDYJINdnfhCUTyucYYc7hUNUiC4ViyrDRAIBJiamKJyfRmNzecxW3OR/eM4Q0Z0viFC+kJK
      8jMuvj/edna8SSQrkYiyUhof/zeeOOIhETQS5TtZlgHsGVlYzcNM9Xcw6Y2gOoepKssj6HWg
      6swYZWlFMqgWWGjtx3P8Wn/hK6mxEhlya62xcG3EG0e8GsveIsnldpNTehOPfraG4aExJE0l
      GvZgzCwkPBe9OMStaVrc3aDxatxI3aCJUJ4robFSGWEQX8ahGAdYZQ0xDjDPShkgXg3RCyRI
      aoQBBEmNMIAgqREGECQ1wgCCpEYYQJDUCAMIkhphAEFSs6QBFEXh2LFjzMzMcOLEidWMSSBY
      NZYcQvP7/XR1dREIBKisrFzNmASCVWPJJ4DNZqOwsJBAIIDf71/NmASCVSNmG8Dv98c9e1Eg
      SGRiGqCmpgaTyXTZBLCFqayaphGNRlFUDe3D/6/ElF/B4miahhoaI+w+gRKeEuW8AsQ0QGVl
      JQcOHKC/v/+S110TI7x96AhaxMvp+gbeP3Kco2+8RNfoDF1NJzhe33VNg05GNE0j7D5CeOIl
      NDVAYOSnROfOr3VY1z0x55F2dnbS0tLCnj17Lnk9K6+YohwnkiGV9BQZS1oBJruVmdE+JE0j
      xagXWyTF0FhOeWhRD+GZcxgKvo5ssGJMqSUw+mMwbwDp6qYDiy2SPiJmyY2NjVFQUMDAwABV
      VVUXX3eNjzA4NExmusy5Hid7anMJhXXoI1Pos8tR/ZrYImkJjeXmAyhRHzpTBjqDFYPBgKbP
      IKIzopOjyHrLVesl4hZJ6vQgkdZfI2dtQF/zWSQ5dllf8y2SbDYbLpeL3NzcS163Z+Vyz333
      oNfrebRgA7Ksw1BeAmhIkizqptcAyZiNGp5GDU+h6QtQAoOAjKRLueKx1wuR1hfQrbuDaPdB
      dIXbkdJLr/k5YxpAlmXC4TApKZcWssFowvDhIl1Go3GRIwUrjSRbMed+lsD4syiGdDTFh7ng
      S0jSjTOYL2euJ9rzDihhJLN9Vc4Z0wATExPk5+dfZgDB6iNJErqUKkzFT6JTZ5FNOUiyaa3D
      WlH0Gx9ELtiObMkAU9qqnDPm7UNRFOx2OxbL1dcxBVdHwOdFUTVAY2527uJ+V5Ggn4kJJ5qm
      MeOawhuQkIwFjE8tvEfD753D6XQSjqp43FOMT7mJRsK4nE58vuCafaYFwqEAoXCET34275wH
      p9OJ1x9kdmYa1/QcUkY5E65ZAqEoAJqmMjnuIBCOzu8L5vMBGl6Pmym3J+7YYm6QodfrmZyc
      RFVV8vPzl3UCsUHGpRqLbQrh7mnjt3/na9zzhS9x6IWf8c2n3+KRz9+JhMZ3/vwpzjSdYnR2
      lp/+8jWOv3sIOTzOoTdewm8pZ31RFv/0D9+ks7efnNwM/vrvnkY2KASmOnj2lcOkpmVRXHhp
      G241N8jwT43zh9/4KoWb9zLYWsfv/9F3+coTnwM0jr5zkFee/SHtPhvv/vBbDM1q2NUpnv7J
      y9SfaeOO2/Zy/uhL/OSVdzh8rI3I6EmefuUYn9m1nX/65nc4ePh1tt1+H2mG5X+WJb/NsbEx
      2tvbaWxsxGazLfsEgiuTWlTOV3/3C6Bp3P/IE2yyfdS7EpCiuKa9WK1phH1uIihkpelxud3Y
      0lPRAJ8yh3dulo66Bqa9Kr0DU8xNuIiEQ8wFomv3wQCTPZPf+09PoigRbtp3N3d8uNkFSNz9
      wIPoUzP48oP7cXklvAEvHT0X+MYf/QE52dMEVA2L0cys040WjHD7579GRXkxhtQ0Hv/KI+j1
      dlLi8/HSBgiHwxe7/qxWa3xnEcQkFAoxPNBPZ98Ak44+hiYHcIwMUt98jqkZmVv2buZMazNl
      NTvJ1EVpHRrjrgO76e++QENTB3fuvo1Cg4pjBtZv3obf5SJUsIV779zLe/V1a/rZIkqE/t4+
      evoHcDlHGZnsZ2BomNNn65kZbUPL2kCW3s9vfOUxfL3nMKdmceTwYSZcBrrPN9HV1sOuA3cR
      8s3idowy0t/P8PAQf/nU/+Tu++9Hi8bX43jFdYF8Ph9zc3PLrgKJdYEu1VhsHGDaOUlreycW
      ewapUoCpmSBhrxNT/mbWZ+roG3OxY0ctHecb0VmzqSnPob6xnSwpgCtzA8W6acY8UfburKX7
      QiOqOYeiDCMtbd1sqt1JVtqlN7DVXBfI752l8VwzOrOFHLsJx8QMFn2EgWk9d9SuR7LlkJWq
      p/lsPZI1m60b19F46jR5lTUcffMgj/7mwzSdO0t+WTUR1yjjHi95ZZW4BnuISjKbb9pNZsry
      eyJjGqC7u5v+/n7Kysqorq5e1gmEAS7VEAtjzZMoC2NdcSrEvn37RC+Q4IYlZpeG3W6nvr6e
      wcHB1YpHIFhVYhpgenoaSZJEI1hwwxLTANXV1RgMBsLh8GrFIxCsKjENkJ6eTmFhIZ2dnasV
      j0CwqsQ0gMPhoKOj47LZoJqqMOV0oWkag31duDw+3JOThBWVoH+O6VmRQyy4PliyFygYDNLW
      1kZtbe3lGWFT45xvG2Tflnwcfj3qWAtywI2l7CZ0Mz3MSfns2121hLJAkDjE7AbNzMxkenqa
      Xbt2XfJ6dl4hWSOTRHx+sgs2MON1YswqIOgeBvSYjbLICIuhEU95JEo21w2fEWY2m9E0jZ6e
      HoLBIHl5eRf/5hjqZ3h0lKy8LfQ3nSAtLROrxYJecmHMLiPiVURG2BIa8Q6Ewdpnc62ExkoN
      hF2zjDBN06isrESn01FaemlmTkFpBQ+WVgBQXFy+7JMLBGvNkgbo6OigtbUVt9tNQUHBasYk
      EKwaS/YCzczMEAqFcDqdqxmPQLCqLDkZ7uP7r8qyvOy6r5gMd6mGmAw3T8JPhuvq6qK1tRW9
      Xk95eTm1tbXLPolAkKgsWQWqqanBYrFwzz334HA4VjMmgWDViDkSvGvXLl555RVqampWKx6B
      YFWJaYCzZ89iNpvp6elZrXgEglUlpgGKiopwuVzLTocUCBKdJQ0QDAbp7OzkjjvuYGhoaDVj
      EghWjSUNoGkaqampTE9Ps3v37tWMSSBYNZY0gMViQVVVGhoaaGxsXM2YBIJVI+YIQnFxMRaL
      Raz2LLhhidkInpubw+PxXJYQs4CmaUw6RvF4/Xg9HqKqSjgUwOsPXZNgBYKVJuYTwO12k5OT
      s+TSiEFnH41dLnRqN9bwLPYNe5Hcncyo+RzYIxJiBIlPTAMoikJmZubS6wLpzAQ9TkxWC2k5
      xfinhkDTYTHqREJMDA2REDNPQifERCIRqqurGRsbQ6/XLzoWoIQjmFJSMBl16A1GzFEXhtxy
      ol5VJMQsoSESYuZJ+ISYyclJgsHgxa1QFyM1v5x7c0qQZRlJkpYdhECwVizZCM7MzKStrY2C
      ggL6+vqWFNDpdOLiF1y3LGkASZIoLCxEURT27du3mjEJBKvGkgYwm81EIhG6u7s5efLkasYk
      EKwaMZPiy8vLUVUVk+nG2oxNIFhgySdAfX09kUiEaDQqlkYU3LAs+QQwGAzU19ejaZpYFUJw
      wxIzKX5h0OfjffpXi0iKv1RDJMXPk/BJ8fFc9ALB9YK4wgVJjTCAIKkRBhAkNcIAgqQmbgPE
      O71XIFhL4uqf1JQQR4+eIqdoHcHxXgq33Yzi7mcqZKN2Y+mVBQSCNSYuA3jHupj0RbH5fRgs
      VgZ7+tBF3EhGk0iIiaEhEmLmSeiEmE91sNlK2YaNBJ19yKYUpMAkpGQhQ0ImxMiyTDQUYarX
      QWguSEZJFvaCLCT5ytO5E2UgDNY+mWUlNBI+IebTYM6uwD7VjLFsA1mpFjTC6C02woHFE2jW
      moDHT+fhZjLLcknJsjHWOoSzb4L1BzZ9KhMIbjziMoAkSVRvunzZ9JQEnDyqaRoD9Z2U76ki
      vSgLSZLIWV9A+zvn8DjcpBdlrXWIgjUgabpB1YhC2BfClpt+MYNNkiWyK/KZHhG74CQrSWMA
      SSchyRJKOHLxNU3TCM76MaUuseqF4IYnaQwg63TkVhXRf7qTkDeIEonicbhxDU6SUyFWv05W
      4u+euY7Iqy4CTaPjvSY0TcNoMVF95zb05vh7RATXJ0llAFmWyd9YQm5VEZqiojPokMSU76Tm
      hjLA+GAnDee72Fh7gPXFmYz1dNDY0cPGm/bi6GrGHzGwZ0c1r795iHseeoR80/ySjz0XzmHI
      WM9Y20lcwQgbt+5lsPUkpvwa9u+sQXSQ3rjcULe/N599GcmYhs0y3w/7yluvoVrTsUpeDr33
      Dlk5mbz8s3+kpLqCH37vpwAowRl+9N2/5PipIbLzC2k58R5Np49zotvN2y/9jJnQ8kd+BYnP
      DWWAdds20ddynKMN5wDYWL2BrroPOHK0m/LCAl547gXs62s5+vZ7zEyNgabx7NN/z+bdB5ic
      HKViQxk+Yx7lBTaqd95Cbl4Z0774h/wFicsNZYA5vwOPz48x4uOZX7+Bf2KcQDBISAdjM0HC
      ip8sWwGpVondd32WH/3g39j30G9TlGlB1qmcfvdV7n7oMWqqqzj31o+ZmpqlyH5D1RIFn2DJ
      pPiVYnWT4jU0DdzDw8xoVipK50d3NU1DU1Xkj83j0dQoLU3nqN25Z3ElVQVJujholihzgRIh
      oX0lNBIlKf4GM8DiiFUhEk8jUQxwQ1WBBIKrJe4KbiQwy7RfRQvMkZ5fiBKYxRvRk5u5+K4y
      AkEiEV9GmKbRcKYenSUfaW6YsTnQzfbhlwuEAQTXBXEZwDXYybgPdB4H64ryCHhGiUhGTDpZ
      ZITF0BAZYfMkQkZYXI1gRYkSDocYHBjFpJeJhNwYskqJzilsqCoCRCP4kxqiETxPojSC47oy
      dTo9Fouemo2f2BFSrKUruE4QvUBXi1gC5oZCGOAqUGZmcH3/X/EeObrWoQhWCGGAq0D1elE9
      HiIjI2sdimCFEBNdrgJDUREZv/t15JSUtQ5FsEJcP08ATYM5H4yOw8wsxNEduRgBnxd/IMRC
      DV/TVALBEKqq4PF4UFQVJIharfDhnmnRcAjPnHe+e1SJEo4oqEoUv89HOJKYS8MILuX6MICi
      QON5ON8Os3PQ1Qcnz0IovDL6WpgffO9f+e//5U+Z8YYAaD/1Hn/wh39D96mTfP8HT/OPP3kW
      z+QAjz/+CI4QaJrCt//6Kf70j/8rfZ4Af/C13+KFg+00HH2Fv//Wdzjb1LEysQmuKYlvAE1D
      6uiFjHTYvws2boA9tbCxEhqaV6ZXRjKyc/dWgtEIBr2MGvHx+olmdpTZKdu6FbsSBr2ZZ3/+
      Ertuu5moqqGEQ0jBLP7id+7lzPFh/sPjv4Xqj+Lu60XVwGAUK01cDyS+ARQF3YwH1pVc+npm
      +vzFvwJPgeisA2vuetan6Rka6OVcYztKNMyxU0epa+3mvi88Rvf5M8xFgnQ1NNDa1k1XRzfu
      iJuzLV3Y8614Q36c06Nk7riHJ77wGX516FDccQmuPYk/HToYgrPNcGCReftnW6CiDDLsMSWu
      NIqrRfy89trbWDILCY72sO2BRyjLTGGwuxcdYeqaL7B9z61UFGUzMtKHFHBRN2Rgb4WZ1sEZ
      7r95A68eOo6q6tlVW0VDUxu33n0fuekpl8UhRoLnSZSR4MQ3gKqiHalDOrAbjB8rcE2Dwyfg
      jn1whekJVzONYb44JKRPZMJ/XGOhyKRPvumKH0UYYIFEMUDiV4Fkmej60vm7ffjD6o6iQEs7
      FOVf8eK/WiTp8ot/8feItSJuBK6PcYCCPDAa4dTZ+f+rGpQXQ3lJ7OMEgitwfRgAID8X8nLm
      7/6yPP8jEMRJXAZQowHONDRjTc/GGJwlr2oLUY+D6bCFDWW5n1rHO+3ixZdfpHL7bezbUc1A
      cwMnWzuxZ5eTa/TRMuTk8w8+wOHXXyB3017u2L0NgNnxIc70TLOjJoeXXn6D/fc+SHVxFm8e
      PMyd99yL1SBMIohNnPsDGKiuqeJcUwfpxgjdXQPogg4UfRFqSTbwUUMlFmOOUbbsOcDLz3yf
      3dv/jsyiUqpmxnm1rp2vP3QAW38TP/zZd8kq2kbTc79g347N6DWVn/zkGQKRFFyNcxTW3saP
      /+U5Hr61gBdePcO2fXdisukvxhBvW38lNeJJJllIMoqHRNBYSC5a6zjiukVqSoCTDc3suXkX
      BnMamm8CRZeCXr60h2Sh0bjUT1FhAW8/93Pu+PyTyJKELTOblsZmvvzEo+iUEM3nB9i4/RaG
      Wxroa+sgisRg0zEGfVEmBroxmy00NZwhxajnp7/6gHyDxvik57LG6pXiiPWTKBo30k8ilGdc
      T4BI0E+q2Uxf/wA5+floig9DWg5hX/TiCVRVvbhX2FI01L3D8ByUDrXzi+5TPPS5B/CaCqkp
      SuNHLx7FlpkNUip56emk3v8gbe+/xlxqNV9//Au8++LrWO2ZSHPTpOZn858f/4+8//o7pKWY
      Lznvwh5h8bASGp+mPGIhSVLcMSSCxsLTcK01EmscQFNobuhi++6NH72kaUQiEYxG48UqSHvL
      OWq27eDj23rF6psXKZGJp5Eo4wCJZYAlEDnBH5EIF+9KaCSKAUQ3iSCpEQYQJDXCAIKkRhhA
      kNQIAwiSGmEAQVIjDCBIaoQBBElNfHOBNI2x4QFm5gJ43C4iikoo4GPWG1yp+ASCa0pcQ7Qh
      1yD9zhAMNCEHnKRW7Eae7sKj5bN/T9WVBQSCNSauJ0DY6yW/bB0mg46U7CICziF8ig6LfmXT
      FAWCa0VcBkjJL6b77FHC6DGbzFgNIdILSjGarp9EM0FyE9/+AOZ07r3rTiRZXnQWpkCQ6Fyz
      2aALMx/jnf++oBXvvHG4+mVMPqmRCPPXE6E8bySNa1ZXkWUZWZZXZDp0vBqJNB06Xo1EKM+V
      0NA0DUmS4iqLhRtbQucDLHzQtdRYqSdAomisdXmuhEailOc1b61KknTVgX78/WtZ0J+8N6yV
      xkWdD49dVploGtrHzv8xuWWzHI2L3wew3Dvv1WgsrPS38M6F3xbKQffUU089tcw4PhWaGqXh
      TB1Do24kvxOHV8Wm83OquZ+yosWWTtE433Ca7r4RZC3M2XPNGKw2zp1ppKS8hKa6I1hySjDr
      Y9f7pkZ66RmeY8bRTVv3EGk2I82tgxTk2jl+6jRlpaWx41ZC1NfV4fZH8Yz30do5iD3NxLmW
      PoryMzh64hTlZbE1wr5Z6usaGHfP4XeP0NrZT3q6lbNNPRQXZHL0+AnKy8qWPH5sqIfuwUns
      Fjh5qp4oJsYHumnv62eqr5e0wjLGelpwB41kpi2yGrWm0Hj6FJrZjsvRx4X2LvQmC+fPnsHl
      DzHSdp60wjIcvedx+vRk2q2Lapyrr0M12bBZDJw88gHZhYWcOXkcpy/IaPt5UgvKmBi4wMSc
      RFb65ZuHhAKznDhWR2FZKW1NjQw5prHKYerONiJbbJyrO0P5ujJOHD1GblExet3l32044OX4
      sZPkFxfRfOYUfUMOUk0Spxs+1Dh1mrKKck4eP05OQREGncyMc4zGpvP4wgoD3W0MO6YxS0Hq
      G5vQm600NzRf+6kQEe805swi0uUwU54gDscYXR2D6GLUvDZtr0VVQ/QNONh/yx7Gh0YIeT30
      DzpwTkzgj8T2vRrx09k/hhL04gka2FSRx/DQFCODozjHBnAHrryMhmtkiMlpP5oSZsavY+uG
      AoYGJxkZHMXlGMD1KTTUaIiJaTfO8THcPpnammIG+scZHhjF7Rhgyh97k4/cwlJ0kTDOsRE2
      796Pa6QHv2Zh9/pM0EFfVx+TThde59wSCjJlxaWEQyFK11WRYtThcgySU15L2DeLrJfp7ehl
      csqJ1xVDo6SMcDDIUE87oYDEjGuErJLtRPxz6Iw6etq7GZ+cxOf2LapgMKWQb7cR8M/SNzQE
      SoSuwUluu/UWxod78YyO4PK4GB7yEFUWLxO9yUK+PY2IpjIxMcnU1CRdAxPcdtttTAz34hlz
      4JxxMjLkIRKd/27sWQWUFWYz7RjFkl1CmhSiZcDJrfv2MDwwwPTY6LU3gKTTEwwECEUiGHQ6
      UvQK7pCERbf0s/P0saNsvmk3GVYZr9ePIklkZefTfb6ezNziKz72nJNjhNUI/UPDBII+An4/
      kl5PeYGNo80jlOZceRd7g8FI+fpqvM5x/CH/vIZBT0WhncNnBynPTbuihsczQ+XGWtLMRsJh
      PwGfD9mgp7LIzjv1/VTkx17VWq/XzVczZAm/3weyjnAoiMczh9FqxzfZh8WWhbpUgUgSOp2E
      BpxvqietsJLSwhyCAS+RSAi92UbQNYApNXPpbRYkCb1eQtNUhkeceL2TTDjnCAbmiIRDyEYb
      Ec8wRmvmkvURWdZ9uEqIjpyicuyyj2lfCF8ggKJorNu0nvdePkxlTfmSZSHLOmRZIhoMkJpT
      SkVuKv5QGH8wQFTRKK9Zx5FXP6Ci+qMn6uRIN8MelZ3bawh8eA2apCjeQAANjWj/9HcAAAOa
      SURBVPKq8mvfBjBY08k0jhLOKaYoMxWdRY/HF8XI0gZIz8ykv7ubDZVVdHb1snHrNsL+ILn5
      WWRm2sAU27e5RZXcVViO0+VDCTgZcYfYVFVMKFhInncOq8V0xbjTCorRTzWRXbyeDFOUIWeA
      LTUlBAKF5M3NYrWar6iRXVDKWHMzOaXrybREGZj0sW1jOf7CQvJmPVhTYm+iMdDdSTDqx5S1
      gaHebtZv2kbYM8n4XJjSslwi4Uzs2fn4ZiOLHq+EgwyMOVBkI6lWG27HALb1G5ACPZSUV5Fq
      1BENZ5KWXYBvdvF9FpRIkP6RMSLo2XP77YQ8bkz2dLpamigu34DNpEeJZJKalYd/iTjm3JNM
      h0Nok9MUZ1lx+szcubeYxuZWttTuIBIIkJ6XR1qKHZNh8V4h7/QU7lAIZWqafLsev1rArZXF
      NJxrYXPtTqJ+HxmF+dhT0jEb5y9rvcGMLjzByIyNDEOYaG4JNXk2mi50snXr9vlNTq51L5BA
      kMiI6dCCpEYYQJDUCAMIkhphgFWgvbWNT7Or8Uh3G79+/iVGJz0ARAMz9Pd9tCt9T28XLt+l
      DU1N02hoOIGmQdAzycHDp5buFVoENezFuUT3ZTIg5i2vAi31DVRt3sgHbz5Hl8PP/Xcf4O13
      32fHzTdT/95hLPnFfPU3v8g7hz7goS89zK/fPEiGNIfRnkV2Xjktpw4zEVLYVV2DrIdfPnOc
      22+/ldPHj1C2dS+T/b3s3HmAc6fraG0bZPdN63n++dfw+f0YU1LYWVPO2fNd3Hb7bRhMVjzu
      SUa7Wxl1z7JrWwVvfTDOn/zpk1j1yTejVzwBVgNNIxoJMOiRuGVTHh+cuoDJauJCRzv2ko3o
      CaFqIBtkrLZUQGHSE+LOfVsYHxpiVrKRn6rD6Zxgds7Hhqo76GnuRTJZGRrsWzgJjS2tROem
      aOrqp6hoFxUbyinLttDU1s/Dn72VlpYWppxuHI4JfLKF7esLyC6rZM/+W7AkaQ6TeAKsArl5
      Nt46eJSKbDsNIz52bC7mfEeI4nUVmHVWiKYjSbBzyxZ+9YuXuPWOz+CZGsWcks66jVVM9lzg
      dEsfjz78MPaMLAxGCz5jBjNDc5SXlWDV5QEKtXvv5ubd1Zw6d4HsskwUDQyREIVlGu+fOMf+
      Azdz6uhRsourKCjMI9ssYc/MZ2bkVYJqTczByRsVMQ6Q6GgKdcePoVqz2bdzS4zhQ8FyEAYQ
      JDX/H0mwo4nxUZnvAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      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
      YII=
    </thumbnail>
  </thumbnails>
</workbook>
