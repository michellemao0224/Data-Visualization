<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10200.17.0216.1925                               -->
<workbook source-build='10.2.0 (10200.17.0216.1925)' source-platform='mac' version='10.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='prosperLoanData' inline='true' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='prosperLoanData' name='textscan.1q5b03d1val7gq1g5v2tj03glt7l'>
            <connection class='textscan' directory='/Users/Miyal/Desktop/Udacity/Data Visualization/Project' filename='prosperLoanData.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1q5b03d1val7gq1g5v2tj03glt7l' name='prosperLoanData.csv' table='[prosperLoanData#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_AU' separator=','>
            <column datatype='string' name='ListingKey' ordinal='0' />
            <column datatype='integer' name='ListingNumber' ordinal='1' />
            <column datatype='datetime' name='ListingCreationDate' ordinal='2' />
            <column datatype='string' name='CreditGrade' ordinal='3' />
            <column datatype='integer' name='Term' ordinal='4' />
            <column datatype='string' name='LoanStatus' ordinal='5' />
            <column datatype='datetime' name='ClosedDate' ordinal='6' />
            <column datatype='real' name='BorrowerAPR' ordinal='7' />
            <column datatype='real' name='BorrowerRate' ordinal='8' />
            <column datatype='real' name='LenderYield' ordinal='9' />
            <column datatype='real' name='EstimatedEffectiveYield' ordinal='10' />
            <column datatype='real' name='EstimatedLoss' ordinal='11' />
            <column datatype='real' name='EstimatedReturn' ordinal='12' />
            <column datatype='integer' name='ProsperRating (numeric)' ordinal='13' />
            <column datatype='string' name='ProsperRating (Alpha)' ordinal='14' />
            <column datatype='real' name='ProsperScore' ordinal='15' />
            <column datatype='integer' name='ListingCategory (numeric)' ordinal='16' />
            <column datatype='string' name='BorrowerState' ordinal='17' />
            <column datatype='string' name='Occupation' ordinal='18' />
            <column datatype='string' name='EmploymentStatus' ordinal='19' />
            <column datatype='integer' name='EmploymentStatusDuration' ordinal='20' />
            <column datatype='boolean' name='IsBorrowerHomeowner' ordinal='21' />
            <column datatype='boolean' name='CurrentlyInGroup' ordinal='22' />
            <column datatype='string' name='GroupKey' ordinal='23' />
            <column datatype='datetime' name='DateCreditPulled' ordinal='24' />
            <column datatype='integer' name='CreditScoreRangeLower' ordinal='25' />
            <column datatype='integer' name='CreditScoreRangeUpper' ordinal='26' />
            <column datatype='datetime' name='FirstRecordedCreditLine' ordinal='27' />
            <column datatype='integer' name='CurrentCreditLines' ordinal='28' />
            <column datatype='integer' name='OpenCreditLines' ordinal='29' />
            <column datatype='integer' name='TotalCreditLinespast7years' ordinal='30' />
            <column datatype='integer' name='OpenRevolvingAccounts' ordinal='31' />
            <column datatype='real' name='OpenRevolvingMonthlyPayment' ordinal='32' />
            <column datatype='integer' name='InquiriesLast6Months' ordinal='33' />
            <column datatype='real' name='TotalInquiries' ordinal='34' />
            <column datatype='integer' name='CurrentDelinquencies' ordinal='35' />
            <column datatype='real' name='AmountDelinquent' ordinal='36' />
            <column datatype='integer' name='DelinquenciesLast7Years' ordinal='37' />
            <column datatype='integer' name='PublicRecordsLast10Years' ordinal='38' />
            <column datatype='integer' name='PublicRecordsLast12Months' ordinal='39' />
            <column datatype='real' name='RevolvingCreditBalance' ordinal='40' />
            <column datatype='real' name='BankcardUtilization' ordinal='41' />
            <column datatype='real' name='AvailableBankcardCredit' ordinal='42' />
            <column datatype='real' name='TotalTrades' ordinal='43' />
            <column datatype='real' name='TradesNeverDelinquent (percentage)' ordinal='44' />
            <column datatype='real' name='TradesOpenedLast6Months' ordinal='45' />
            <column datatype='real' name='DebtToIncomeRatio' ordinal='46' />
            <column datatype='string' name='IncomeRange' ordinal='47' />
            <column datatype='boolean' name='IncomeVerifiable' ordinal='48' />
            <column datatype='real' name='StatedMonthlyIncome' ordinal='49' />
            <column datatype='string' name='LoanKey' ordinal='50' />
            <column datatype='integer' name='TotalProsperLoans' ordinal='51' />
            <column datatype='integer' name='TotalProsperPaymentsBilled' ordinal='52' />
            <column datatype='integer' name='OnTimeProsperPayments' ordinal='53' />
            <column datatype='integer' name='ProsperPaymentsLessThanOneMonthLate' ordinal='54' />
            <column datatype='integer' name='ProsperPaymentsOneMonthPlusLate' ordinal='55' />
            <column datatype='real' name='ProsperPrincipalBorrowed' ordinal='56' />
            <column datatype='real' name='ProsperPrincipalOutstanding' ordinal='57' />
            <column datatype='integer' name='ScorexChangeAtTimeOfListing' ordinal='58' />
            <column datatype='integer' name='LoanCurrentDaysDelinquent' ordinal='59' />
            <column datatype='integer' name='LoanFirstDefaultedCycleNumber' ordinal='60' />
            <column datatype='integer' name='LoanMonthsSinceOrigination' ordinal='61' />
            <column datatype='integer' name='LoanNumber' ordinal='62' />
            <column datatype='integer' name='LoanOriginalAmount' ordinal='63' />
            <column datatype='string' name='LoanOriginationDate' ordinal='64' />
            <column datatype='string' name='LoanOriginationQuarter' ordinal='65' />
            <column datatype='string' name='MemberKey' ordinal='66' />
            <column datatype='real' name='MonthlyLoanPayment' ordinal='67' />
            <column datatype='real' name='LP_CustomerPayments' ordinal='68' />
            <column datatype='real' name='LP_CustomerPrincipalPayments' ordinal='69' />
            <column datatype='real' name='LP_InterestandFees' ordinal='70' />
            <column datatype='real' name='LP_ServiceFees' ordinal='71' />
            <column datatype='real' name='LP_CollectionFees' ordinal='72' />
            <column datatype='real' name='LP_GrossPrincipalLoss' ordinal='73' />
            <column datatype='real' name='LP_NetPrincipalLoss' ordinal='74' />
            <column datatype='real' name='LP_NonPrincipalRecoverypayments' ordinal='75' />
            <column datatype='real' name='PercentFunded' ordinal='76' />
            <column datatype='integer' name='Recommendations' ordinal='77' />
            <column datatype='integer' name='InvestmentFromFriendsCount' ordinal='78' />
            <column datatype='real' name='InvestmentFromFriendsAmount' ordinal='79' />
            <column datatype='integer' name='Investors' ordinal='80' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>ListingKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ListingKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingKey</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ListingNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingNumber</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingCreationDate</remote-name>
            <remote-type>135</remote-type>
            <local-name>[ListingCreationDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingCreationDate</remote-alias>
            <ordinal>2</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditGrade</remote-name>
            <remote-type>129</remote-type>
            <local-name>[CreditGrade]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditGrade</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Term</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Term]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Term</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanStatus</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanStatus]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanStatus</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ClosedDate</remote-name>
            <remote-type>135</remote-type>
            <local-name>[ClosedDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ClosedDate</remote-alias>
            <ordinal>6</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerAPR</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BorrowerAPR]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerAPR</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerRate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BorrowerRate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerRate</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LenderYield</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LenderYield]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LenderYield</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedEffectiveYield</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedEffectiveYield]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedEffectiveYield</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedLoss</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedReturn</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedReturn]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedReturn</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperRating (numeric)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperRating (numeric)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperRating (numeric)</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperRating (Alpha)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ProsperRating (Alpha)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperRating (Alpha)</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperScore]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperScore</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingCategory (numeric)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ListingCategory (numeric)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingCategory (numeric)</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerState</remote-name>
            <remote-type>129</remote-type>
            <local-name>[BorrowerState]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerState</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Occupation</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Occupation]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Occupation</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EmploymentStatus</remote-name>
            <remote-type>129</remote-type>
            <local-name>[EmploymentStatus]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EmploymentStatus</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EmploymentStatusDuration</remote-name>
            <remote-type>20</remote-type>
            <local-name>[EmploymentStatusDuration]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EmploymentStatusDuration</remote-alias>
            <ordinal>20</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IsBorrowerHomeowner</remote-name>
            <remote-type>11</remote-type>
            <local-name>[IsBorrowerHomeowner]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IsBorrowerHomeowner</remote-alias>
            <ordinal>21</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentlyInGroup</remote-name>
            <remote-type>11</remote-type>
            <local-name>[CurrentlyInGroup]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentlyInGroup</remote-alias>
            <ordinal>22</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GroupKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[GroupKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>GroupKey</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DateCreditPulled</remote-name>
            <remote-type>135</remote-type>
            <local-name>[DateCreditPulled]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DateCreditPulled</remote-alias>
            <ordinal>24</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditScoreRangeLower</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CreditScoreRangeLower]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditScoreRangeLower</remote-alias>
            <ordinal>25</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditScoreRangeUpper</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CreditScoreRangeUpper]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditScoreRangeUpper</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FirstRecordedCreditLine</remote-name>
            <remote-type>135</remote-type>
            <local-name>[FirstRecordedCreditLine]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>FirstRecordedCreditLine</remote-alias>
            <ordinal>27</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentCreditLines</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CurrentCreditLines]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentCreditLines</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenCreditLines</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OpenCreditLines]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenCreditLines</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalCreditLinespast7years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalCreditLinespast7years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalCreditLinespast7years</remote-alias>
            <ordinal>30</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenRevolvingAccounts</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OpenRevolvingAccounts]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenRevolvingAccounts</remote-alias>
            <ordinal>31</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenRevolvingMonthlyPayment</remote-name>
            <remote-type>5</remote-type>
            <local-name>[OpenRevolvingMonthlyPayment]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenRevolvingMonthlyPayment</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InquiriesLast6Months</remote-name>
            <remote-type>20</remote-type>
            <local-name>[InquiriesLast6Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InquiriesLast6Months</remote-alias>
            <ordinal>33</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalInquiries</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TotalInquiries]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalInquiries</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentDelinquencies</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CurrentDelinquencies]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentDelinquencies</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AmountDelinquent</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AmountDelinquent]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>AmountDelinquent</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DelinquenciesLast7Years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[DelinquenciesLast7Years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DelinquenciesLast7Years</remote-alias>
            <ordinal>37</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PublicRecordsLast10Years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PublicRecordsLast10Years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PublicRecordsLast10Years</remote-alias>
            <ordinal>38</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PublicRecordsLast12Months</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PublicRecordsLast12Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PublicRecordsLast12Months</remote-alias>
            <ordinal>39</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RevolvingCreditBalance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[RevolvingCreditBalance]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>RevolvingCreditBalance</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BankcardUtilization</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BankcardUtilization]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BankcardUtilization</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AvailableBankcardCredit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AvailableBankcardCredit]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>AvailableBankcardCredit</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalTrades</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TotalTrades]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalTrades</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TradesNeverDelinquent (percentage)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TradesNeverDelinquent (percentage)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TradesNeverDelinquent (percentage)</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TradesOpenedLast6Months</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TradesOpenedLast6Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TradesOpenedLast6Months</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DebtToIncomeRatio</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DebtToIncomeRatio]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DebtToIncomeRatio</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IncomeRange</remote-name>
            <remote-type>129</remote-type>
            <local-name>[IncomeRange]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IncomeRange</remote-alias>
            <ordinal>47</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IncomeVerifiable</remote-name>
            <remote-type>11</remote-type>
            <local-name>[IncomeVerifiable]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IncomeVerifiable</remote-alias>
            <ordinal>48</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>StatedMonthlyIncome</remote-name>
            <remote-type>5</remote-type>
            <local-name>[StatedMonthlyIncome]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>StatedMonthlyIncome</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanKey</remote-alias>
            <ordinal>50</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalProsperLoans</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalProsperLoans]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalProsperLoans</remote-alias>
            <ordinal>51</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalProsperPaymentsBilled</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalProsperPaymentsBilled]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalProsperPaymentsBilled</remote-alias>
            <ordinal>52</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OnTimeProsperPayments</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OnTimeProsperPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OnTimeProsperPayments</remote-alias>
            <ordinal>53</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPaymentsLessThanOneMonthLate</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperPaymentsLessThanOneMonthLate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPaymentsLessThanOneMonthLate</remote-alias>
            <ordinal>54</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPaymentsOneMonthPlusLate</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperPaymentsOneMonthPlusLate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPaymentsOneMonthPlusLate</remote-alias>
            <ordinal>55</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPrincipalBorrowed</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperPrincipalBorrowed]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPrincipalBorrowed</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPrincipalOutstanding</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperPrincipalOutstanding]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPrincipalOutstanding</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ScorexChangeAtTimeOfListing</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ScorexChangeAtTimeOfListing]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ScorexChangeAtTimeOfListing</remote-alias>
            <ordinal>58</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanCurrentDaysDelinquent</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanCurrentDaysDelinquent]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanCurrentDaysDelinquent</remote-alias>
            <ordinal>59</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanFirstDefaultedCycleNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanFirstDefaultedCycleNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanFirstDefaultedCycleNumber</remote-alias>
            <ordinal>60</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanMonthsSinceOrigination</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanMonthsSinceOrigination]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanMonthsSinceOrigination</remote-alias>
            <ordinal>61</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanNumber</remote-alias>
            <ordinal>62</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginalAmount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanOriginalAmount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginalAmount</remote-alias>
            <ordinal>63</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginationDate</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanOriginationDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginationDate</remote-alias>
            <ordinal>64</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginationQuarter</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanOriginationQuarter]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginationQuarter</remote-alias>
            <ordinal>65</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MemberKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[MemberKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>MemberKey</remote-alias>
            <ordinal>66</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MonthlyLoanPayment</remote-name>
            <remote-type>5</remote-type>
            <local-name>[MonthlyLoanPayment]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>MonthlyLoanPayment</remote-alias>
            <ordinal>67</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CustomerPayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CustomerPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CustomerPayments</remote-alias>
            <ordinal>68</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CustomerPrincipalPayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CustomerPrincipalPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CustomerPrincipalPayments</remote-alias>
            <ordinal>69</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_InterestandFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_InterestandFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_InterestandFees</remote-alias>
            <ordinal>70</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_ServiceFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_ServiceFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_ServiceFees</remote-alias>
            <ordinal>71</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CollectionFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CollectionFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CollectionFees</remote-alias>
            <ordinal>72</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_GrossPrincipalLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_GrossPrincipalLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_GrossPrincipalLoss</remote-alias>
            <ordinal>73</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_NetPrincipalLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_NetPrincipalLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_NetPrincipalLoss</remote-alias>
            <ordinal>74</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_NonPrincipalRecoverypayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_NonPrincipalRecoverypayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_NonPrincipalRecoverypayments</remote-alias>
            <ordinal>75</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentFunded</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentFunded]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PercentFunded</remote-alias>
            <ordinal>76</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Recommendations</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Recommendations]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Recommendations</remote-alias>
            <ordinal>77</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InvestmentFromFriendsCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[InvestmentFromFriendsCount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InvestmentFromFriendsCount</remote-alias>
            <ordinal>78</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InvestmentFromFriendsAmount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[InvestmentFromFriendsAmount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InvestmentFromFriendsAmount</remote-alias>
            <ordinal>79</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Investors</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Investors]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Investors</remote-alias>
            <ordinal>80</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_AU&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Amount Delinquent' datatype='real' name='[AmountDelinquent]' role='measure' type='quantitative' />
      <column caption='Available Bankcard Credit' datatype='real' name='[AvailableBankcardCredit]' role='measure' type='quantitative' />
      <column caption='Bankcard Utilization' datatype='real' name='[BankcardUtilization]' role='measure' type='quantitative' />
      <column caption='Borrower APR' datatype='real' name='[BorrowerAPR]' role='measure' type='quantitative' />
      <column caption='Borrower Rate' datatype='real' name='[BorrowerRate]' role='measure' type='quantitative' />
      <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Delinquencies' datatype='boolean' name='[Calculation_475129814591930368]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([AmountDelinquent] &gt; 0) AND NOT ISNULL([AmountDelinquent])' />
        <aliases>
          <alias key='false' value='Not Delinquent' />
          <alias key='true' value='Delinquent' />
        </aliases>
      </column>
      <column caption='Liabilities' datatype='boolean' name='[Calculation_475129814592937985]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7) AND NOT ISNULL([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7)' />
        <aliases>
          <alias key='false' value='Low Liability' />
          <alias key='true' value='High Liability' />
        </aliases>
      </column>
      <column caption='Prosper Rating Group' datatype='string' name='[Calculation_559009360486248449]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF NOT ISNULL([ProsperRating (Alpha)]) THEN [ProsperRating (Alpha)] END' />
      </column>
      <column caption='Prosper rating vs. borrower state' datatype='string' name='[Calculation_559009360490381316]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF ([Number of Records])== ({FIXED [ProsperRating (Alpha)] :MAX([Number of Records])}) THEN [BorrowerState] ELSE NULL END' />
      </column>
      <column caption='Estimated Return Amount' datatype='real' name='[Calculation_559009360502009862]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[EstimatedReturn] * [LoanOriginalAmount]' />
      </column>
      <column caption='Closed Date' datatype='datetime' name='[ClosedDate]' role='dimension' type='ordinal' />
      <column caption='Credit Grade' datatype='string' name='[CreditGrade]' role='dimension' type='nominal' />
      <column caption='Credit Score Range Lower' datatype='integer' name='[CreditScoreRangeLower]' role='measure' type='quantitative' />
      <column caption='Credit Score Range Upper' datatype='integer' name='[CreditScoreRangeUpper]' role='measure' type='quantitative' />
      <column caption='Current Credit Lines' datatype='integer' name='[CurrentCreditLines]' role='measure' type='quantitative' />
      <column caption='Current Delinquencies' datatype='integer' name='[CurrentDelinquencies]' role='measure' type='quantitative' />
      <column caption='Currently In Group' datatype='boolean' name='[CurrentlyInGroup]' role='dimension' type='nominal' />
      <column caption='Date Credit Pulled' datatype='datetime' name='[DateCreditPulled]' role='dimension' type='ordinal' />
      <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
      <column caption='Employment Status Duration' datatype='integer' name='[EmploymentStatusDuration]' role='measure' type='quantitative' />
      <column caption='Employment Status' datatype='string' name='[EmploymentStatus]' role='dimension' type='nominal' />
      <column caption='Estimated Effective Yield' datatype='real' name='[EstimatedEffectiveYield]' role='measure' type='quantitative' />
      <column caption='Estimated Loss' datatype='real' name='[EstimatedLoss]' role='measure' type='quantitative' />
      <column caption='Estimated Return' datatype='real' name='[EstimatedReturn]' role='measure' type='quantitative' />
      <column caption='First Recorded Credit Line' datatype='datetime' name='[FirstRecordedCreditLine]' role='dimension' type='ordinal' />
      <column caption='Group Key' datatype='string' name='[GroupKey]' role='dimension' type='nominal' />
      <column datatype='string' name='[Income Range (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[IncomeRange]' new-bin='true'>
          <bin default-name='false' value='&quot;$0&quot;'>
            <value>&quot;$0&quot;</value>
            <value>&quot;Not employed&quot;</value>
          </bin>
        </calculation>
      </column>
      <column caption='Income Range' datatype='string' name='[IncomeRange]' role='dimension' type='nominal' />
      <column caption='Income Verifiable' datatype='boolean' name='[IncomeVerifiable]' role='dimension' type='nominal' />
      <column caption='Investment From Friends Amount' datatype='real' name='[InvestmentFromFriendsAmount]' role='measure' type='quantitative' />
      <column caption='Investment From Friends Count' datatype='integer' name='[InvestmentFromFriendsCount]' role='measure' type='quantitative' />
      <column caption='Is Borrower Homeowner' datatype='boolean' name='[IsBorrowerHomeowner]' role='dimension' type='nominal' />
      <column caption='LP CollectionFees' datatype='real' name='[LP_CollectionFees]' role='measure' type='quantitative' />
      <column caption='LP CustomerPayments' datatype='real' name='[LP_CustomerPayments]' role='measure' type='quantitative' />
      <column caption='LP CustomerPrincipalPayments' datatype='real' name='[LP_CustomerPrincipalPayments]' role='measure' type='quantitative' />
      <column caption='LP GrossPrincipalLoss' datatype='real' name='[LP_GrossPrincipalLoss]' role='measure' type='quantitative' />
      <column caption='LP InterestandFees' datatype='real' name='[LP_InterestandFees]' role='measure' type='quantitative' />
      <column caption='LP NetPrincipalLoss' datatype='real' name='[LP_NetPrincipalLoss]' role='measure' type='quantitative' />
      <column caption='LP NonPrincipalRecoverypayments' datatype='real' name='[LP_NonPrincipalRecoverypayments]' role='measure' type='quantitative' />
      <column caption='LP ServiceFees' datatype='real' name='[LP_ServiceFees]' role='measure' type='quantitative' />
      <column caption='Lender Yield' datatype='real' name='[LenderYield]' role='measure' type='quantitative' />
      <column caption='Listing Creation Date' datatype='datetime' name='[ListingCreationDate]' role='dimension' type='ordinal' />
      <column caption='Listing Key' datatype='string' name='[ListingKey]' role='dimension' type='nominal' />
      <column caption='Listing Number' datatype='integer' name='[ListingNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Current Days Delinquent' datatype='integer' name='[LoanCurrentDaysDelinquent]' role='measure' type='quantitative' />
      <column caption='Loan First Defaulted Cycle Number' datatype='integer' name='[LoanFirstDefaultedCycleNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Key' datatype='string' name='[LoanKey]' role='dimension' type='nominal' />
      <column caption='Loan Months Since Origination' datatype='integer' name='[LoanMonthsSinceOrigination]' role='measure' type='quantitative' />
      <column caption='Loan Number' datatype='integer' name='[LoanNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
      <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
        <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
      </column>
      <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
      <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
      <column caption='Loan Status' datatype='string' name='[LoanStatus]' role='dimension' type='nominal' />
      <column caption='Member Key' datatype='string' name='[MemberKey]' role='dimension' type='nominal' />
      <column caption='Monthly Loan Payment' datatype='real' name='[MonthlyLoanPayment]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='On Time Prosper Payments' datatype='integer' name='[OnTimeProsperPayments]' role='measure' type='quantitative' />
      <column caption='Open Credit Lines' datatype='integer' name='[OpenCreditLines]' role='measure' type='quantitative' />
      <column caption='Open Revolving Accounts' datatype='integer' name='[OpenRevolvingAccounts]' role='measure' type='quantitative' />
      <column caption='Open Revolving Monthly Payment' datatype='real' name='[OpenRevolvingMonthlyPayment]' role='measure' type='quantitative' />
      <column caption='Percent Funded' datatype='real' name='[PercentFunded]' role='measure' type='quantitative' />
      <column caption='Prosper Payments Less Than One Month Late' datatype='integer' name='[ProsperPaymentsLessThanOneMonthLate]' role='measure' type='quantitative' />
      <column caption='Prosper Payments One Month Plus Late' datatype='integer' name='[ProsperPaymentsOneMonthPlusLate]' role='measure' type='quantitative' />
      <column caption='Prosper Principal Borrowed' datatype='real' name='[ProsperPrincipalBorrowed]' role='measure' type='quantitative' />
      <column caption='Prosper Principal Outstanding' datatype='real' name='[ProsperPrincipalOutstanding]' role='measure' type='quantitative' />
      <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
      <column caption='Prosper Score' datatype='real' name='[ProsperScore]' role='measure' type='quantitative' />
      <column caption='Revolving Credit Balance' datatype='real' name='[RevolvingCreditBalance]' role='measure' type='quantitative' />
      <column caption='Scorex Change At Time Of Listing' datatype='integer' name='[ScorexChangeAtTimeOfListing]' role='measure' type='quantitative' />
      <column caption='Stated Monthly Income' datatype='real' name='[StatedMonthlyIncome]' role='measure' type='quantitative' />
      <column caption='Total Inquiries' datatype='real' name='[TotalInquiries]' role='measure' type='quantitative' />
      <column caption='Total Prosper Loans' datatype='integer' name='[TotalProsperLoans]' role='measure' type='quantitative' />
      <column caption='Total Prosper Payments Billed' datatype='integer' name='[TotalProsperPaymentsBilled]' role='measure' type='quantitative' />
      <column caption='Total Trades' datatype='real' name='[TotalTrades]' role='measure' type='quantitative' />
      <column-instance column='[AmountDelinquent]' derivation='Avg' name='[avg:AmountDelinquent:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BankcardUtilization]' derivation='Avg' name='[avg:BankcardUtilization:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:ok]' pivot='key' type='ordinal' />
      <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BorrowerRate]' derivation='Avg' name='[avg:BorrowerRate:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CurrentDelinquencies]' derivation='Avg' name='[avg:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EstimatedLoss]' derivation='Avg' name='[avg:EstimatedLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LP_NetPrincipalLoss]' derivation='Avg' name='[avg:LP_NetPrincipalLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LenderYield]' derivation='Avg' name='[avg:LenderYield:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_559009360486248449]' derivation='None' name='[none:Calculation_559009360486248449:nk]' pivot='key' type='nominal' />
      <column-instance column='[EmploymentStatus]' derivation='None' name='[none:EmploymentStatus:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
      <column-instance column='[AmountDelinquent]' derivation='Sum' name='[sum:AmountDelinquent:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BankcardUtilization]' derivation='Sum' name='[sum:BankcardUtilization:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CurrentDelinquencies]' derivation='Sum' name='[sum:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[DebtToIncomeRatio]' derivation='Sum' name='[sum:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EstimatedLoss]' derivation='Sum' name='[sum:EstimatedLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LP_NetPrincipalLoss]' derivation='Sum' name='[sum:LP_NetPrincipalLoss:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.614711' measure-ordering='alphabetic' measure-percentage='0.385289' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:EmploymentStatus:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Not employed&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Not available&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Self-employed&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Employed&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Retired&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerRate:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:AmountDelinquent:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:LP_NetPrincipalLoss:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:AmountDelinquent:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LP_NetPrincipalLoss:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:CurrentDelinquencies:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:DebtToIncomeRatio:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:EstimatedLoss:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:EstimatedLoss:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BankcardUtilization:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:BankcardUtilization:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:LenderYield:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[avg:BorrowerAPR:ok]' type='shape'>
            <map to='asterisk'>
              <bucket>0.22612440392477753</bucket>
            </map>
            <map to='circle'>
              <bucket>0.090040731571108368</bucket>
            </map>
            <map to='diamond'>
              <bucket>0.28058054574750607</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>0.35606120115358225</bucket>
            </map>
            <map to='plus'>
              <bucket>0.18403002759771778</bucket>
            </map>
            <map to='square'>
              <bucket>0.1389093883581847</bucket>
            </map>
            <map to='times'>
              <bucket>0.19596230943941617</bucket>
            </map>
            <map to='triangle'>
              <bucket>0.33055055436447361</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]&#10;[none:Forecast Indicator:nk]' type='palette'>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerAPR:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:LenderYield:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[none:ProsperRating (Alpha):nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;C&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;B&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;E&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;AA&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;D&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;A&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;HR&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
        <semantic-value key='[State].[Name]' value='%null%' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <sort class='manual' column='[none:Calculation_559009360486248449:nk]' direction='ASC'>
          <dictionary>
            <bucket>%null%</bucket>
            <bucket>&quot;AA&quot;</bucket>
            <bucket>&quot;A&quot;</bucket>
            <bucket>&quot;B&quot;</bucket>
            <bucket>&quot;C&quot;</bucket>
            <bucket>&quot;D&quot;</bucket>
            <bucket>&quot;E&quot;</bucket>
            <bucket>&quot;HR&quot;</bucket>
          </dictionary>
        </sort>
        <sort class='manual' column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </sort>
        <sort class='manual' column='[none:ProsperRating (Alpha):nk]' direction='ASC'>
          <dictionary>
            <bucket>%null%</bucket>
            <bucket>&quot;AA&quot;</bucket>
            <bucket>&quot;A&quot;</bucket>
            <bucket>&quot;B&quot;</bucket>
            <bucket>&quot;C&quot;</bucket>
            <bucket>&quot;D&quot;</bucket>
            <bucket>&quot;E&quot;</bucket>
            <bucket>&quot;HR&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]'>
        <groupfilter function='level-members' level='[none:LoanOriginationQuarter:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' />
      </filter>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]'>
        <groupfilter from='&quot;A&quot;' function='range' level='[none:ProsperRating (Alpha):nk]' to='&quot;HR&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
      </filter>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]'>
        <groupfilter function='level-members' level='[yr:LoanOriginationDate - Split 1:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='Credit Risk 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Current Delinquencies' datatype='integer' name='[CurrentDelinquencies]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[CurrentDelinquencies]' derivation='Avg' name='[avg:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year-Trunc' name='[tyr:LoanOriginationDate - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='Loan Date' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Credit Risk 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Amount Delinquent' datatype='real' name='[AmountDelinquent]' role='measure' type='quantitative' />
            <column caption='Delinquencies' datatype='boolean' name='[Calculation_475129814591930368]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([AmountDelinquent] &gt; 0) AND NOT ISNULL([AmountDelinquent])' />
              <aliases>
                <alias key='false' value='Not Delinquent' />
                <alias key='true' value='Delinquent' />
              </aliases>
            </column>
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_475129814591930368]' derivation='None' name='[none:Calculation_475129814591930368:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[pcto:sum:Number of Records:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='432' />
            <format attr='cell-h' value='432' />
            <format attr='cell' value='54' />
            <format attr='cell-q' value='270' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <wedge-size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814591930368:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Credit Risk 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Available Bankcard Credit' datatype='real' name='[AvailableBankcardCredit]' role='measure' type='quantitative' />
            <column caption='Liabilities' datatype='boolean' name='[Calculation_475129814592937985]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7) AND NOT ISNULL([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7)' />
              <aliases>
                <alias key='false' value='Low Liability' />
                <alias key='true' value='High Liability' />
              </aliases>
            </column>
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column caption='Revolving Credit Balance' datatype='real' name='[RevolvingCreditBalance]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_475129814592937985]' derivation='None' name='[none:Calculation_475129814592937985:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[pcto:sum:Number of Records:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='432' />
            <format attr='cell-h' value='432' />
            <format attr='cell' value='54' />
            <format attr='cell-q' value='270' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <wedge-size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814592937985:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Prosper Rating Group' datatype='string' name='[Calculation_559009360486248449]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF NOT ISNULL([ProsperRating (Alpha)]) THEN [ProsperRating (Alpha)] END' />
            </column>
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_559009360486248449]' derivation='None' name='[none:Calculation_559009360486248449:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360486248449:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Employment Status' datatype='string' name='[EmploymentStatus]' role='dimension' type='nominal' />
            <column datatype='string' name='[Income Range (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[IncomeRange]' new-bin='true'>
                <bin default-name='false' value='&quot;$0&quot;'>
                  <value>&quot;$0&quot;</value>
                  <value>&quot;Not employed&quot;</value>
                </bin>
              </calculation>
            </column>
            <column caption='Income Range' datatype='string' name='[IncomeRange]' role='dimension' type='nominal' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[EmploymentStatus]' derivation='None' name='[none:EmploymentStatus:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='Count' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Income Range (group)]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Prosper rating vs. borrower state' datatype='string' name='[Calculation_559009360490381316]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF ([Number of Records])== ({FIXED [ProsperRating (Alpha)] :MAX([Number of Records])}) THEN [BorrowerState] ELSE NULL END' />
            </column>
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerState]' derivation='None' name='[none:BorrowerState:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_559009360490381316]' derivation='None' name='[none:Calculation_559009360490381316:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]' field-type='quantitative' max='-6982331.2504814174' min='-19222039.715730123' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]' field-type='quantitative' max='9835912.7613419723' min='2028328.9441809277' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' max='1500' min='0' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360490381316:nk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
              <size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360490381316:nk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:BorrowerState:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Borrower State:&#9;</run>
                <run bold='true'>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:BorrowerState:nk]&gt;</run>
                <run fontcolor='#787878'>&#10;Number of Records:&#9;</run>
                <run bold='true'>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='0.80160218477249146' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerState]' derivation='None' name='[none:BorrowerState:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginalAmount]' derivation='Sum' name='[sum:LoanOriginalAmount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]' field-type='quantitative' max='-6878012.3389321547' min='-21421811.557351697' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]' field-type='quantitative' max='11199899.995422209' min='1914562.9111600635' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' palette='tableau-map-temperatur' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:BorrowerState:nk]' />
              <geometry column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='auto' />
                <format attr='wrap' value='auto' />
              </style-rule>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-mode' value='all' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower APR' datatype='real' name='[BorrowerAPR]' role='measure' type='quantitative' />
            <column caption='Borrower Rate' datatype='real' name='[BorrowerRate]' role='measure' type='quantitative' />
            <column caption='Lender Yield' datatype='real' name='[LenderYield]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[BorrowerRate]' derivation='Avg' name='[avg:BorrowerRate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LenderYield]' derivation='Avg' name='[avg:LenderYield:qk]' pivot='key' type='quantitative' />
            <column-instance column='[BorrowerAPR]' derivation='Avg' forecast-column-base='[avg:BorrowerAPR:qk]' forecast-column-type='forecast-value' name='[fVal:avg:BorrowerAPR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[BorrowerRate]' derivation='Avg' forecast-column-base='[avg:BorrowerRate:qk]' forecast-column-type='forecast-value' name='[fVal:avg:BorrowerRate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LenderYield]' derivation='Avg' forecast-column-base='[avg:LenderYield:qk]' forecast-column-type='forecast-value' name='[fVal:avg:LenderYield:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Quarter-Trunc' name='[tqr:LoanOriginationDate - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerAPR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:LenderYield:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]' scope='rows' value='Average Borrower Rate Comparison' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tqr:LoanOriginationDate - Split 1:qk]' scope='cols' value='Loan Date' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tqr:LoanOriginationDate - Split 1:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tqr:LoanOriginationDate - Split 1:qk]' scope='cols' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='line-ends' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-labels-mode' value='line-ends' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='match' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='line-ends' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[fVal:avg:BorrowerRate:qk] + [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values])</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tqr:LoanOriginationDate - Split 1:qk]</cols>
        <forecast-specification auto-forecast-agg='true' band-confidence-level='95.000000' enabled='true' fill-type='fill-missing' ignore-last='1' model-type='auto-season' range-type='auto' show-prediction-bands='true' />
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='LP InterestandFees' datatype='real' name='[LP_InterestandFees]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LP_InterestandFees]' derivation='Sum' name='[pcto:sum:LP_InterestandFees:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[LP_InterestandFees]' derivation='Sum' name='[sum:LP_InterestandFees:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='496' />
            <format attr='cell-h' value='496' />
            <format attr='cell' value='62' />
            <format attr='cell-q' value='310' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <wedge-size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LP_InterestandFees:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:LP_InterestandFees:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run>&lt;</run>
                <run>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</run>
                <run>&gt;</run>
                <run>Æ&#10;</run>
                <run>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:LP_InterestandFees:qk]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='9' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='1' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Estimated Return Amount' datatype='real' name='[Calculation_559009360502009862]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[EstimatedReturn] * [LoanOriginalAmount]' />
            </column>
            <column caption='Estimated Return' datatype='real' name='[EstimatedReturn]' role='measure' type='quantitative' />
            <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_559009360502009862]' derivation='Avg' name='[avg:Calculation_559009360502009862:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginalAmount]' derivation='Avg' name='[avg:LoanOriginalAmount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='90' />
            <format attr='cell-h' value='30' />
            <format attr='cell' value='30' />
            <format attr='cell-q' value='150' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Prosper Rating:&#9;&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]&gt;&#10;Estimated Return Amount:&#9;</run>
                <run bold='true'>&lt;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:Calculation_559009360502009862:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='10' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:Calculation_559009360502009862:qk]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:LoanOriginalAmount:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='86981' x='0' y='0'>
              <zone h='50000' id='1' name='Customer Quality 1' show-title='false' w='43491' x='0' y='50000' />
              <zone h='50000' id='9' name='Customer Quality 2' show-title='false' w='43490' x='43491' y='50000' />
              <zone h='50000' id='12' name='Customer Quality 3' show-title='false' w='43491' x='0' y='0' />
              <zone h='50000' id='15' name='Customer Quality 4' show-title='false' w='43490' x='43491' y='0' />
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='13019' x='86981' y='0'>
              <zone h='8200' id='6' mode='checkdropdown' name='Customer Quality 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' w='13019' x='86981' y='0' />
              <zone h='7614' id='7' mode='checkdropdown' name='Customer Quality 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' w='13019' x='86981' y='8200' />
              <zone h='7614' id='10' mode='checkdropdown' name='Customer Quality 2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' w='13019' x='86981' y='15814' />
            </zone>
          </zone>
        </zone>
        <zone h='11127' id='16' name='Customer Quality 4' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' type='color' w='11391' x='44264' y='30893' />
        <zone h='11127' id='13' name='Customer Quality 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' type='color' w='11391' x='9520' y='38799' />
        <zone h='11127' id='8' name='Customer Quality 1' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' type='color' w='11391' x='30838' y='54319' />
        <zone h='26061' id='14' name='Customer Quality 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360490381316:nk]' type='size' w='11391' x='1546' y='20059' />
        <zone h='33089' id='11' name='Customer Quality 2' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' type='color' w='11391' x='87388' y='49634' />
      </zones>
    </dashboard>
    <dashboard name='Dashboard 2'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='99675' x='0' y='0'>
              <zone h='50000' id='1' name='Loan Provider Profitability 1' show-title='false' w='99675' x='0' y='50000' />
              <zone h='50000' id='9' name='Loan Provider Profitability 3' show-title='false' w='49838' x='0' y='0' />
              <zone h='50000' id='12' name='Loan Provider Profitability 2' show-title='false' w='49837' x='49838' y='0' />
            </zone>
          </zone>
        </zone>
        <zone h='11420' id='8' name='Loan Provider Profitability 1' pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]&#10;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' type='color' w='11391' x='78112' y='75256' />
        <zone h='12884' id='11' leg-item-layout='grid' name='Loan Provider Profitability 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:ok]' type='shape' w='30024' x='21074' y='28697' />
        <zone h='26061' id='10' name='Loan Provider Profitability 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' w='11391' x='82506' y='2343' />
        <zone h='7613' id='7' mode='checkdropdown' name='Loan Provider Profitability 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' w='13019' x='62408' y='73792' />
        <zone h='7613' id='6' mode='checkdropdown' name='Loan Provider Profitability 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' w='13019' x='62408' y='81552' />
      </zones>
    </dashboard>
    <dashboard name='Dashboard 3'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='99675' x='0' y='0'>
              <zone h='50000' id='1' name='Credit Risk 1' show-title='false' w='99675' x='0' y='0' />
              <zone h='50000' id='8' name='Credit Risk 2' show-title='false' w='49838' x='0' y='50000' />
              <zone h='50000' id='10' name='Credit Risk 3' show-title='false' w='49837' x='49838' y='50000' />
            </zone>
          </zone>
        </zone>
        <zone h='6442' id='9' mode='checkdropdown' name='Credit Risk 2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' w='13019' x='65012' y='3075' />
        <zone h='26061' id='7' name='Credit Risk 1' pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' w='11391' x='45647' y='50952' />
        <zone h='5564' id='6' name='Credit Risk 1' pane-specification-id='1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' type='color' w='14158' x='79496' y='3367' />
      </zones>
    </dashboard>
    <dashboard name='Story 1' type='storyboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Propser Loan</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='275' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='7' param='vert' removable='false' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='6590' id='6' type='title' w='100000' x='0' y='0' />
            <zone h='92824' id='1' param='vert' removable='false' type='layout-flow' w='100000' x='0' y='6590'>
              <zone fixed-size='176' h='26941' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='100000' x='0' y='6590' />
              <zone h='65883' id='5' paired-zone-id='4' removable='false' type='flipboard' w='100000' x='0' y='33531'>
                <flipboard active-id='8' nav-type='caption' show-nav-arrows='true'>
                  <story-points>
                    <story-point caption='&lt;Customer Quality 1 &gt; This bar chart shows that HR prosper rating has the highest debt to income ratio among all years, AA prosper rating has the lowest debt to income ratio. Besides, over 18,000 borrowers have prosper rating C (top one). Then prosper rating B is the second large group.' captured-sheet='Customer Quality 1' id='1' />
                    <story-point caption='&lt;Customer Quality 2 &gt; Most of borrowers has the income range between $50,000 and $74,999. The second large income range group is $25,000 - $ 49,999. In this group, employed borrower has the largest number, full-time employee is the second large. It&apos;s weird to see 659 income range $0 records.' captured-sheet='Customer Quality 2' id='2'>
                      <capturedDeltas>
                        <worksheet name='Customer Quality 2'>
                          <selection-collection />
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='&lt;Customer Quality 3 &gt; From this map, we see California has the highest loan amount from 2005 to 2014, whilst Texas, New York, Florida the second, third and  fourth respectively. However, we don&apos;t have the loan amount data for ND, IA, and ME. ' captured-sheet='Customer Quality 4' id='4' />
                    <story-point caption='&lt; Customer Quality 4 &gt; Using prosper rating filter, we can get different prosper rating amount in different state. For different prosper rating, borrowers in Calnifornia always have the  highest amount from 2005 to 2014. ' captured-sheet='Customer Quality 3' id='3'>
                      <capturedDeltas>
                        <worksheet name='Customer Quality 3'>
                          <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]'>
                            <groupfilter function='member' level='[none:ProsperRating (Alpha):nk]' member='&quot;AA&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
                            <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
                          </filter>
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='&lt;Loan Provider Profitability 1 &gt; We compare borrower APR, borrower rate and lender yield. Borrower Rate is slightly higher than Borrower APR from 2009 Q3 to 2010 Q4, then Borrower APR is higher than Borrower Rate from 2011 Q1 to 2014 Q1. Lender yield is always lower than these two from all time. The borrower interest rate goes up dramatically from 2010 Q1 to 2010 Q4. After it reached the peak, it slightly goes down afterwards. By the end of 2014 Q1, the borrower interest rate is so close to it in 2009 Q3. But based upon the prediction, we can see the borrower interest rate will increase 1% in 2014.' captured-sheet='Loan Provider Profitability 1' id='5' />
                    <story-point caption='&lt;Loan Provider Profitability 2 &gt; Major loan provider profitability comes from the interest and fees. Seen from this pie chart,  C prosper rating yields the most interest and fees. D prosper rating comes the second, AA prosper rating has the least profit generation.' captured-sheet='Loan Provider Profitability 2' id='6'>
                      <capturedDeltas>
                        <worksheet name='Loan Provider Profitability 2'>
                          <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]'>
                            <groupfilter from='&quot;A&quot;' function='range' level='[none:ProsperRating (Alpha):nk]' to='&quot;HR&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
                          </filter>
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='&lt; Loan Provider Profitability 3 &gt; According to this plot,  we can see C prosper rating has the highest average estimated return amount, which is per person can yield 1006.8 estimated return. Then B, D and A prosper rating come next.  HR prosper rating has the lowest average estimated return amount, which is 395.0.' captured-sheet='Loan Provider Profitability 3' id='7' />
                    <story-point caption='&lt;Credit Risk 1 &gt; In 2009, HR prosper rating borrower has the highest current delinquency rate, which is the subprime mortgage crisis final stage. Later on the HR prosper rating borrower&apos;s average current delinquency rate graduately decrease from 1.2 to 0.3 within five years. However, E prosper rating borrower&apos;s average current delinquency rate increases from 2009 to 2011, then it slightly goes down. And in 2011, E prosper rating borrower becomes the most easily delinquent borrower.' captured-sheet='Credit Risk 1' id='8' />
                    <story-point caption='&lt;Credit Risk 2 &gt; From amount delinquencies records, in &quot;Not Delinquent&quot; group, C prosper rating borrower is the majority (19.05%). However, in &quot;Delinquent&quot; group, D prosper rating borrower is the easiest to default on a debt (2.79%). ' captured-sheet='Credit Risk 2' id='9' />
                    <story-point caption='&lt;Credit Risk 3&gt; If borrower&apos;s available bankcard credit is over 70% of revolving credit balance, we consider this borrower is in high liability group. For &quot;High Liability&quot; group, C prosper rating borrower occupies the largest proportion, that is, 17.53%. On the contrary, in &quot;Low Liability&quot; group, A prosper rating borrower with 6.83%  occupies the most proportion.' captured-sheet='Credit Risk 3' id='10' />
                  </story-points>
                </flipboard>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Customer Quality 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360486248449:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Income Range (group)]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:CreditGrade:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:IncomeRange:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_559009360490381316:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[usr:Calculation_559009360490381316:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Loan Provider Profitability 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]&#10;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Forecast Indicator:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Loan Provider Profitability 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Loan Provider Profitability 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814592937985:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Customer Quality 1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Customer Quality 2'>
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Customer Quality 3'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Customer Quality 4'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='15' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Loan Provider Profitability 1'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Loan Provider Profitability 2' />
        <viewpoint name='Loan Provider Profitability 3'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='12' />
    </window>
    <window class='dashboard' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='Credit Risk 1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Credit Risk 2'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Credit Risk 3'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='7' />
    </window>
    <window class='dashboard' maximized='true' name='Story 1'>
      <viewpoints />
      <active id='6' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Credit Risk 1' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Credit Risk 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Credit Risk 3' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 1' width='192'>
      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
      r9lYvwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 3' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 4' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAexklEQVR4nO2dd3Rc1b3vP+ecaZJm1GUVy7ZsyTY2GEyxTbETIHQT8ig3kAIhQMoihcW9
      JJCb3PtIiJOX3MW976705PISUlgJJJCYapqNbdwrxpJtWVbvZZqmzzn7/SEMxraqp2jm7M9a
      LBg02nvPaH/P/v1++7d/WxFCCCQSk6KmewASSTqRApCYGikAiamRApCYGikAiamRApCYGikA
      iamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikA
      iamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikAiamRApCYGikA
      iamRApCYGikAiamRApCYGikAiamRApCYGikAiamRAsgwjKifgw3HEIARC3Lw4FHkNZ9TRwpg
      kkQiYYQQRCJhYpEQHo+HaExPWf973nie737vB/QFdQ7vfIt/e+QR2vzxlPWfbSjynuDJ8fOf
      rOHer3yD3/z8P6lVNV7viWEnh8e++yCakuTOheCH3/53ymZoVF58Ox1vPYuWA7b5V3HX9SuS
      3Hl2IleASTLQ38KvfvkbGpv6MFQLReXlxNRwSvqOBYYYCgRxlVSya8t2Wjq6yS+r5sjePRjy
      OTYlLOkeQKZRUjaTe754H//z8x+jYCHo92Fx1KIm++kPYMvj6498i1kVRTR1dqIZ11EzawbL
      urpS0Hl2Ik2gSVJ/cB8LF5/LoUMHKVCtOGbP5+jeHSw450KK823pHp5kkkgBTHPCoQCBYBhX
      QRE2i4oei+DxBcgvKMCIhQmEYxQWFuD3eMlz5ROPRbE57KhKKpakzEeaQBNACAGKwlhTSgiB
      koRJt2HdWrr6uxlwnsU3P3U9T//0v+jRNayFtUQaX8ZwlbDk3EW88VYrS6++luCR/dz1lS9g
      1xI+lKxEOsHjsPHVP/GdR7/Hj554DoCezqN8/jOf5FjQ4Nlf/YSHv3wnP/zZL/jho2v43dPr
      eeZXTzAUMRLW//JLlnFo7x4qSqoACMfi5BQWcaB5D+GgoKWtEyV/BiElTtPOV+kKuVn/xt6E
      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
      afn+0voqAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 3' width='192'>
      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
      N59ddPSZAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
