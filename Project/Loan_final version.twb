<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10200.17.0216.1925                               -->
<workbook source-build='10.2.0 (10200.17.0216.1925)' source-platform='mac' version='10.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='prosperLoanData' inline='true' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='prosperLoanData' name='textscan.1q5b03d1val7gq1g5v2tj03glt7l'>
            <connection class='textscan' directory='/Users/Miyal/Desktop/Udacity/Data Visualization/Project' filename='prosperLoanData.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1q5b03d1val7gq1g5v2tj03glt7l' name='prosperLoanData.csv' table='[prosperLoanData#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_AU' separator=','>
            <column datatype='string' name='ListingKey' ordinal='0' />
            <column datatype='integer' name='ListingNumber' ordinal='1' />
            <column datatype='datetime' name='ListingCreationDate' ordinal='2' />
            <column datatype='string' name='CreditGrade' ordinal='3' />
            <column datatype='integer' name='Term' ordinal='4' />
            <column datatype='string' name='LoanStatus' ordinal='5' />
            <column datatype='datetime' name='ClosedDate' ordinal='6' />
            <column datatype='real' name='BorrowerAPR' ordinal='7' />
            <column datatype='real' name='BorrowerRate' ordinal='8' />
            <column datatype='real' name='LenderYield' ordinal='9' />
            <column datatype='real' name='EstimatedEffectiveYield' ordinal='10' />
            <column datatype='real' name='EstimatedLoss' ordinal='11' />
            <column datatype='real' name='EstimatedReturn' ordinal='12' />
            <column datatype='integer' name='ProsperRating (numeric)' ordinal='13' />
            <column datatype='string' name='ProsperRating (Alpha)' ordinal='14' />
            <column datatype='real' name='ProsperScore' ordinal='15' />
            <column datatype='integer' name='ListingCategory (numeric)' ordinal='16' />
            <column datatype='string' name='BorrowerState' ordinal='17' />
            <column datatype='string' name='Occupation' ordinal='18' />
            <column datatype='string' name='EmploymentStatus' ordinal='19' />
            <column datatype='integer' name='EmploymentStatusDuration' ordinal='20' />
            <column datatype='boolean' name='IsBorrowerHomeowner' ordinal='21' />
            <column datatype='boolean' name='CurrentlyInGroup' ordinal='22' />
            <column datatype='string' name='GroupKey' ordinal='23' />
            <column datatype='datetime' name='DateCreditPulled' ordinal='24' />
            <column datatype='integer' name='CreditScoreRangeLower' ordinal='25' />
            <column datatype='integer' name='CreditScoreRangeUpper' ordinal='26' />
            <column datatype='datetime' name='FirstRecordedCreditLine' ordinal='27' />
            <column datatype='integer' name='CurrentCreditLines' ordinal='28' />
            <column datatype='integer' name='OpenCreditLines' ordinal='29' />
            <column datatype='integer' name='TotalCreditLinespast7years' ordinal='30' />
            <column datatype='integer' name='OpenRevolvingAccounts' ordinal='31' />
            <column datatype='real' name='OpenRevolvingMonthlyPayment' ordinal='32' />
            <column datatype='integer' name='InquiriesLast6Months' ordinal='33' />
            <column datatype='real' name='TotalInquiries' ordinal='34' />
            <column datatype='integer' name='CurrentDelinquencies' ordinal='35' />
            <column datatype='real' name='AmountDelinquent' ordinal='36' />
            <column datatype='integer' name='DelinquenciesLast7Years' ordinal='37' />
            <column datatype='integer' name='PublicRecordsLast10Years' ordinal='38' />
            <column datatype='integer' name='PublicRecordsLast12Months' ordinal='39' />
            <column datatype='real' name='RevolvingCreditBalance' ordinal='40' />
            <column datatype='real' name='BankcardUtilization' ordinal='41' />
            <column datatype='real' name='AvailableBankcardCredit' ordinal='42' />
            <column datatype='real' name='TotalTrades' ordinal='43' />
            <column datatype='real' name='TradesNeverDelinquent (percentage)' ordinal='44' />
            <column datatype='real' name='TradesOpenedLast6Months' ordinal='45' />
            <column datatype='real' name='DebtToIncomeRatio' ordinal='46' />
            <column datatype='string' name='IncomeRange' ordinal='47' />
            <column datatype='boolean' name='IncomeVerifiable' ordinal='48' />
            <column datatype='real' name='StatedMonthlyIncome' ordinal='49' />
            <column datatype='string' name='LoanKey' ordinal='50' />
            <column datatype='integer' name='TotalProsperLoans' ordinal='51' />
            <column datatype='integer' name='TotalProsperPaymentsBilled' ordinal='52' />
            <column datatype='integer' name='OnTimeProsperPayments' ordinal='53' />
            <column datatype='integer' name='ProsperPaymentsLessThanOneMonthLate' ordinal='54' />
            <column datatype='integer' name='ProsperPaymentsOneMonthPlusLate' ordinal='55' />
            <column datatype='real' name='ProsperPrincipalBorrowed' ordinal='56' />
            <column datatype='real' name='ProsperPrincipalOutstanding' ordinal='57' />
            <column datatype='integer' name='ScorexChangeAtTimeOfListing' ordinal='58' />
            <column datatype='integer' name='LoanCurrentDaysDelinquent' ordinal='59' />
            <column datatype='integer' name='LoanFirstDefaultedCycleNumber' ordinal='60' />
            <column datatype='integer' name='LoanMonthsSinceOrigination' ordinal='61' />
            <column datatype='integer' name='LoanNumber' ordinal='62' />
            <column datatype='integer' name='LoanOriginalAmount' ordinal='63' />
            <column datatype='string' name='LoanOriginationDate' ordinal='64' />
            <column datatype='string' name='LoanOriginationQuarter' ordinal='65' />
            <column datatype='string' name='MemberKey' ordinal='66' />
            <column datatype='real' name='MonthlyLoanPayment' ordinal='67' />
            <column datatype='real' name='LP_CustomerPayments' ordinal='68' />
            <column datatype='real' name='LP_CustomerPrincipalPayments' ordinal='69' />
            <column datatype='real' name='LP_InterestandFees' ordinal='70' />
            <column datatype='real' name='LP_ServiceFees' ordinal='71' />
            <column datatype='real' name='LP_CollectionFees' ordinal='72' />
            <column datatype='real' name='LP_GrossPrincipalLoss' ordinal='73' />
            <column datatype='real' name='LP_NetPrincipalLoss' ordinal='74' />
            <column datatype='real' name='LP_NonPrincipalRecoverypayments' ordinal='75' />
            <column datatype='real' name='PercentFunded' ordinal='76' />
            <column datatype='integer' name='Recommendations' ordinal='77' />
            <column datatype='integer' name='InvestmentFromFriendsCount' ordinal='78' />
            <column datatype='real' name='InvestmentFromFriendsAmount' ordinal='79' />
            <column datatype='integer' name='Investors' ordinal='80' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>ListingKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ListingKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingKey</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ListingNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingNumber</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingCreationDate</remote-name>
            <remote-type>135</remote-type>
            <local-name>[ListingCreationDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingCreationDate</remote-alias>
            <ordinal>2</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditGrade</remote-name>
            <remote-type>129</remote-type>
            <local-name>[CreditGrade]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditGrade</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Term</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Term]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Term</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanStatus</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanStatus]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanStatus</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ClosedDate</remote-name>
            <remote-type>135</remote-type>
            <local-name>[ClosedDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ClosedDate</remote-alias>
            <ordinal>6</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerAPR</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BorrowerAPR]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerAPR</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerRate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BorrowerRate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerRate</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LenderYield</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LenderYield]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LenderYield</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedEffectiveYield</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedEffectiveYield]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedEffectiveYield</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedLoss</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EstimatedReturn</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EstimatedReturn]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EstimatedReturn</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperRating (numeric)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperRating (numeric)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperRating (numeric)</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperRating (Alpha)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ProsperRating (Alpha)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperRating (Alpha)</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperScore]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperScore</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ListingCategory (numeric)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ListingCategory (numeric)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ListingCategory (numeric)</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BorrowerState</remote-name>
            <remote-type>129</remote-type>
            <local-name>[BorrowerState]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BorrowerState</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Occupation</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Occupation]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Occupation</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EmploymentStatus</remote-name>
            <remote-type>129</remote-type>
            <local-name>[EmploymentStatus]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EmploymentStatus</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EmploymentStatusDuration</remote-name>
            <remote-type>20</remote-type>
            <local-name>[EmploymentStatusDuration]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>EmploymentStatusDuration</remote-alias>
            <ordinal>20</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IsBorrowerHomeowner</remote-name>
            <remote-type>11</remote-type>
            <local-name>[IsBorrowerHomeowner]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IsBorrowerHomeowner</remote-alias>
            <ordinal>21</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentlyInGroup</remote-name>
            <remote-type>11</remote-type>
            <local-name>[CurrentlyInGroup]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentlyInGroup</remote-alias>
            <ordinal>22</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GroupKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[GroupKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>GroupKey</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DateCreditPulled</remote-name>
            <remote-type>135</remote-type>
            <local-name>[DateCreditPulled]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DateCreditPulled</remote-alias>
            <ordinal>24</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditScoreRangeLower</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CreditScoreRangeLower]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditScoreRangeLower</remote-alias>
            <ordinal>25</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CreditScoreRangeUpper</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CreditScoreRangeUpper]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CreditScoreRangeUpper</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FirstRecordedCreditLine</remote-name>
            <remote-type>135</remote-type>
            <local-name>[FirstRecordedCreditLine]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>FirstRecordedCreditLine</remote-alias>
            <ordinal>27</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentCreditLines</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CurrentCreditLines]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentCreditLines</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenCreditLines</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OpenCreditLines]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenCreditLines</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalCreditLinespast7years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalCreditLinespast7years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalCreditLinespast7years</remote-alias>
            <ordinal>30</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenRevolvingAccounts</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OpenRevolvingAccounts]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenRevolvingAccounts</remote-alias>
            <ordinal>31</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OpenRevolvingMonthlyPayment</remote-name>
            <remote-type>5</remote-type>
            <local-name>[OpenRevolvingMonthlyPayment]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OpenRevolvingMonthlyPayment</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InquiriesLast6Months</remote-name>
            <remote-type>20</remote-type>
            <local-name>[InquiriesLast6Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InquiriesLast6Months</remote-alias>
            <ordinal>33</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalInquiries</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TotalInquiries]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalInquiries</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CurrentDelinquencies</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CurrentDelinquencies]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>CurrentDelinquencies</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AmountDelinquent</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AmountDelinquent]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>AmountDelinquent</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DelinquenciesLast7Years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[DelinquenciesLast7Years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DelinquenciesLast7Years</remote-alias>
            <ordinal>37</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PublicRecordsLast10Years</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PublicRecordsLast10Years]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PublicRecordsLast10Years</remote-alias>
            <ordinal>38</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PublicRecordsLast12Months</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PublicRecordsLast12Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PublicRecordsLast12Months</remote-alias>
            <ordinal>39</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RevolvingCreditBalance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[RevolvingCreditBalance]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>RevolvingCreditBalance</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BankcardUtilization</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BankcardUtilization]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>BankcardUtilization</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AvailableBankcardCredit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AvailableBankcardCredit]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>AvailableBankcardCredit</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalTrades</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TotalTrades]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalTrades</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TradesNeverDelinquent (percentage)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TradesNeverDelinquent (percentage)]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TradesNeverDelinquent (percentage)</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TradesOpenedLast6Months</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TradesOpenedLast6Months]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TradesOpenedLast6Months</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DebtToIncomeRatio</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DebtToIncomeRatio]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>DebtToIncomeRatio</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IncomeRange</remote-name>
            <remote-type>129</remote-type>
            <local-name>[IncomeRange]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IncomeRange</remote-alias>
            <ordinal>47</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IncomeVerifiable</remote-name>
            <remote-type>11</remote-type>
            <local-name>[IncomeVerifiable]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>IncomeVerifiable</remote-alias>
            <ordinal>48</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>StatedMonthlyIncome</remote-name>
            <remote-type>5</remote-type>
            <local-name>[StatedMonthlyIncome]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>StatedMonthlyIncome</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanKey</remote-alias>
            <ordinal>50</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalProsperLoans</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalProsperLoans]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalProsperLoans</remote-alias>
            <ordinal>51</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalProsperPaymentsBilled</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalProsperPaymentsBilled]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>TotalProsperPaymentsBilled</remote-alias>
            <ordinal>52</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OnTimeProsperPayments</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OnTimeProsperPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>OnTimeProsperPayments</remote-alias>
            <ordinal>53</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPaymentsLessThanOneMonthLate</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperPaymentsLessThanOneMonthLate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPaymentsLessThanOneMonthLate</remote-alias>
            <ordinal>54</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPaymentsOneMonthPlusLate</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ProsperPaymentsOneMonthPlusLate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPaymentsOneMonthPlusLate</remote-alias>
            <ordinal>55</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPrincipalBorrowed</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperPrincipalBorrowed]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPrincipalBorrowed</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ProsperPrincipalOutstanding</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ProsperPrincipalOutstanding]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ProsperPrincipalOutstanding</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ScorexChangeAtTimeOfListing</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ScorexChangeAtTimeOfListing]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>ScorexChangeAtTimeOfListing</remote-alias>
            <ordinal>58</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanCurrentDaysDelinquent</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanCurrentDaysDelinquent]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanCurrentDaysDelinquent</remote-alias>
            <ordinal>59</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanFirstDefaultedCycleNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanFirstDefaultedCycleNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanFirstDefaultedCycleNumber</remote-alias>
            <ordinal>60</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanMonthsSinceOrigination</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanMonthsSinceOrigination]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanMonthsSinceOrigination</remote-alias>
            <ordinal>61</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanNumber</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanNumber]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanNumber</remote-alias>
            <ordinal>62</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginalAmount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LoanOriginalAmount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginalAmount</remote-alias>
            <ordinal>63</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginationDate</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanOriginationDate]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginationDate</remote-alias>
            <ordinal>64</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LoanOriginationQuarter</remote-name>
            <remote-type>129</remote-type>
            <local-name>[LoanOriginationQuarter]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LoanOriginationQuarter</remote-alias>
            <ordinal>65</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MemberKey</remote-name>
            <remote-type>129</remote-type>
            <local-name>[MemberKey]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>MemberKey</remote-alias>
            <ordinal>66</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MonthlyLoanPayment</remote-name>
            <remote-type>5</remote-type>
            <local-name>[MonthlyLoanPayment]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>MonthlyLoanPayment</remote-alias>
            <ordinal>67</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CustomerPayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CustomerPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CustomerPayments</remote-alias>
            <ordinal>68</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CustomerPrincipalPayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CustomerPrincipalPayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CustomerPrincipalPayments</remote-alias>
            <ordinal>69</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_InterestandFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_InterestandFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_InterestandFees</remote-alias>
            <ordinal>70</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_ServiceFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_ServiceFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_ServiceFees</remote-alias>
            <ordinal>71</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_CollectionFees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_CollectionFees]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_CollectionFees</remote-alias>
            <ordinal>72</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_GrossPrincipalLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_GrossPrincipalLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_GrossPrincipalLoss</remote-alias>
            <ordinal>73</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_NetPrincipalLoss</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_NetPrincipalLoss]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_NetPrincipalLoss</remote-alias>
            <ordinal>74</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LP_NonPrincipalRecoverypayments</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LP_NonPrincipalRecoverypayments]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>LP_NonPrincipalRecoverypayments</remote-alias>
            <ordinal>75</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentFunded</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentFunded]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>PercentFunded</remote-alias>
            <ordinal>76</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Recommendations</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Recommendations]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Recommendations</remote-alias>
            <ordinal>77</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InvestmentFromFriendsCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[InvestmentFromFriendsCount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InvestmentFromFriendsCount</remote-alias>
            <ordinal>78</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InvestmentFromFriendsAmount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[InvestmentFromFriendsAmount]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>InvestmentFromFriendsAmount</remote-alias>
            <ordinal>79</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Investors</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Investors]</local-name>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias>Investors</remote-alias>
            <ordinal>80</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[prosperLoanData.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_AU&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Amount Delinquent' datatype='real' name='[AmountDelinquent]' role='measure' type='quantitative' />
      <column caption='Available Bankcard Credit' datatype='real' name='[AvailableBankcardCredit]' role='measure' type='quantitative' />
      <column caption='Bankcard Utilization' datatype='real' name='[BankcardUtilization]' role='measure' type='quantitative' />
      <column caption='Borrower APR' datatype='real' name='[BorrowerAPR]' role='measure' type='quantitative' />
      <column caption='Borrower Rate' datatype='real' name='[BorrowerRate]' role='measure' type='quantitative' />
      <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Delinquencies' datatype='boolean' name='[Calculation_475129814591930368]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([AmountDelinquent] &gt; 0) AND NOT ISNULL([AmountDelinquent])' />
        <aliases>
          <alias key='false' value='Not Delinquent' />
          <alias key='true' value='Delinquent' />
        </aliases>
      </column>
      <column caption='Liabilities' datatype='boolean' name='[Calculation_475129814592937985]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7) AND NOT ISNULL([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7)' />
        <aliases>
          <alias key='false' value='Low Liability' />
          <alias key='true' value='High Liability' />
        </aliases>
      </column>
      <column caption='Closed Date' datatype='datetime' name='[ClosedDate]' role='dimension' type='ordinal' />
      <column caption='Credit Grade' datatype='string' name='[CreditGrade]' role='dimension' type='nominal' />
      <column caption='Credit Score Range Lower' datatype='integer' name='[CreditScoreRangeLower]' role='measure' type='quantitative' />
      <column caption='Credit Score Range Upper' datatype='integer' name='[CreditScoreRangeUpper]' role='measure' type='quantitative' />
      <column caption='Current Credit Lines' datatype='integer' name='[CurrentCreditLines]' role='measure' type='quantitative' />
      <column caption='Current Delinquencies' datatype='integer' name='[CurrentDelinquencies]' role='measure' type='quantitative' />
      <column caption='Currently In Group' datatype='boolean' name='[CurrentlyInGroup]' role='dimension' type='nominal' />
      <column caption='Date Credit Pulled' datatype='datetime' name='[DateCreditPulled]' role='dimension' type='ordinal' />
      <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
      <column caption='Employment Status Duration' datatype='integer' name='[EmploymentStatusDuration]' role='measure' type='quantitative' />
      <column caption='Employment Status' datatype='string' name='[EmploymentStatus]' role='dimension' type='nominal' />
      <column caption='Estimated Effective Yield' datatype='real' name='[EstimatedEffectiveYield]' role='measure' type='quantitative' />
      <column caption='Estimated Loss' datatype='real' name='[EstimatedLoss]' role='measure' type='quantitative' />
      <column caption='Estimated Return' datatype='real' name='[EstimatedReturn]' role='measure' type='quantitative' />
      <column caption='First Recorded Credit Line' datatype='datetime' name='[FirstRecordedCreditLine]' role='dimension' type='ordinal' />
      <column caption='Group Key' datatype='string' name='[GroupKey]' role='dimension' type='nominal' />
      <column caption='Income Range' datatype='string' name='[IncomeRange]' role='dimension' type='nominal' />
      <column caption='Income Verifiable' datatype='boolean' name='[IncomeVerifiable]' role='dimension' type='nominal' />
      <column caption='Investment From Friends Amount' datatype='real' name='[InvestmentFromFriendsAmount]' role='measure' type='quantitative' />
      <column caption='Investment From Friends Count' datatype='integer' name='[InvestmentFromFriendsCount]' role='measure' type='quantitative' />
      <column caption='Is Borrower Homeowner' datatype='boolean' name='[IsBorrowerHomeowner]' role='dimension' type='nominal' />
      <column caption='LP CollectionFees' datatype='real' name='[LP_CollectionFees]' role='measure' type='quantitative' />
      <column caption='LP CustomerPayments' datatype='real' name='[LP_CustomerPayments]' role='measure' type='quantitative' />
      <column caption='LP CustomerPrincipalPayments' datatype='real' name='[LP_CustomerPrincipalPayments]' role='measure' type='quantitative' />
      <column caption='LP GrossPrincipalLoss' datatype='real' name='[LP_GrossPrincipalLoss]' role='measure' type='quantitative' />
      <column caption='LP InterestandFees' datatype='real' name='[LP_InterestandFees]' role='measure' type='quantitative' />
      <column caption='LP NetPrincipalLoss' datatype='real' name='[LP_NetPrincipalLoss]' role='measure' type='quantitative' />
      <column caption='LP NonPrincipalRecoverypayments' datatype='real' name='[LP_NonPrincipalRecoverypayments]' role='measure' type='quantitative' />
      <column caption='LP ServiceFees' datatype='real' name='[LP_ServiceFees]' role='measure' type='quantitative' />
      <column caption='Lender Yield' datatype='real' name='[LenderYield]' role='measure' type='quantitative' />
      <column caption='Listing Creation Date' datatype='datetime' name='[ListingCreationDate]' role='dimension' type='ordinal' />
      <column caption='Listing Key' datatype='string' name='[ListingKey]' role='dimension' type='nominal' />
      <column caption='Listing Number' datatype='integer' name='[ListingNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Current Days Delinquent' datatype='integer' name='[LoanCurrentDaysDelinquent]' role='measure' type='quantitative' />
      <column caption='Loan First Defaulted Cycle Number' datatype='integer' name='[LoanFirstDefaultedCycleNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Key' datatype='string' name='[LoanKey]' role='dimension' type='nominal' />
      <column caption='Loan Months Since Origination' datatype='integer' name='[LoanMonthsSinceOrigination]' role='measure' type='quantitative' />
      <column caption='Loan Number' datatype='integer' name='[LoanNumber]' role='dimension' type='ordinal' />
      <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
      <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
        <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
      </column>
      <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
      <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
      <column caption='Loan Status' datatype='string' name='[LoanStatus]' role='dimension' type='nominal' />
      <column caption='Member Key' datatype='string' name='[MemberKey]' role='dimension' type='nominal' />
      <column caption='Monthly Loan Payment' datatype='real' name='[MonthlyLoanPayment]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='On Time Prosper Payments' datatype='integer' name='[OnTimeProsperPayments]' role='measure' type='quantitative' />
      <column caption='Open Credit Lines' datatype='integer' name='[OpenCreditLines]' role='measure' type='quantitative' />
      <column caption='Open Revolving Accounts' datatype='integer' name='[OpenRevolvingAccounts]' role='measure' type='quantitative' />
      <column caption='Open Revolving Monthly Payment' datatype='real' name='[OpenRevolvingMonthlyPayment]' role='measure' type='quantitative' />
      <column caption='Percent Funded' datatype='real' name='[PercentFunded]' role='measure' type='quantitative' />
      <column caption='Prosper Payments Less Than One Month Late' datatype='integer' name='[ProsperPaymentsLessThanOneMonthLate]' role='measure' type='quantitative' />
      <column caption='Prosper Payments One Month Plus Late' datatype='integer' name='[ProsperPaymentsOneMonthPlusLate]' role='measure' type='quantitative' />
      <column caption='Prosper Principal Borrowed' datatype='real' name='[ProsperPrincipalBorrowed]' role='measure' type='quantitative' />
      <column caption='Prosper Principal Outstanding' datatype='real' name='[ProsperPrincipalOutstanding]' role='measure' type='quantitative' />
      <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
      <column caption='Prosper Score' datatype='real' name='[ProsperScore]' role='measure' type='quantitative' />
      <column caption='Revolving Credit Balance' datatype='real' name='[RevolvingCreditBalance]' role='measure' type='quantitative' />
      <column caption='Scorex Change At Time Of Listing' datatype='integer' name='[ScorexChangeAtTimeOfListing]' role='measure' type='quantitative' />
      <column caption='Stated Monthly Income' datatype='real' name='[StatedMonthlyIncome]' role='measure' type='quantitative' />
      <column caption='Total Inquiries' datatype='real' name='[TotalInquiries]' role='measure' type='quantitative' />
      <column caption='Total Prosper Loans' datatype='integer' name='[TotalProsperLoans]' role='measure' type='quantitative' />
      <column caption='Total Prosper Payments Billed' datatype='integer' name='[TotalProsperPaymentsBilled]' role='measure' type='quantitative' />
      <column caption='Total Trades' datatype='real' name='[TotalTrades]' role='measure' type='quantitative' />
      <column-instance column='[AmountDelinquent]' derivation='Avg' name='[avg:AmountDelinquent:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BankcardUtilization]' derivation='Avg' name='[avg:BankcardUtilization:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BorrowerRate]' derivation='Avg' name='[avg:BorrowerRate:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CurrentDelinquencies]' derivation='Avg' name='[avg:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EstimatedLoss]' derivation='Avg' name='[avg:EstimatedLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LP_NetPrincipalLoss]' derivation='Avg' name='[avg:LP_NetPrincipalLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LenderYield]' derivation='Avg' name='[avg:LenderYield:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EmploymentStatus]' derivation='None' name='[none:EmploymentStatus:nk]' pivot='key' type='nominal' />
      <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
      <column-instance column='[AmountDelinquent]' derivation='Sum' name='[sum:AmountDelinquent:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BankcardUtilization]' derivation='Sum' name='[sum:BankcardUtilization:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CurrentDelinquencies]' derivation='Sum' name='[sum:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[DebtToIncomeRatio]' derivation='Sum' name='[sum:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
      <column-instance column='[EstimatedLoss]' derivation='Sum' name='[sum:EstimatedLoss:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LP_NetPrincipalLoss]' derivation='Sum' name='[sum:LP_NetPrincipalLoss:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.563258' measure-ordering='alphabetic' measure-percentage='0.436742' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:EmploymentStatus:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Not employed&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Not available&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Self-employed&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Employed&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Retired&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerRate:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:AmountDelinquent:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:LP_NetPrincipalLoss:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:AmountDelinquent:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LP_NetPrincipalLoss:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:CurrentDelinquencies:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:DebtToIncomeRatio:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:EstimatedLoss:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:EstimatedLoss:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BankcardUtilization:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:BankcardUtilization:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:LenderYield:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:ProsperRating (Alpha):nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;C&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;B&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;E&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;AA&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;D&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;A&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;HR&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
        <semantic-value key='[State].[Name]' value='%null%' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <sort class='manual' column='[none:ProsperRating (Alpha):nk]' direction='ASC'>
          <dictionary>
            <bucket>%null%</bucket>
            <bucket>&quot;AA&quot;</bucket>
            <bucket>&quot;A&quot;</bucket>
            <bucket>&quot;B&quot;</bucket>
            <bucket>&quot;C&quot;</bucket>
            <bucket>&quot;D&quot;</bucket>
            <bucket>&quot;E&quot;</bucket>
            <bucket>&quot;HR&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]'>
        <groupfilter function='level-members' level='[none:LoanOriginationQuarter:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' />
      </filter>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]'>
        <groupfilter from='&quot;A&quot;' function='range' level='[none:ProsperRating (Alpha):nk]' to='&quot;HR&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
      </filter>
      <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]'>
        <groupfilter function='level-members' level='[yr:LoanOriginationDate - Split 1:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='Credit Risk 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Current Delinquencies' datatype='integer' name='[CurrentDelinquencies]' role='measure' type='quantitative' />
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[CurrentDelinquencies]' derivation='Avg' name='[avg:CurrentDelinquencies:qk]' pivot='key' type='quantitative' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year-Trunc' name='[tyr:LoanOriginationDate - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='Loan Date' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='true' />
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk] + [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:CurrentDelinquencies:qk])</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Credit Risk 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Amount Delinquent' datatype='real' name='[AmountDelinquent]' role='measure' type='quantitative' />
            <column caption='Delinquencies' datatype='boolean' name='[Calculation_475129814591930368]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([AmountDelinquent] &gt; 0) AND NOT ISNULL([AmountDelinquent])' />
              <aliases>
                <alias key='false' value='Not Delinquent' />
                <alias key='true' value='Delinquent' />
              </aliases>
            </column>
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column datatype='integer' name='[PublicRecordsLast10Years]' role='measure' type='quantitative' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PublicRecordsLast10Years]' derivation='Avg' name='[avg:PublicRecordsLast10Years:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_475129814591930368]' derivation='None' name='[none:Calculation_475129814591930368:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[pcto:sum:Number of Records:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:PublicRecordsLast10Years:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:Number of Records:qk]</rows>
        <cols>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814591930368:nk] / [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Credit Risk 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Available Bankcard Credit' datatype='real' name='[AvailableBankcardCredit]' role='measure' type='quantitative' />
            <column caption='Bankcard Utilization' datatype='real' name='[BankcardUtilization]' role='measure' type='quantitative' />
            <column caption='Liabilities' datatype='boolean' name='[Calculation_475129814592937985]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7) AND NOT ISNULL([RevolvingCreditBalance] / [AvailableBankcardCredit] &gt;= 0.7)' />
              <aliases>
                <alias key='false' value='Low Liability' />
                <alias key='true' value='High Liability' />
              </aliases>
            </column>
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column caption='Revolving Credit Balance' datatype='real' name='[RevolvingCreditBalance]' role='measure' type='quantitative' />
            <column-instance column='[BankcardUtilization]' derivation='Avg' name='[avg:BankcardUtilization:qk]' pivot='key' type='quantitative' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_475129814592937985]' derivation='None' name='[none:Calculation_475129814592937985:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[pcto:sum:Number of Records:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BankcardUtilization:qk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:Number of Records:qk]</rows>
        <cols>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814592937985:nk] / [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Debt To Income Ratio' datatype='real' name='[DebtToIncomeRatio]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[DebtToIncomeRatio]' derivation='Avg' name='[avg:DebtToIncomeRatio:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Employment Status' datatype='string' name='[EmploymentStatus]' role='dimension' type='nominal' />
            <column caption='Income Range' datatype='string' name='[IncomeRange]' role='dimension' type='nominal' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[EmploymentStatus]' derivation='None' name='[none:EmploymentStatus:nk]' pivot='key' type='nominal' />
            <column-instance column='[IncomeRange]' derivation='None' name='[none:IncomeRange:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='Count' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' scope='cols' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:IncomeRange:nk]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerState]' derivation='None' name='[none:BorrowerState:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' max='1500' min='0' palette='red_green_gold_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' />
              <size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:BorrowerState:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='0.80160218477249146' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Customer Quality 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower State' datatype='string' name='[BorrowerState]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerState]' derivation='None' name='[none:BorrowerState:nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginalAmount]' derivation='Sum' name='[sum:LoanOriginalAmount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]' field-type='quantitative' max='5585541.3752844594' min='-24685967.810550466' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]' field-type='quantitative' max='16878855.313601099' min='1263687.6792790077' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' />
              <lod column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:BorrowerState:nk]' />
              <geometry column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Latitude (generated)]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower APR' datatype='real' name='[BorrowerAPR]' role='measure' type='quantitative' />
            <column caption='Borrower Rate' datatype='real' name='[BorrowerRate]' role='measure' type='quantitative' />
            <column caption='Lender Yield' datatype='real' name='[LenderYield]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:qk]' pivot='key' type='quantitative' />
            <column-instance column='[BorrowerRate]' derivation='Avg' name='[avg:BorrowerRate:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LenderYield]' derivation='Avg' name='[avg:LenderYield:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year-Trunc' name='[tyr:LoanOriginationDate - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:LenderYield:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerRate:qk]' scope='rows' value='Average Borrower Rate Comparison' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerRate:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerRate:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='Loan Date' />
            <format attr='subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]' scope='cols' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerRate:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='3' y-axis-name='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerRate:qk] + [federated.156xcbr0wgc9lq1a1j15f1cxuruv].[Multiple Values])</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='LP InterestandFees' datatype='real' name='[LP_InterestandFees]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[LP_InterestandFees]' derivation='Sum' name='[pcto:sum:LP_InterestandFees:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[LP_InterestandFees]' derivation='Sum' name='[sum:LP_InterestandFees:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='496' />
            <format attr='cell-h' value='496' />
            <format attr='cell' value='62' />
            <format attr='cell-q' value='310' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <wedge-size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LP_InterestandFees:qk]' />
              <size column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:sum:LP_InterestandFees:qk]' />
              <text column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='1' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Loan Provider Profitability 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
          </datasources>
          <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
            <column caption='Borrower APR' datatype='real' name='[BorrowerAPR]' role='measure' type='quantitative' />
            <column caption='Estimated Return' datatype='real' name='[EstimatedReturn]' role='measure' type='quantitative' />
            <column caption='Loan Original Amount' datatype='integer' name='[LoanOriginalAmount]' role='measure' type='quantitative' />
            <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
              <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
            </column>
            <column caption='Loan Origination Date' datatype='string' name='[LoanOriginationDate]' role='dimension' type='nominal' />
            <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
            <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
            <column-instance column='[BorrowerAPR]' derivation='Avg' name='[avg:BorrowerAPR:ok]' pivot='key' type='ordinal' />
            <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
            <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
            <column-instance column='[EstimatedReturn]' derivation='Avg' name='[pcto:avg:EstimatedReturn:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[LoanOriginalAmount]' derivation='Sum' name='[sum:LoanOriginalAmount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</column>
            <column>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
              <shape column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[pcto:avg:EstimatedReturn:qk]</rows>
        <cols>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='86981' x='0' y='0'>
              <zone h='50000' id='1' name='Customer Quality 1' show-title='false' w='43491' x='0' y='50000' />
              <zone h='50000' id='9' name='Customer Quality 2' show-title='false' w='43490' x='43491' y='50000' />
              <zone h='50000' id='12' name='Customer Quality 3' show-title='false' w='43491' x='0' y='0' />
              <zone h='50000' id='15' name='Customer Quality 4' show-title='false' w='43490' x='43491' y='0' />
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='13019' x='86981' y='0'>
              <zone h='8200' id='6' mode='checkdropdown' name='Customer Quality 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' w='13019' x='86981' y='0' />
              <zone h='7614' id='7' mode='checkdropdown' name='Customer Quality 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' w='13019' x='86981' y='8200' />
              <zone h='7614' id='10' mode='checkdropdown' name='Customer Quality 2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' w='13019' x='86981' y='15814' />
            </zone>
          </zone>
        </zone>
        <zone h='11127' id='16' name='Customer Quality 4' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' type='color' w='11391' x='44264' y='30893' />
        <zone h='11127' id='13' name='Customer Quality 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' type='color' w='11391' x='9520' y='38799' />
        <zone h='11127' id='8' name='Customer Quality 1' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' type='color' w='11391' x='30838' y='54319' />
        <zone h='26061' id='14' name='Customer Quality 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='size' w='11391' x='1546' y='20059' />
        <zone h='33089' id='11' name='Customer Quality 2' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' type='color' w='11391' x='87388' y='49634' />
      </zones>
    </dashboard>
    <dashboard name='Dashboard 2'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Loan Date' datatype='date' datatype-customized='true' name='[LoanOriginationDate - Split 1]' role='dimension' type='quantitative' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[LoanOriginationDate]'>
          <calculation class='tableau' formula='DATE(IF NOT ISNULL( DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MM-EEEEdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HH-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-HHmm-MMMMdd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEMMMM-dd&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-HH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-MMdd-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-EEEEMMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddMM-EEEEHH&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-dd-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-EEEEdd-MM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMMEEEE&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   ELSEIF NOT ISNULL ( DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )  ) THEN DATEPARSE ( &quot;yyyy-ddHH-MMMM&quot;, TRIM( SPLIT( [LoanOriginationDate], &quot; &quot;, 1 ) ) )   END)' />
        </column>
        <column caption='Loan Origination Quarter' datatype='string' name='[LoanOriginationQuarter]' role='dimension' type='nominal' />
        <column-instance column='[LoanOriginationQuarter]' derivation='None' name='[none:LoanOriginationQuarter:nk]' pivot='key' type='nominal' />
        <column-instance column='[LoanOriginationDate - Split 1]' derivation='Year' name='[yr:LoanOriginationDate - Split 1:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='99675' x='0' y='0'>
              <zone h='50000' id='1' name='Loan Provider Profitability 1' show-title='false' w='99675' x='0' y='50000' />
              <zone h='50000' id='9' name='Loan Provider Profitability 3' show-title='false' w='49838' x='0' y='0' />
              <zone h='50000' id='12' name='Loan Provider Profitability 2' show-title='false' w='49837' x='49838' y='0' />
            </zone>
          </zone>
        </zone>
        <zone h='11420' id='8' name='Loan Provider Profitability 1' pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' type='color' w='11391' x='78112' y='75256' />
        <zone h='12884' id='11' leg-item-layout='grid' name='Loan Provider Profitability 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:ok]' type='shape' w='30024' x='21074' y='28697' />
        <zone h='26061' id='10' name='Loan Provider Profitability 3' pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' w='11391' x='82506' y='2343' />
        <zone h='7613' id='7' mode='checkdropdown' name='Loan Provider Profitability 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' w='13019' x='62408' y='73792' />
        <zone h='7613' id='6' mode='checkdropdown' name='Loan Provider Profitability 1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' w='13019' x='62408' y='81552' />
      </zones>
    </dashboard>
    <dashboard name='Dashboard 3'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='prosperLoanData' name='federated.156xcbr0wgc9lq1a1j15f1cxuruv' />
      </datasources>
      <datasource-dependencies datasource='federated.156xcbr0wgc9lq1a1j15f1cxuruv'>
        <column caption='Prosper Rating' datatype='string' name='[ProsperRating (Alpha)]' role='dimension' type='nominal' />
        <column-instance column='[ProsperRating (Alpha)]' derivation='None' name='[none:ProsperRating (Alpha):nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='99722' x='0' y='0'>
              <zone h='50000' id='1' name='Credit Risk 1' show-title='false' w='99722' x='0' y='0' />
              <zone h='50000' id='8' name='Credit Risk 2' show-title='false' w='49862' x='0' y='50000' />
              <zone h='50000' id='10' name='Credit Risk 3' show-title='false' w='49860' x='49862' y='50000' />
            </zone>
          </zone>
        </zone>
        <zone h='6442' id='9' mode='checkdropdown' name='Credit Risk 2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' w='13019' x='65012' y='3075' />
        <zone h='26061' id='7' name='Credit Risk 1' pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' w='11391' x='41660' y='56515' />
        <zone h='5564' id='6' name='Credit Risk 1' pane-specification-id='1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' type='color' w='14158' x='79496' y='3367' />
      </zones>
    </dashboard>
    <dashboard name='Story 1' type='storyboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Propser Loan</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='275' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='7' param='vert' removable='false' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='6533' id='6' type='title' w='100000' x='0' y='0' />
            <zone h='92886' id='1' param='vert' removable='false' type='layout-flow' w='100000' x='0' y='6533'>
              <zone fixed-size='176' h='26706' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='100000' x='0' y='6533' />
              <zone h='66180' id='5' paired-zone-id='4' removable='false' type='flipboard' w='100000' x='0' y='33239'>
                <flipboard active-id='1' nav-type='caption' show-nav-arrows='true'>
                  <story-points>
                    <story-point caption='&lt;Customer Quality 1 &gt; This bar chart shows that HR prosper rating has the highest debt to income ratio, AA prosper rating has the lowest debt to income ratio. Besides, over 18,000 borrowers are rating C (top one). Then prosper rating C is the second large group.' captured-sheet='Customer Quality 1' id='1'>
                      <currentDeltas>
                        <worksheet name='Customer Quality 1'>
                          <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]'>
                            <groupfilter from='&quot;A&quot;' function='range' level='[none:ProsperRating (Alpha):nk]' to='&quot;HR&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
                            <target field='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' />
                          </filter>
                        </worksheet>
                      </currentDeltas>
                      <capturedDeltas />
                    </story-point>
                    <story-point caption='&lt;Customer Quality 2 &gt; Most of borrowers has the income range between $25,000 and $49,999. In this group, employed borrower has the largest number, full-time employee is the second large. We also can see 593 income range $0 records, and nearly 8K not displayed records.' captured-sheet='Customer Quality 2' id='2'>
                      <capturedDeltas>
                        <worksheet name='Customer Quality 2'>
                          <selection-collection />
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='&lt;Customer Quality 3 &gt; From this map, we see California has the highest loan amount from 2005 to 2014.  Texas, New York, Florida is the second, third and the forth, repesctively.' captured-sheet='Customer Quality 4' id='4' />
                    <story-point caption='&lt; Customer Quality 4 &gt; This time we analyse what is the main prosper rating for each state. The borrowers in Calnifornia most are defined as D prosper rating from 2005 to 2014. ' captured-sheet='Customer Quality 3' id='3' />
                    <story-point caption='&lt;Loan Provider Profitability 1 &gt; We compare borrower APR, borrower rate and lender yield. Borrower APR is higher than rest two from 2005 to 2011, and later lower than borrower rate from 2011 to 2014. We also can see the interest rate trend from this line chart. Interest rate increases very fast from 2005 to 2006. Later affected by subprime mortgage crisis 2007-2009, it grows slower than before. However, as the America  slightly recovered from this crisis, the interest rate intreases to the peak at 2011. After that, it goes down graduately.' captured-sheet='Loan Provider Profitability 1' id='5' />
                    <story-point caption='&lt;Loan Provider Profitability 2 &gt; Major loan provider profitability comes from the interest and fees. Seen from this pie chart, excluded the missing value, C prosper rating yields the most interest and fees. D prosper rating is the second one, AA prosper rating has the least profit generation.' captured-sheet='Loan Provider Profitability 2' id='6'>
                      <capturedDeltas>
                        <worksheet name='Loan Provider Profitability 2'>
                          <filter class='categorical' column='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]'>
                            <groupfilter from='&quot;A&quot;' function='range' level='[none:ProsperRating (Alpha):nk]' to='&quot;HR&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
                          </filter>
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='&lt; Loan Provider Profitability 3 &gt; According to this plot,  we can see E prosper rating has the highest estimated return, then it&apos;s D prosper rating and HR prosper rating.  AA prosper rating has the lowest estimated return.' captured-sheet='Loan Provider Profitability 3' id='7' />
                    <story-point caption='&lt;Credit Risk 1 &gt; Year 2007 has the highest average debt to income ratio which is the subprime mortgage crisis early stage. Later the average debt to income ratio cut in half.  In 2009, HR prosper rating has higher chance to default in payment than rest of prosper ratings. However, util 2011, E prosper rating surpass HR prosper rating and become the top one delinquent group.  ' captured-sheet='Credit Risk 1' id='8' />
                    <story-point caption='&lt;Credit Risk 2 &gt; We see in amount delinquencies records, D prosper rating group is easier to default on a debt. But for public records last 10 years, E prosper rating borrowers&apos;s delinquency ratio is the highest. ' captured-sheet='Credit Risk 2' id='9' />
                    <story-point caption='&lt;Credit Risk 3&gt; If we consider borrower&apos;s liability, in high liability group C prosper rating has the largest number. However, the highest bankcard utilization is in D prosper rating group.' captured-sheet='Credit Risk 3' id='10' />
                  </story-points>
                </flipboard>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' maximized='true' name='Customer Quality 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:DebtToIncomeRatio:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <axis>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:CreditGrade:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:IncomeRange:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]' type='color' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:Number of Records:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Customer Quality 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[sum:LoanOriginalAmount:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Loan Provider Profitability 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[yr:LoanOriginationDate - Split 1:ok]' type='filter' />
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:LoanOriginationQuarter:nk]' type='filter' />
            <card pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <axis>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Loan Provider Profitability 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Loan Provider Profitability 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[avg:BorrowerAPR:ok]' type='shape' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[tyr:LoanOriginationDate - Split 1:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814591930368:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Credit Risk 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:Calculation_475129814592937985:nk]</field>
            <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Customer Quality 1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Customer Quality 2'>
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:EmploymentStatus:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Customer Quality 3'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Customer Quality 4'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='15' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Loan Provider Profitability 1'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Loan Provider Profitability 2' />
        <viewpoint name='Loan Provider Profitability 3'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.156xcbr0wgc9lq1a1j15f1cxuruv].[none:ProsperRating (Alpha):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='12' />
    </window>
    <window class='dashboard' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='Credit Risk 1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Credit Risk 2'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Credit Risk 3'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='7' />
    </window>
    <window class='dashboard' name='Story 1'>
      <viewpoints />
      <active id='5' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Credit Risk 1' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Credit Risk 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nO2dWXBc2Xnff7d39AY00MS+rwQxAAjuyww5nDEjjWYkRXakkmyXk9iWqxLF
      SR7ylreUK3lIJRU7by47tqUZS7ZGmpFm0WikEYfDGRAkSGIHse9orI3uRu/LvTcPIEFSJIDG
      DjbOrwoF4N5z7vfd0/ffZ7nnO0dSVVVFIDikaPbbAYFgPxECEBxqhAAEhxohgF1maW6S261t
      hKLx1WOLU1MseRdZ8Pq2dE334iyz3vCa54f7O/Auhwn43Ny8eYtFb2BLdgKeOVpaWvD4H9mK
      hkMkFJX7I2MoKdB9lEQneHf57Gf/TNiWx/DEPOcrHUx4ZQoNMcwVVYSDMYZ72sgorKIkXeVu
      3yT1NUdJLyxjaXKCxcl+dJkl6KILjLoWuPrqFX71y085cbwevcNB+40b1J9/keHuO+SUvcCp
      hhoA3n/np1z92jcYuPMJUyEDY4MTHK/JI6Lq8S9O4SyrR/LPsyyZsSaWmFiK8OrLF/nNJ59Q
      f+oirv5Ociob0c92cj/hZG54kDPHChmejSH5+wk4GmjIs6FRQ3QPTnHltde489kn2DKLeeXl
      M0j7XOabQdQAu4yk1VNT3whhD7/6/DbTYwMsBuOEgx7Gp0aR7HlMTQ5xo22QoxlG2jp6cC0F
      6Whr4drtHtp7uhl2zVGYaeBHP/2IK1/7OqbwEnduN+MKRbl37y6umUmWw1EAYv5ZVHM2Rq0E
      JOhob6P8aCW3b7eRaddiyj/GcNttxmdc+Jf9DE14aCiw8O6bP2FqKUT7zTt09E9RXZaPisJv
      PnwXZ2UdvmUf9+99gdmZy7nzZ3DPTtPbP86JkixuXPs1ZNYwPzKwv4W9BXT77UCqY7WaeO8n
      P6Lx9Iv4RzoIaczk5jhJs9pxOmR0BivBNAnZs8Snre1Un7nEresfUZBXRnVMJrOkDKM+So7N
      wNnsMj5456dcrD/K0epaQnfbKC8qZIYE3sWVZk5vZw/HGk4AYLEd4ZvfPkNFXgaaaJDqimra
      /+k9jAUlZGsDTC/6WF6collNcOnLL9HccpfSyiIKyooxGfSY7Uf4s+/9Ofe+aEWjWSYrK4uK
      sgqab97kBWcWWosVx5EMKjNL6bp7k3lPZD+LekuIJtAe8rCoJenpRoKqqswP9RNxllCcYUKS
      pGemXzkmIUmPrvcQSZJovdXM8dPn0Wue3RBRVQUea6Tcae3k1OmGR/Yk6ZlNmKfsPpYuHnTz
      4cfXyC+v41Rj7XPVBNpVASQSCWRZxmg07pYJgWBb7GofQFEU4vH4xgkFgn0i5TvBsXCAru4B
      Qn433kBs5aCq4PMuA5CIBWi+0Uzv4PhqHlUJMTY+z9zs4uaMqQl8WxxyTHX8S/PcbG5hZHLu
      0TGvm/k5N/Nuz6aupSoxfL7QjviV8p3gWCTM6EAvRlMl0ZibOzOTZDidjPYO8uLvvEqmWSY9
      s4TYwgi9RFiYnqa0qgLvkkTcGmZ44B7LEQO1lXmMTs7gsDuwZhejhjxEw0vMuYNkp5uYX/KR
      X1pCx50+rr5+lUybeb9v/UDhXw5QVlnL+EAXQd8Mi4teCvILMBnMROJhujvuoEoWinLNTM16
      yC8oxmzOIBpYZNnnxhdRyXbo8Xj8WK12BkcWeeNffgmzfnvf4SlfA6CqVNUeZaCvnyWXi2On
      zpMIhymvrCHviANQHySTmJ6ewmSzEgn5AQiGQpjScyjLOcLMgofzZ48TCwTwh2L4lnxMz86g
      10EwodJQdxTJaKayskY8/M9CffhLwjXjwmDUEY1FUFWZQCiEI7ecbJsVTzDGyYYaIv4g4VAU
      v8/LzOICWmL4ZCPnzzWhkdKoqjq67YcfDkENYEizkJNnwqyTMDmyGO25R37pUWLeGVyLXrLt
      ZnyeQTLzijnrMNAzOEFGZg52mx6NZEBRQC9pyFTttLe1oRiyScyPkpbu4FhuLVPzPgrycjBb
      bUiqjsTiHG5/mCxb2n7f+oHCmmGjt6+P3LIqyggxMr3IkewcTHoDhjQDksaAlLAgx/20d/aQ
      lVuNb3EEU0YORzOsLAVl8nOz0WhN5OQX4Bq7TzBegmWbItjVUaBYLEYsFsNqte6Wib1FjeNb
      jpGebtlvT1KaRCxCJC5htez+6OGuC2BxcRGTybRbJgSCbSFqAMGhJvU7wQLBOggBCA41WxLA
      vGuM23fbCIVDtN1tZWbBTW9nJ15/iBnX7E77KBDsGlvqA/h8PmZGB/FFZXILKxntbSEtw0kg
      EMTuyKWp/ihajST6AIIDz5beA8xODxPSO8i3x9AaDaTZnWSajfgWl4l6Fhgcs1NdmoeqqiiK
      gizLO+23QLAjbEkAQX8IWZIxZpfQ33OX7JJKnGYJ25FCRocGcGZmoNVqkWUZrVaLTpfy79sE
      zymHfhhUkeO0dvZz5ngdXS3X8WPj4vmTKHKC+z29HKtv4P7dz5kP6bj80jl67nRR1XgMo0G7
      364LdoBDPwoUmJvhF5/eIB6a5VrzCCVlZQAszs4w2NYPsoePPumlrKICv2uEH/7sBpGwmOKd
      Khx6Adjzi6kqzkRO+NFm5PPB9Y9QVZXsgiLyM22osh/VlsOnLR/zd++9jy0tQv+Ea7/dFuwQ
      h75xPj0yyNToOB2jx8nVzhPV5fCbD35BZWUedwcHsNTVUmHz45cz+N6f/T4jfZMUlubut9uC
      HeLQ9wEe52FRBMNRrGbTU8efFcsreL459DUAgKzItE/fffKg+9lpjxecRKsRHeBUQQgASChx
      /te1/55U2r/59j9iNoiAl1Th0HeCBYcbIQDBoUYIQHCoEQIQHGqEAASHmm0LQFUUVPXRWLlY
      aVTwPLGlYdCp0X7G58LUlmXSdn8Uo05PPBIku7iMRCRBY8PRnfZTINgVtiSAgtIK3J5etKh4
      l9yYbQ5MEoz292FKszK/VEBWuhlZlkkkEgd+fdBEIrGptHHpYN+PIHm2JACve4HFRTdWs0pp
      ZS0+r5cTtUX0j84RjwRZ8i2TnWlbjQXQ6/U77feOokjJB+w8D/cjSJ4tCUCjNVDXUEt6RgYW
      j5vqijKMOpWmE3n4vEtkOLJ22k+BYFfYkgDSHVmkP/g7La/giXNO55Ht+iQQ7BliGFRwqBEC
      EBxqDoUAVFV9aj8tgQBSSgAq197+Ae9+0Y+qxPn7v/trxt0xVDnKT97+AT98811cXZ/xN2/9
      E2OuKb7/5lu8f61lv50W7DMpJACJi5dPE5Mj9Nz8FFtRIf6QjOxfJL+2kWqrhr65KFa9ASWc
      wKBJoFPCiHrhcJM6AlBVvF4vXs8SvnCM5ckhpqZcBKIK05PTTC0HqTh2jAtNldzu7efCuctM
      D4llHA87KRQRpjLlVqlyGGk88xInCONxLzE8HeR0ZRGRyhfI0Kvcc3l5/XeuMNh1h/OvXHyu
      9rQV7Dy7LoBENMyN3mHOH6/mFz//GXk1JzlVX4V7fIBf3+rg4uUv09/+KZacKmqcOn7ZOsTv
      fu1LGLSbfDQlDSfOnX/sgI20Ahv5T76m4MrlQgBOnLmwvRsTpAS7LoCAe4HPW29z8dQLXLj0
      Mh989CtO1VfRfKubk+cu4rRHeW/Mj2mqhVlzGq+/3MAnN8Z57eXSLdm7Nz1F28zUhumOHsnm
      Ykn5lmwIUoddF0BGfjHFuV1IksTEyDAhkxVVVXn5y1fo6+1iqHMOjCaCkp5snRGzw048sPW9
      dt2hIAOLCxumc6SJwHbBTsQDPBhjXyseYHzgPjMTU9y8007f6BROWwaffPAhruE+hoaGqHjh
      DDa8ZNkzqSzL5O++/wkXfqdyu24JBEmxpRpgemyAuWWVhuoCbrXeIye/gAXXNPkV1YSXgxw9
      WrGatqS6lv9y4jQAF06fAFUlGI1hMRmpaVpps1f9mz9eTV9z6sXt3I9AsCm2JIC84nLc7fdx
      TQzjCUSxBvz4g0E629qwWGzkFxVhMWkfxQO4R8E9sJrfADxzRr3lCGTXb+1OHqAoStLpHsYp
      JGQRD3BY2dp0aI2Eqqro9SZqahuYd41w4dxJ2tv7sdstTLpcHKssWY0HUMduEk1i4Sld1VVM
      r//vrbj0mG/Jteo0Gs3qvgWbjQcQ+x2kDlv6JMcG+4kpUUzOcpaGBigqq3owDHmG8eEhSosL
      t7yO5l6uv/k8+CjYXbYkgNKqY5Q++NvRdOKJc7V1ddt0SSDYO1JnKoRAsAWEAASHGiEAwaFG
      CEBwqBECEBxqhAAEhxohAMGhRghgi/i9bjzBGKqSYHLm4exTleH7nUzPLhEJ+ens7iahqMQj
      YeZmPPvqr+DZiHf6W0Ll9rvfZ+Ho73Le5uPN39zhv/75H+Md7qV3fJHw7T7SbFac2Vpa7huJ
      j7Qz6cnjj/5ITPQ7aIgaYEtIXHzlHDqtREldA6X5FgCsefnEwkvMuUaIOmycOV7H0NB9uhci
      hAPzyGJplgOHqAG2girzq2u36fRnU6a46OnspL2iBp3WgkGnJ/PoaUokmb/50QdcvvoVrFKC
      O60bR6kJ9p4tCUCR44SjCSzmNOKxCDFZIhYKYEnPIBGLYTan7bSfBwtJy1f/9X/iqw/+PXn2
      HD7vEhqjhboXVoJ5JAlOXb68OnGusLhsn5wVrMeWBOCaGmdsyseLF5pou3WdqN4J8QA6kwWj
      wUJTQy2HYcKkEvehykEArCaACEr06XSSzopGZ99T3wTJsSUBFJaU4Xb3MD/eT1AxoMYVLBoN
      7tk5jEYTYy4nxbmZqwExWjm5+faKom57M40tBcRscYOMyOQPiC9+sGEeQ863MOb/YdI2BHvH
      ugKIRqOEw2FMJhMmk2n1+NhgH+Pj4+QUnaemTMe4W6YyNxu7M4FrYhgJCa1WuxoQo9VqSeYR
      02ikbW8+sZmAmIe2trpBRkyTXDWn0WrEphoHlHUFcP36dZaWlsjKyuLq1aurx0ur6iitejjv
      30l+MaCqZOVJHK0uFwEjgueGNQUQjUbJyMggNzcXszmJJUQePPTi4Rc8T6zZXhgbG6O1tZXZ
      2VkmJib20ieBYM9YUwA1NTXU1NSwvLyM1WrdS58Egj1j3T6ARqPhtddee6IDLBCkEusOmaSl
      pfHhhx8yPj6+V/4IBHvKugLw+/2YTCY8HjGTUZCarCuARCKx+iMQpCLr9gEKCwupq6ujv79/
      r/wRCPaUdQUwPz/P0NAQ5eViHX1BarKuABwOB1qtVowCCVKWdfsA09PTDA0NMTMzs1f+CAR7
      ypo1QCwWIy8vj5qaGrRa7V76JBDsGWvWADdv3kRVVX7+85+TlZX1xLm56VG6eocI+73cbG6m
      o/s+rc3NTM8tMDg4tts+CwQ7xpo1gNlsZnh4GLvdzsLCAg6HY/VchjOXmdlBjBYb1eWFdN3v
      R1EkOu7dw2LLIL+wAJNBg6IoyLKc9Bx9VVG3PeSqqMnaUlZtJRLJT4d+GOMArG4LtRlbgoPF
      mgJobGyksbERg8Hw1Dmj0YAEhHyLdAzO8tJLr+B3u+jqGcFm1DA+7aK2ohhJktBoNMnPEJWk
      bTe3krUlPWZLqyZvU6PRrOZL3pZGNCMPKGsK4Pr16/T39/PCCy9QUVFBUVHR6rmxwX7CsRBL
      wQgWIwyPT1GQaeHE2dOMDQ1SnJ+HJElP/CSDJG1/OrWU7NbXj/m1GZObuZ/HnBLTxA8oawrg
      8uXL2O12wuEwdvuT8aylVccorVr5u7iw5Ilz9Y2NO++lQLBLrNkJNhgMzMzMUFRURGtr6176
      JBDsGeu+ByguLqazs5PKSrFvryA1WfdNcHl5OU1NTaL9KkhZ1q0BPv74Y5qbm5mfn98rfwSC
      PWVdAdTX168ujSIQpCLrCmBwcJBQKMTAwMB6yQSC55Z1BVBRUcHMzAwNDQ175Y9AsKesK4CH
      sQCjo6N75Y9AsKesKYCuri5mZmbw+/3ISa7tKRA8b6w5DFpfX4/X62VpaYmcnJy99Ekg2DPW
      bQKNjo4mPeNRIHgeWVcAJpMJu93+1IzQkN/D+NQMSiJK291WXAtuejs78PiDuFyzu+qwQLCT
      rPsmuKamhrm5uafmsociEean59DFfGTmljPQ0YLJ7mTmzi3sjlyyc7LRaiRUVV39SQZVTX6O
      /ZrXIMn8j/m1GZObuZ/HnBI16QFlXQHk5eVhtVoZGBh4YmUI55FspicWUFDRGwyk2ZxkWkws
      u5eJeRcYHLNTXZqHqqooipL8h6+q2+5wJy+2R7Y2Y/NhkM/mbCliIOGAsqYAFEVhYmKCmZkZ
      6urqnjg3NtiP2+smr6iO/t67ZJdU4jRL2I4UMDY0gDMzA61WiyzLaLXapDetkDQSOt329u3T
      SMna0qzakpPavmOFh5t+wCYCYh6zJThYrPmpTE5OMjc3x8DAAOnp6U/UACvxAMcAyM7OfiJf
      brZzl1xNDfp67tLRPUjt6cs0lOcy2NtF94iXSw15/Lqlg0uvfAWnNUbbsJczdaX77W7Ks+Ha
      oK+88grnz5/fK39SnppjJzhZXkgkIqNE/Vy7dZu6o+V83tzBuUuXyck08f677zO6ICYg7gVr
      CkCj0ZCZmcnCwgLT09N76VOKk+Bu/wKnawtQ5Th6k4GJ5p9T88orTPa389HbbzEwvkh3y51k
      u/OCbbBmE6iwsJDCwsK99OVQ4F9apPZkE/6FKTrHIuQ6rEwsGcga72FiYpKzV77Oa9/M4N7Q
      RLLRzYJtsKYAuru7V+cA1dXVUVFRsWdOpTL2rDwasiARCXD2lAWd9Cja7vipF1c71ierxMba
      e8G6UyFGRkYYGRnBbrcLAewQcjzB/NDDpSbX3ndBAnJri9Y8L9gZNlwe/eF+v4KdIRqMcPvN
      axumk7QavvbfxObau82anWBZlonH41y6dEkIQJCyrFkDeDweenp68Pl8HD9+fC99Egj2jDVr
      AKfTSUFBAcFgkMnJyb30SSDYMzacN2CxWJJe3FYgeN5YswnU0dHB5cuXURQFs9m8lz4JBHvG
      mgKYmpqit7cXvV5PQ0MD1dXVT6VR5AQTExNkOHMI+zw4snOJhUPY0+3PuKJAcPBYUwDHjx8n
      Jydn3VmMi65Rpud9DPb1Y8lIZ3hyCrMlg6Z6+6ZWXBYI9os1n26v14vH46G6unrNdwEajYZQ
      wI9kTscoqcwtLhEPBBnOcFBW4FzdTEKb5Fx4RVGJx+NbvxtIur+iKMqqrc1sXpFIJIhL8QfX
      SG62jiJvwZbKtstCsDFrCsBgMPDxxx8zPj5ObW3tM7dK1er06HVa9GYrZUUZpGcXMjU2hNGg
      XxWNTqdDq9UmNeNeo5HQ6/XbuZ+kYw80Gs2qLUVKPlhFp9Ot5otpkqvmNNpHtuLJxgVIbLss
      BBuz5qdRVVWFy+XC7XYTiUSemcaRU8ylI4Urm0YAmZJERVmxWExX8Nyw7tfR8vIy+fn5uN3u
      NdP89jeuePgFzxPrCuDq1atiXSBBSrNmgzkejxMMBunq6mJkZGQvfRII9ow1a4DFxUV6enqI
      RCJii09ByrJmDeD3+/H7/dhsNmw22176JBDsGWvWADqdDqPRSGNjIxkZGXvpk0CwZ6wpgPLy
      8meO/e8fKqq6MsqkrvxxqGJmvZ5FFEmHIz0dVY6z6PaQkXWEaHCZuKrDYpLw+gJkOp3oRfxG
      0hzY1ZrCU118/1oXL54/R11lOTdv/JreQRcXLjTR3tZFUWUj9YVW3vq0m3//nTf2291dRuWd
      N/+WF156jVON9bimx7nfP0BkOcTIUpTzp88QnWzFZ8rh0ksvoU8TAkiW5F6b7gMuVwCL0YiU
      WHkbeursBZSQRF5hFUXZR1Bj8MmNFpx5WYdg3U2F3NJaeu/1ogA5OUcYGpunpjAdrVnHYFsL
      afk1xKYnmF4M7LezzxUHVgDp5ZW88aVXuH33BqFQiH/88Vtc+cZrjPU1s6h3cLLOgSJp6bzZ
      QiiW2utuqnIYry+AR47Q1dHHR+/9GMloIGrNIB70ETZALLKMJxIgmEjtsthpDmwTyKKHT5tv
      8uVXX+TzWyMcr6xmoKOVmqoiDPOTjLud/KtvfpNLHg8W44G9jR1B0lr59h98B4Cx4REav/nd
      1f7PC3WnV9IA5y9eEW/iN8m2n5zHmx8rHVR2ZCp0WvoRXnvtKwDk5q4ca3xwrqKqfjVdtsOx
      fWPPAdLK2vGUlZXCY7NrHy9qCUDSQJKT9ATbFEAiEuBW6z1y8gtYcE2TX1FNeDnI0aM7s4bQ
      4v/5K9TExlOCM//0T9Cm+lDt9RYYndg43dkmqKvZfX9ShG0JwDUxhCcQxRLwsxwMstjWhtls
      I7+oCItJu+14gNC9uxDbWADx73wHxWJ5cI3UjAfQKkpSHTZZVlBEHEHSbEsAen0aNccamJ8e
      4eK5k7S392NPtzDpclFXVbrteAAJKakFYnU6LboH+VI2HiDJ+9JqNWhFHEHSbGsUKLekktjS
      NEVlVSDpOHHuDHqDgfJisaiu4PlgWzWApNFS13TiiWO1v7WbjEBwkDmw7wEEgr1ACEBwqBEC
      EBxqhAAEhxohAMGhRghAcKgRAhAcaoQABIcaIQDBoUYIQHCoEQIQHGq2LYB4LEIwHGVpcZFY
      QiYUDO2EXwLBnrC9iDBVoe3WdaJ6J8QD6EwWjAYLTQ21YoMMwXPBtgQwP9ZHUDGgxhUsGg3u
      2TlMRhNjLifFuZnbDohRk4oGgERCRo0/DFIRATEiICZ5tiWA9NwSarQGJtwylXnZ2J0JXBMj
      SJK0IxtkiIAYERCz22xLAMY0C/nFleQXA6pKVq7E0epysTKB4Llh50aBHjz04uEXPE+k9oI6
      gpRDVVWWfR4kXRp2axqxaBjfcgC73Y5/eRmt3oDVbGQ5GCEzI33DL2QhAMFzharEaP6shZG5
      Gb733T/BvTBHR3sr/mgaToeJW22d1OSVElfnabz6HWqy09e9nngRJtg33LMT/POP32HBGwZV
      ZWZ8kOk5N/Pjfbz903fwR+L0tt9lPvjYQmAaAwZi1B9biT3PcdoZ7OqjoOoYpU49L732LXSF
      ufze65fon3pyc8dnrSErBCDYN2Q1jfPHsukY6AdgcsTF0sQUn934AodFz73Ofqbar9E9F1vN
      Ew8v8LNPbuEJJ2jv6KO3s5fs8nL8CzPcGZ7j7NECpNkZ/vqtj2gqt6zma2+5yZt//w8Mujyg
      Krzz5g8Ym54XTSDB/hGYn+Dz3iX+4NsXUIGjNdVMuebRqlqisShpepmq49X0PfbFbTBn81d/
      +T9QVZXRoRHKGl+k7vTFJ/aLeONbv4uirAyrP6ThzBnmRtpAo4AkcaHpFOFoWAhAsH8Mz0xh
      0ES4fasVSZfB0vg9FvwJKsryGJ+epcyRwfVfXWM54yZXKl5ZfcBVVQZUyipLQH3whknliXdG
      kgSqqkGSVho5v/zJT8k7/Q3KnXZiCRk5kSCeSAgBCPaPq1/+OgCJaBAMFnSnqlfPvfjgd+13
      //NT+QKDf0Hc27Lh9c2l/wFT9usA5FcWMtx1E99EJs6iCianRlENFiEAwf4RjofpnL63YTqt
      Rsep4rPbstXYdJ7Gpkf/11UXAWIYVLDLPBx5ebi32+Pj8p7QEn/52f/c8Bpp+jT+tviH2/Ij
      sOij79cdTx0XAhDsACrv/t+/QL7wp/zeyTx6b92mpbuXi5dfpafjFgsLAeorchibX+a1r76B
      w27Z+JI7TDQYZbpr7Knj2x4GVRQFVVVXlZ7y23UJnoHEl964vPqfOdOI3WFjzhekpOgIjtxy
      Ogb60WmjDC8s76OfT7OtGiC0vERHdz+BUABJkXEWlKDEVU4cP7ZT/gmeB1SZL75o5V7AQ4Ot
      AYOkI00HobG7/LxrnK9efRmHUoE36mFpObzf3j7BtgRgtmVgNYA1vYClORdTI0OYTBZmFgrI
      zrSKeICHtg5BPMDJr/xbmpCYHBmnqK4aa2YuFouZM1dCSBot5pMm/IEgNrtt9b5kObmyUH+r
      LJLdFfTxcpfXeAa3FxAzNcjwQojj9WUUOq2MTHlZ9szjDwbJO5Iu4gEe2joE8QCOzEwAsjJX
      9mwzpZlXfpvSVtMYTaYn8mi1yZWF9FtlEUlyxvHj5a5dY/PwbQkgK6+cVzPy0er0GPVajh8p
      JBIOk/bg5gUHADXBR+//jLjRTlluOu33eig/eZHoRDflDa9SUrT+ZLFkee9+N22u6Q3TXSmv
      5KWyndlDbifYlgC0Oj0225PfNhbL3vfwBWsjh+YYDdrID4xiO/fHVLoWyXHmECHO8kIIdkgA
      UTlBMB7bMF1MOVj7GIvJcCmO1pzP1aYifEtR0ggwFZAozUvHbrPvt2sHAiGAlEdlYmiYihMv
      YYjHuHDpPImQnzu3bzA41kWS/fiURbwIS3UkDa+8/sbqvw93U/76t35/f/w5YAgBpDCJsS+Q
      p+9smE6bdxxd+eUN06UiQgApjDx5i9id/7dhOn3THx5aAYg+gOBQIwQgeCZRv5d3f3kDgNCS
      i09a7zPS2cYPf/hjvMHk35wfdIQABM9ESciMTAyiKjIf/upTvJEAHffukia56R87WBPatsO2
      BCDHI9xtvcXk7DzdbW24fX6mJl075ZtgH0lzZJGdaSa80M/0nJ+2z28T0aZTVFJOYNaz3+7t
      GNvqBM9OjnGkoIqR7hb01gxm7tzG7sgmOy8Xg05ULs8z0yMD+ObddM0Z+Y9//l3uT0wTmZ2k
      r3+YK6+/tN/u7RjbEoCKikanw2jLJCfDxpA3hBLwMjw+TW1F0U75KNgHCsqr+d6/exSje6yk
      CEqKOHH2wj56tfNsSwA5eUW03rlHdmkVDhM0OvMYGxwgOytzp/wT7DFqLEbgN9eSSmv9F1eR
      kpylelDZlgD0aVYuvHTpiWPZWecAVqPEZFlGVrXIuo0nyUmS8Yn58orJiJpEAScUBR7kk1QV
      QxLTZTWqumpLTsiYtKYNcqzwMMYBQFZ1yKRtkANkRfsojywj6Z89NfcJ/7SaJ2MHJECbxMOm
      qqtlkZD0SZW7RtKv2lLCYdw/+qeN7QCmly8jPZjerVFJqtwl5VG5q4qSVLkbNVXb+M0AAAMH
      SURBVKYnykJWDcmVu/yoDBVVeWa5S2qy0QWbRJZl4vE4Pp+PtLSnnf3tAOnfzrvW/O218imK
      giRJzzx30G09Hji+E/6tx2Esi/Vs7ZoAAGKxGLFYDKvVuql8iUQCXbKBIw94GAmWbEDMdmzJ
      soxGo9n0w7cVW1vJs1VStSzWy7dPDTiVeDyxZrTXs5xNJBIPvh2enVej0Tzz4VdkmVgstmao
      5FoFo8gy0WjsmeF3Wq12jW+oBPF4fM2QvWfZUlWVeDxGLB5/Znk8lUdVVxYiUBQURSEWiyEn
      GQa6+XJ/lH7Fz6dfgK1XFrFYDGUTZQEgJxIr5b6JPIlEYsXPzZZ7LLY/AlDlBB++/UPm/MnG
      rqr85r23GZ1fJh50889vv0ckntyHPth2m7sd7dy43Zm8f6rKjeu/prt3gGQfLYA7nzdz504r
      XYMTSeeRYyE++OBD+gZGk8zgp6trgpnBfno6O2i528bnzXeTCh2VowHeefunLEeSjMVVZD58
      +x+Z88eJeqd46ycfJxmlDV0tzbS1t3K7YzDJHCDHwlz/7FPuD4wkbQeg+dPrtN5qZnByIek8
      Ue8M7398bX8EEFyaxuDIo7+nP6n08eAisimLwd5+RgZHOJKRxsRcci9jFEUhuLy8ydGKBHZb
      HiebXkC7iardZMng7LmzhBfmN2ELEvEYCUUhKUsSDA1009nbDyr4PHPojMak7MxOjpPuyGB4
      LLmXlSufUz593X10dw6Rb4eZJL+0FEXG7/GiMyQfnxwJBSgoquJ4/dFNPZj2jCOcv3gBz2Ty
      XzwA8Xh0fwQwMDxL04lGiCX3Sn14eIra+hew6mLM+aI0nTzO4uRYUnklScJosaJVNjN/RYfH
      N01LazuJTXSRgv4lvvjic6w5eUnnkQCNVgtqkmtgqFBeWUdjbTWqpOX4qTMEvR4S8sZ1lWt+
      meMnGgm5Z5PybXBohqYTjUgxH1GNnhOnGpm435tUXkmjwWzPQI0lvwxKmsXG+Fgfd9p6NlXz
      epZmufHZdZylZclnkiQ0Wh3/HwzNjHlqQnbZAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Credit Risk 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 1' width='192'>
      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
      UvtfJAUPzVZ7qGYAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 3' width='192'>
      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
      OQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Customer Quality 4' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      uHm4WcEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
      HOsLAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 1' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 2' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Loan Provider Profitability 3' width='192'>
      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
      cHH+3Gl02X8WZSqvACjT4JvBcWq8bjZjCQ53nWB7aw27SrO2FsXjcjAyNkXvsY6njbHyvaz6
      SU+eUtZ40pAqn0PD5VKjHOazlDXyWwE0nQtvnmPy4UMaq6u49fUV/PUBjrVV49lMszY3gabp
      0hjrBcqlLxCUfj5LWaOg3xGWyaTRddvBb4x1gAJQDvNZyhoFvaHVZvt+OTl5JsqdXOEmLE0C
      ICxNAiAsTQIgLE0CICxNAiAsTQIgLE0CICxNAiAsTQIgLE0CICxNAiAsTQIgLE0CICxNAiAs
      TQIgLE0CICxNAiAsTQIgLC2/tihKMTkxzGooQf/JY9wfuk9T+xEiyws0dnSR2I5w+EhHocYq
      RMHl1RVCKUUsFmX41m10n4/2w8cZvXMVh6+aRDyK013FwMAZPE7b075A+bbwKERniXxrPOnD
      k8+XhhSqRr5dIcphPktZI++uEKPDg9R0HkePraLbdJy+alobang0k8KpDB6MjHH2dO/TJk75
      dmEphxpPHlsONQrxWko9n6WskWcAFEbKILQ8S9fRowzfvUHz4WPUVOj0VAVYnHpAoLnl6adc
      IZo4maZZFjUgv75A2uO+SaWuUS7zWaoaBW2M9WOkMdZ3pDFWedSQo0DC0iQAwtIkAMLSJADC
      0iQAwtIkAMLSJADC0iQAwtIkAMLSJADC0iQAwtIkAMLSJADC0iQAwtIkAMLSJADC0iQAwtIK
      9k3xyZ0tbgzeo7Gtne3V5d2uEJEwx453FeophCi4gq0AwbkgPf3nWJmZYCeZYvT+IAsrq4Sj
      yUI9hRAFV7AAaJoinUljc/vp7erA7fRS6XLwcGy8UE8hRMEVLADtnUeYGr1Ha2cXHq+H3lOn
      sdkVbR2dhXoKIQquKF0hnjzFfm6g9KxyaWoljbHyr1GwneBcnm3g9OTNk0+tUtd4Euh8axRi
      HIWoUer5LGWNogSgkI2xyqHGQVoBymE+S1mjqI2xhCg3RT8RZpoZzJfInFLm099/0pEtH3ut
      YWZ2x6FMk8wel+onn9i7jYL3vtw/ncPHDYf3Ppbd+d3r63laK5PB3NPH6Hfj33ONZzZ7ctb4
      we+px/Nn++Uvf/nLPTztnpipKJe//IqZqUXSoSXG1+LUO2L882d36T3eifbD388Y3Lp+nfsj
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      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
      +CpNHGx1QAAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
